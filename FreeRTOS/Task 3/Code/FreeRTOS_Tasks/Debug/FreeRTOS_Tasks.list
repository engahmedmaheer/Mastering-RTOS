
FreeRTOS_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007898  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08007a68  08007a68  00017a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c24  08007c24  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c24  08007c24  00017c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c2c  08007c2c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c2c  08007c2c  00017c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c30  08007c30  00017c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a0  2000001c  08007c50  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144bc  08007c50  000244bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016781  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ab  00000000  00000000  000367cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00039a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  0003aeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023eb0  00000000  00000000  0003c160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ccd  00000000  00000000  00060010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd1e9  00000000  00000000  00076cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153ec6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005490  00000000  00000000  00153f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007a50 	.word	0x08007a50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08007a50 	.word	0x08007a50

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012ee8 	.word	0x20012ee8

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b974 	b.w	80005a4 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468e      	mov	lr, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14d      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4694      	mov	ip, r2
 80002e6:	d969      	bls.n	80003bc <__udivmoddi4+0xe8>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b152      	cbz	r2, 8000304 <__udivmoddi4+0x30>
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	f1c2 0120 	rsb	r1, r2, #32
 80002f6:	fa20 f101 	lsr.w	r1, r0, r1
 80002fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000302:	4094      	lsls	r4, r2
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	0c21      	lsrs	r1, r4, #16
 800030a:	fbbe f6f8 	udiv	r6, lr, r8
 800030e:	fa1f f78c 	uxth.w	r7, ip
 8000312:	fb08 e316 	mls	r3, r8, r6, lr
 8000316:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800031a:	fb06 f107 	mul.w	r1, r6, r7
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 30ff 	add.w	r0, r6, #4294967295
 800032a:	f080 811f 	bcs.w	800056c <__udivmoddi4+0x298>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 811c 	bls.w	800056c <__udivmoddi4+0x298>
 8000334:	3e02      	subs	r6, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a5b      	subs	r3, r3, r1
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000340:	fb08 3310 	mls	r3, r8, r0, r3
 8000344:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000348:	fb00 f707 	mul.w	r7, r0, r7
 800034c:	42a7      	cmp	r7, r4
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x92>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 33ff 	add.w	r3, r0, #4294967295
 8000358:	f080 810a 	bcs.w	8000570 <__udivmoddi4+0x29c>
 800035c:	42a7      	cmp	r7, r4
 800035e:	f240 8107 	bls.w	8000570 <__udivmoddi4+0x29c>
 8000362:	4464      	add	r4, ip
 8000364:	3802      	subs	r0, #2
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	1be4      	subs	r4, r4, r7
 800036c:	2600      	movs	r6, #0
 800036e:	b11d      	cbz	r5, 8000378 <__udivmoddi4+0xa4>
 8000370:	40d4      	lsrs	r4, r2
 8000372:	2300      	movs	r3, #0
 8000374:	e9c5 4300 	strd	r4, r3, [r5]
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0xc2>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80ef 	beq.w	8000566 <__udivmoddi4+0x292>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x160>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xd4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80f9 	bhi.w	800059a <__udivmoddi4+0x2c6>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0303 	sbc.w	r3, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	469e      	mov	lr, r3
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e0      	beq.n	8000378 <__udivmoddi4+0xa4>
 80003b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ba:	e7dd      	b.n	8000378 <__udivmoddi4+0xa4>
 80003bc:	b902      	cbnz	r2, 80003c0 <__udivmoddi4+0xec>
 80003be:	deff      	udf	#255	; 0xff
 80003c0:	fab2 f282 	clz	r2, r2
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	f040 8092 	bne.w	80004ee <__udivmoddi4+0x21a>
 80003ca:	eba1 010c 	sub.w	r1, r1, ip
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	2601      	movs	r6, #1
 80003d8:	0c20      	lsrs	r0, r4, #16
 80003da:	fbb1 f3f7 	udiv	r3, r1, r7
 80003de:	fb07 1113 	mls	r1, r7, r3, r1
 80003e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e6:	fb0e f003 	mul.w	r0, lr, r3
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x12c>
 80003ee:	eb1c 0101 	adds.w	r1, ip, r1
 80003f2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x12a>
 80003f8:	4288      	cmp	r0, r1
 80003fa:	f200 80cb 	bhi.w	8000594 <__udivmoddi4+0x2c0>
 80003fe:	4643      	mov	r3, r8
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f7 	udiv	r0, r1, r7
 8000408:	fb07 1110 	mls	r1, r7, r0, r1
 800040c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000410:	fb0e fe00 	mul.w	lr, lr, r0
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x156>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x154>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f200 80bb 	bhi.w	800059e <__udivmoddi4+0x2ca>
 8000428:	4608      	mov	r0, r1
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000432:	e79c      	b.n	800036e <__udivmoddi4+0x9a>
 8000434:	f1c6 0720 	rsb	r7, r6, #32
 8000438:	40b3      	lsls	r3, r6
 800043a:	fa22 fc07 	lsr.w	ip, r2, r7
 800043e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000442:	fa20 f407 	lsr.w	r4, r0, r7
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	431c      	orrs	r4, r3
 800044c:	40f9      	lsrs	r1, r7
 800044e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000452:	fa00 f306 	lsl.w	r3, r0, r6
 8000456:	fbb1 f8f9 	udiv	r8, r1, r9
 800045a:	0c20      	lsrs	r0, r4, #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fb09 1118 	mls	r1, r9, r8, r1
 8000464:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000468:	fb08 f00e 	mul.w	r0, r8, lr
 800046c:	4288      	cmp	r0, r1
 800046e:	fa02 f206 	lsl.w	r2, r2, r6
 8000472:	d90b      	bls.n	800048c <__udivmoddi4+0x1b8>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f108 3aff 	add.w	sl, r8, #4294967295
 800047c:	f080 8088 	bcs.w	8000590 <__udivmoddi4+0x2bc>
 8000480:	4288      	cmp	r0, r1
 8000482:	f240 8085 	bls.w	8000590 <__udivmoddi4+0x2bc>
 8000486:	f1a8 0802 	sub.w	r8, r8, #2
 800048a:	4461      	add	r1, ip
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f9 	udiv	r0, r1, r9
 8000494:	fb09 1110 	mls	r1, r9, r0, r1
 8000498:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800049c:	fb00 fe0e 	mul.w	lr, r0, lr
 80004a0:	458e      	cmp	lr, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x1e2>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ac:	d26c      	bcs.n	8000588 <__udivmoddi4+0x2b4>
 80004ae:	458e      	cmp	lr, r1
 80004b0:	d96a      	bls.n	8000588 <__udivmoddi4+0x2b4>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ba:	fba0 9402 	umull	r9, r4, r0, r2
 80004be:	eba1 010e 	sub.w	r1, r1, lr
 80004c2:	42a1      	cmp	r1, r4
 80004c4:	46c8      	mov	r8, r9
 80004c6:	46a6      	mov	lr, r4
 80004c8:	d356      	bcc.n	8000578 <__udivmoddi4+0x2a4>
 80004ca:	d053      	beq.n	8000574 <__udivmoddi4+0x2a0>
 80004cc:	b15d      	cbz	r5, 80004e6 <__udivmoddi4+0x212>
 80004ce:	ebb3 0208 	subs.w	r2, r3, r8
 80004d2:	eb61 010e 	sbc.w	r1, r1, lr
 80004d6:	fa01 f707 	lsl.w	r7, r1, r7
 80004da:	fa22 f306 	lsr.w	r3, r2, r6
 80004de:	40f1      	lsrs	r1, r6
 80004e0:	431f      	orrs	r7, r3
 80004e2:	e9c5 7100 	strd	r7, r1, [r5]
 80004e6:	2600      	movs	r6, #0
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	40d8      	lsrs	r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa21 f303 	lsr.w	r3, r1, r3
 80004fc:	4091      	lsls	r1, r2
 80004fe:	4301      	orrs	r1, r0
 8000500:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000504:	fa1f fe8c 	uxth.w	lr, ip
 8000508:	fbb3 f0f7 	udiv	r0, r3, r7
 800050c:	fb07 3610 	mls	r6, r7, r0, r3
 8000510:	0c0b      	lsrs	r3, r1, #16
 8000512:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000516:	fb00 f60e 	mul.w	r6, r0, lr
 800051a:	429e      	cmp	r6, r3
 800051c:	fa04 f402 	lsl.w	r4, r4, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x260>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295
 800052a:	d22f      	bcs.n	800058c <__udivmoddi4+0x2b8>
 800052c:	429e      	cmp	r6, r3
 800052e:	d92d      	bls.n	800058c <__udivmoddi4+0x2b8>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1b9b      	subs	r3, r3, r6
 8000536:	b289      	uxth	r1, r1
 8000538:	fbb3 f6f7 	udiv	r6, r3, r7
 800053c:	fb07 3316 	mls	r3, r7, r6, r3
 8000540:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000544:	fb06 f30e 	mul.w	r3, r6, lr
 8000548:	428b      	cmp	r3, r1
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x28a>
 800054c:	eb1c 0101 	adds.w	r1, ip, r1
 8000550:	f106 38ff 	add.w	r8, r6, #4294967295
 8000554:	d216      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000556:	428b      	cmp	r3, r1
 8000558:	d914      	bls.n	8000584 <__udivmoddi4+0x2b0>
 800055a:	3e02      	subs	r6, #2
 800055c:	4461      	add	r1, ip
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000564:	e738      	b.n	80003d8 <__udivmoddi4+0x104>
 8000566:	462e      	mov	r6, r5
 8000568:	4628      	mov	r0, r5
 800056a:	e705      	b.n	8000378 <__udivmoddi4+0xa4>
 800056c:	4606      	mov	r6, r0
 800056e:	e6e3      	b.n	8000338 <__udivmoddi4+0x64>
 8000570:	4618      	mov	r0, r3
 8000572:	e6f8      	b.n	8000366 <__udivmoddi4+0x92>
 8000574:	454b      	cmp	r3, r9
 8000576:	d2a9      	bcs.n	80004cc <__udivmoddi4+0x1f8>
 8000578:	ebb9 0802 	subs.w	r8, r9, r2
 800057c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000580:	3801      	subs	r0, #1
 8000582:	e7a3      	b.n	80004cc <__udivmoddi4+0x1f8>
 8000584:	4646      	mov	r6, r8
 8000586:	e7ea      	b.n	800055e <__udivmoddi4+0x28a>
 8000588:	4620      	mov	r0, r4
 800058a:	e794      	b.n	80004b6 <__udivmoddi4+0x1e2>
 800058c:	4640      	mov	r0, r8
 800058e:	e7d1      	b.n	8000534 <__udivmoddi4+0x260>
 8000590:	46d0      	mov	r8, sl
 8000592:	e77b      	b.n	800048c <__udivmoddi4+0x1b8>
 8000594:	3b02      	subs	r3, #2
 8000596:	4461      	add	r1, ip
 8000598:	e732      	b.n	8000400 <__udivmoddi4+0x12c>
 800059a:	4630      	mov	r0, r6
 800059c:	e709      	b.n	80003b2 <__udivmoddi4+0xde>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	e742      	b.n	800042a <__udivmoddi4+0x156>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fb8b 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f883 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8ef 	bl	8000798 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

	/*Enable CYCLE COUNT REG OF CPU*/

	DWT_CTRL |=1 ;
 80005ba:	4b33      	ldr	r3, [pc, #204]	; (8000688 <main+0xe0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a32      	ldr	r2, [pc, #200]	; (8000688 <main+0xe0>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6013      	str	r3, [r2, #0]


	/*For SEGGER SYSVIEW TRACE*/

	SEGGER_UART_init(250000);
 80005c6:	4831      	ldr	r0, [pc, #196]	; (800068c <main+0xe4>)
 80005c8:	f004 fed4 	bl	8005374 <SEGGER_UART_init>

	/*CONFIG SYSVIEW */
	SEGGER_SYSVIEW_Conf();
 80005cc:	f004 fc40 	bl	8004e50 <SEGGER_SYSVIEW_Conf>
	//SEGGER_SYSVIEW_Start();

	Local_Statue= xTaskCreate(Task1Handler, "Task-1", 200, NULL, 2, &Task1Handle);
 80005d0:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <main+0xe8>)
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2302      	movs	r3, #2
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	22c8      	movs	r2, #200	; 0xc8
 80005dc:	492d      	ldr	r1, [pc, #180]	; (8000694 <main+0xec>)
 80005de:	482e      	ldr	r0, [pc, #184]	; (8000698 <main+0xf0>)
 80005e0:	f002 fb1a 	bl	8002c18 <xTaskCreate>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a2d      	ldr	r2, [pc, #180]	; (800069c <main+0xf4>)
 80005e8:	6013      	str	r3, [r2, #0]

	configASSERT(Local_Statue == pdPASS);
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <main+0xf4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d00a      	beq.n	8000608 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f6:	f383 8811 	msr	BASEPRI, r3
 80005fa:	f3bf 8f6f 	isb	sy
 80005fe:	f3bf 8f4f 	dsb	sy
 8000602:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000604:	bf00      	nop
 8000606:	e7fe      	b.n	8000606 <main+0x5e>

	Local_Statue= xTaskCreate(Task2Handler, "Task-2", 200, NULL, 2, &Task2Handle);
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <main+0xf8>)
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2302      	movs	r3, #2
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	22c8      	movs	r2, #200	; 0xc8
 8000614:	4923      	ldr	r1, [pc, #140]	; (80006a4 <main+0xfc>)
 8000616:	4824      	ldr	r0, [pc, #144]	; (80006a8 <main+0x100>)
 8000618:	f002 fafe 	bl	8002c18 <xTaskCreate>
 800061c:	4603      	mov	r3, r0
 800061e:	4a1f      	ldr	r2, [pc, #124]	; (800069c <main+0xf4>)
 8000620:	6013      	str	r3, [r2, #0]

	configASSERT(Local_Statue == pdPASS);
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <main+0xf4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d00a      	beq.n	8000640 <main+0x98>
        __asm volatile
 800062a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800062e:	f383 8811 	msr	BASEPRI, r3
 8000632:	f3bf 8f6f 	isb	sy
 8000636:	f3bf 8f4f 	dsb	sy
 800063a:	60bb      	str	r3, [r7, #8]
    }
 800063c:	bf00      	nop
 800063e:	e7fe      	b.n	800063e <main+0x96>

	Local_Statue= xTaskCreate(Task3Handler, "Task-3", 200, NULL, 2, &Task3Handle);
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <main+0x104>)
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	2302      	movs	r3, #2
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2300      	movs	r3, #0
 800064a:	22c8      	movs	r2, #200	; 0xc8
 800064c:	4918      	ldr	r1, [pc, #96]	; (80006b0 <main+0x108>)
 800064e:	4819      	ldr	r0, [pc, #100]	; (80006b4 <main+0x10c>)
 8000650:	f002 fae2 	bl	8002c18 <xTaskCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a11      	ldr	r2, [pc, #68]	; (800069c <main+0xf4>)
 8000658:	6013      	str	r3, [r2, #0]

	configASSERT(Local_Statue == pdPASS);
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <main+0xf4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d00a      	beq.n	8000678 <main+0xd0>
        __asm volatile
 8000662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000666:	f383 8811 	msr	BASEPRI, r3
 800066a:	f3bf 8f6f 	isb	sy
 800066e:	f3bf 8f4f 	dsb	sy
 8000672:	607b      	str	r3, [r7, #4]
    }
 8000674:	bf00      	nop
 8000676:	e7fe      	b.n	8000676 <main+0xce>

	NextTaskHandle = Task1Handle ;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <main+0xe8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <main+0x110>)
 800067e:	6013      	str	r3, [r2, #0]

	vTaskStartScheduler();
 8000680:	f002 fd00 	bl	8003084 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000684:	e7fe      	b.n	8000684 <main+0xdc>
 8000686:	bf00      	nop
 8000688:	e0001000 	.word	0xe0001000
 800068c:	0003d090 	.word	0x0003d090
 8000690:	20000038 	.word	0x20000038
 8000694:	08007a68 	.word	0x08007a68
 8000698:	080008d1 	.word	0x080008d1
 800069c:	20000048 	.word	0x20000048
 80006a0:	2000003c 	.word	0x2000003c
 80006a4:	08007a70 	.word	0x08007a70
 80006a8:	0800094d 	.word	0x0800094d
 80006ac:	20000040 	.word	0x20000040
 80006b0:	08007a78 	.word	0x08007a78
 80006b4:	080009c5 	.word	0x080009c5
 80006b8:	20000044 	.word	0x20000044

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2234      	movs	r2, #52	; 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f007 f9b8 	bl	8007a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <SystemClock_Config+0xd4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a29      	ldr	r2, [pc, #164]	; (8000790 <SystemClock_Config+0xd4>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <SystemClock_Config+0xd4>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006fc:	2300      	movs	r3, #0
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <SystemClock_Config+0xd8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000708:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemClock_Config+0xd8>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemClock_Config+0xd8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000734:	2354      	movs	r3, #84	; 0x54
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f935 	bl	80019b8 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000754:	f000 f9a8 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	2102      	movs	r1, #2
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fdb6 	bl	80012e8 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000782:	f000 f991 	bl	8000aa8 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b44      	ldr	r3, [pc, #272]	; (80008c4 <MX_GPIO_Init+0x12c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a43      	ldr	r2, [pc, #268]	; (80008c4 <MX_GPIO_Init+0x12c>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b41      	ldr	r3, [pc, #260]	; (80008c4 <MX_GPIO_Init+0x12c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b3d      	ldr	r3, [pc, #244]	; (80008c4 <MX_GPIO_Init+0x12c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a3c      	ldr	r2, [pc, #240]	; (80008c4 <MX_GPIO_Init+0x12c>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b3a      	ldr	r3, [pc, #232]	; (80008c4 <MX_GPIO_Init+0x12c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b36      	ldr	r3, [pc, #216]	; (80008c4 <MX_GPIO_Init+0x12c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a35      	ldr	r2, [pc, #212]	; (80008c4 <MX_GPIO_Init+0x12c>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b33      	ldr	r3, [pc, #204]	; (80008c4 <MX_GPIO_Init+0x12c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b2f      	ldr	r3, [pc, #188]	; (80008c4 <MX_GPIO_Init+0x12c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a2e      	ldr	r2, [pc, #184]	; (80008c4 <MX_GPIO_Init+0x12c>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <MX_GPIO_Init+0x12c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2120      	movs	r1, #32
 8000822:	4829      	ldr	r0, [pc, #164]	; (80008c8 <MX_GPIO_Init+0x130>)
 8000824:	f000 fd08 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800082e:	4827      	ldr	r0, [pc, #156]	; (80008cc <MX_GPIO_Init+0x134>)
 8000830:	f000 fd02 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800083a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	4820      	ldr	r0, [pc, #128]	; (80008cc <MX_GPIO_Init+0x134>)
 800084c:	f000 fb60 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000850:	230c      	movs	r3, #12
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000860:	2307      	movs	r3, #7
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4817      	ldr	r0, [pc, #92]	; (80008c8 <MX_GPIO_Init+0x130>)
 800086c:	f000 fb50 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000870:	2320      	movs	r3, #32
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4810      	ldr	r0, [pc, #64]	; (80008c8 <MX_GPIO_Init+0x130>)
 8000888:	f000 fb42 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 800088c:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <MX_GPIO_Init+0x134>)
 80008a6:	f000 fb33 	bl	8000f10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2106      	movs	r1, #6
 80008ae:	2028      	movs	r0, #40	; 0x28
 80008b0:	f000 fb04 	bl	8000ebc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b4:	2028      	movs	r0, #40	; 0x28
 80008b6:	f000 fb1d 	bl	8000ef4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	; 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40020800 	.word	0x40020800

080008d0 <Task1Handler>:

/* USER CODE BEGIN 4 */
void Task1Handler(void* parameters)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	6078      	str	r0, [r7, #4]
	{
		//		snprintf(FSting , 100 , "%s\n",(char*)parameters);
		//		SEGGER_SYSVIEW_PrintfTarget(FSting);
		//		taskYIELD();

		SEGGER_SYSVIEW_PrintfTarget("Toggling Pin 8");
 80008d8:	4817      	ldr	r0, [pc, #92]	; (8000938 <Task1Handler+0x68>)
 80008da:	f006 ffd1 	bl	8007880 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 80008de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e2:	4816      	ldr	r0, [pc, #88]	; (800093c <Task1Handler+0x6c>)
 80008e4:	f000 fcc1 	bl	800126a <HAL_GPIO_TogglePin>

		/*Delay For 1000ms*/
		//HAL_Delay(1000);
		//vTaskDelay(pdMS_TO_TICKS(1000));

		if ( LocalNotificationStatus = xTaskNotifyWait(0,0,NULL , (pdMS_TO_TICKS(1000))) == pdTRUE )
 80008e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2300      	movs	r3, #0
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	2000      	movs	r0, #0
 80008f6:	f003 f97f 	bl	8003bf8 <xTaskGenericNotifyWait>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	bf0c      	ite	eq
 8000900:	2301      	moveq	r3, #1
 8000902:	2300      	movne	r3, #0
 8000904:	b2db      	uxtb	r3, r3
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0e4      	beq.n	80008d8 <Task1Handler+0x8>
			/*Enter Now I have Notification*/

			/*Change NextTaskHandle*/

			/*Disable Critical */
			portENTER_CRITICAL();
 800090e:	f003 ff9b 	bl	8004848 <vPortEnterCritical>

			NextTaskHandle = Task2Handle ;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <Task1Handler+0x70>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <Task1Handler+0x74>)
 8000918:	6013      	str	r3, [r2, #0]

			portEXIT_CRITICAL();
 800091a:	f003 ffc5 	bl	80048a8 <vPortExitCritical>

			SEGGER_SYSVIEW_PrintfTarget("Delete Pin 1 Task1 Delete");
 800091e:	480a      	ldr	r0, [pc, #40]	; (8000948 <Task1Handler+0x78>)
 8000920:	f006 ffae 	bl	8007880 <SEGGER_SYSVIEW_PrintfTarget>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2120      	movs	r1, #32
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <Task1Handler+0x6c>)
 800092a:	f000 fc85 	bl	8001238 <HAL_GPIO_WritePin>

			vTaskDelete(NULL);
 800092e:	2000      	movs	r0, #0
 8000930:	f002 fafa 	bl	8002f28 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Pin 8");
 8000934:	e7d0      	b.n	80008d8 <Task1Handler+0x8>
 8000936:	bf00      	nop
 8000938:	08007a80 	.word	0x08007a80
 800093c:	40020800 	.word	0x40020800
 8000940:	2000003c 	.word	0x2000003c
 8000944:	20000044 	.word	0x20000044
 8000948:	08007a90 	.word	0x08007a90

0800094c <Task2Handler>:
		}
	}

}
void Task2Handler(void* parameters)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af02      	add	r7, sp, #8
 8000952:	6078      	str	r0, [r7, #4]

//	TickType_t xLastWakeTime = xTaskGetTickCount();
	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling Pin 6");
 8000954:	4816      	ldr	r0, [pc, #88]	; (80009b0 <Task2Handler+0x64>)
 8000956:	f006 ff93 	bl	8007880 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800095a:	2140      	movs	r1, #64	; 0x40
 800095c:	4815      	ldr	r0, [pc, #84]	; (80009b4 <Task2Handler+0x68>)
 800095e:	f000 fc84 	bl	800126a <HAL_GPIO_TogglePin>

		/*Delay For 1000ms*/
		//HAL_Delay(1000);
		//vTaskDelay(pdMS_TO_TICKS(1000));

		if ( LocalNotificationStatus = xTaskNotifyWait(0,0,NULL , (pdMS_TO_TICKS(800))) == pdTRUE )
 8000962:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2300      	movs	r3, #0
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2000      	movs	r0, #0
 8000970:	f003 f942 	bl	8003bf8 <xTaskGenericNotifyWait>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	bf0c      	ite	eq
 800097a:	2301      	moveq	r3, #1
 800097c:	2300      	movne	r3, #0
 800097e:	b2db      	uxtb	r3, r3
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0e5      	beq.n	8000954 <Task2Handler+0x8>
			/*Enter Now I have Notification*/

			/*Change NextTaskHandle*/

			/*Disable Critical */
			portENTER_CRITICAL();
 8000988:	f003 ff5e 	bl	8004848 <vPortEnterCritical>

			NextTaskHandle = Task3Handle ;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <Task2Handler+0x6c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <Task2Handler+0x70>)
 8000992:	6013      	str	r3, [r2, #0]

			portEXIT_CRITICAL();
 8000994:	f003 ff88 	bl	80048a8 <vPortExitCritical>

			SEGGER_SYSVIEW_PrintfTarget("Delete Pin 2 Task2 Delete");
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <Task2Handler+0x74>)
 800099a:	f006 ff71 	bl	8007880 <SEGGER_SYSVIEW_PrintfTarget>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2140      	movs	r1, #64	; 0x40
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <Task2Handler+0x68>)
 80009a4:	f000 fc48 	bl	8001238 <HAL_GPIO_WritePin>

			vTaskDelete(NULL);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f002 fabd 	bl	8002f28 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Pin 6");
 80009ae:	e7d1      	b.n	8000954 <Task2Handler+0x8>
 80009b0:	08007aac 	.word	0x08007aac
 80009b4:	40020800 	.word	0x40020800
 80009b8:	20000040 	.word	0x20000040
 80009bc:	20000044 	.word	0x20000044
 80009c0:	08007abc 	.word	0x08007abc

080009c4 <Task3Handler>:

	}

}
void Task3Handler(void* parameters)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	6078      	str	r0, [r7, #4]
	BaseType_t LocalNotificationStatus ;

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling Pin 8");
 80009cc:	4815      	ldr	r0, [pc, #84]	; (8000a24 <Task3Handler+0x60>)
 80009ce:	f006 ff57 	bl	8007880 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 80009d2:	2120      	movs	r1, #32
 80009d4:	4814      	ldr	r0, [pc, #80]	; (8000a28 <Task3Handler+0x64>)
 80009d6:	f000 fc48 	bl	800126a <HAL_GPIO_TogglePin>

		/*Delay For 1000ms*/
		//HAL_Delay(1000);
		//vTaskDelay(pdMS_TO_TICKS(1000));

		if ( LocalNotificationStatus = xTaskNotifyWait(0,0,NULL , (pdMS_TO_TICKS(250))) == pdTRUE )
 80009da:	23fa      	movs	r3, #250	; 0xfa
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2300      	movs	r3, #0
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	2000      	movs	r0, #0
 80009e6:	f003 f907 	bl	8003bf8 <xTaskGenericNotifyWait>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	bf0c      	ite	eq
 80009f0:	2301      	moveq	r3, #1
 80009f2:	2300      	movne	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d0e6      	beq.n	80009cc <Task3Handler+0x8>
			/*Enter Now I have Notification*/

			/*Change NextTaskHandle*/

			/*Disable Critical */
			portENTER_CRITICAL();
 80009fe:	f003 ff23 	bl	8004848 <vPortEnterCritical>

			NextTaskHandle = NULL ;
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <Task3Handler+0x68>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]

			portEXIT_CRITICAL();
 8000a08:	f003 ff4e 	bl	80048a8 <vPortExitCritical>

			SEGGER_SYSVIEW_PrintfTarget("Delete Pin 3 Task3 Delete");
 8000a0c:	4808      	ldr	r0, [pc, #32]	; (8000a30 <Task3Handler+0x6c>)
 8000a0e:	f006 ff37 	bl	8007880 <SEGGER_SYSVIEW_PrintfTarget>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2120      	movs	r1, #32
 8000a16:	4804      	ldr	r0, [pc, #16]	; (8000a28 <Task3Handler+0x64>)
 8000a18:	f000 fc0e 	bl	8001238 <HAL_GPIO_WritePin>

			vTaskDelete(NULL);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f002 fa83 	bl	8002f28 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Pin 8");
 8000a22:	e7d3      	b.n	80009cc <Task3Handler+0x8>
 8000a24:	08007a80 	.word	0x08007a80
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	20000044 	.word	0x20000044
 8000a30:	08007ad8 	.word	0x08007ad8

08000a34 <ButtonTaskHandler>:
	}

}

void ButtonTaskHandler(void* parameters)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]

		//SEGGER_SYSVIEW_PrintfTarget("Button Task");

		BaseType_t HigherPriorityTaskWoken ;

		traceISR_ENTER();
 8000a3c:	f006 fcce 	bl	80073dc <SEGGER_SYSVIEW_RecordEnterISR>

		xTaskNotifyFromISR(NextTaskHandle , 0 , eNoAction , &HigherPriorityTaskWoken);
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <ButtonTaskHandler+0x48>)
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	9301      	str	r3, [sp, #4]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	f003 f958 	bl	8003d08 <xTaskGenericNotifyFromISR>

		portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d007      	beq.n	8000a6e <ButtonTaskHandler+0x3a>
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <ButtonTaskHandler+0x4c>)
 8000a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	f3bf 8f4f 	dsb	sy
 8000a6a:	f3bf 8f6f 	isb	sy

		traceISR_EXIT();
 8000a6e:	f006 fcf7 	bl	8007460 <SEGGER_SYSVIEW_RecordExitISR>

}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000044 	.word	0x20000044
 8000a80:	e000ed04 	.word	0xe000ed04

08000a84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d101      	bne.n	8000a9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a96:	f000 f939 	bl	8000d0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40001000 	.word	0x40001000

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	4b33      	ldr	r3, [pc, #204]	; (8000be8 <HAL_InitTick+0xe4>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a32      	ldr	r2, [pc, #200]	; (8000be8 <HAL_InitTick+0xe4>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6413      	str	r3, [r2, #64]	; 0x40
 8000b24:	4b30      	ldr	r3, [pc, #192]	; (8000be8 <HAL_InitTick+0xe4>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b30:	f107 0210 	add.w	r2, r7, #16
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fcda 	bl	80014f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b40:	6a3b      	ldr	r3, [r7, #32]
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d103      	bne.n	8000b52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b4a:	f000 fcbf 	bl	80014cc <HAL_RCC_GetPCLK1Freq>
 8000b4e:	6378      	str	r0, [r7, #52]	; 0x34
 8000b50:	e004      	b.n	8000b5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b52:	f000 fcbb 	bl	80014cc <HAL_RCC_GetPCLK1Freq>
 8000b56:	4603      	mov	r3, r0
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b5e:	4a23      	ldr	r2, [pc, #140]	; (8000bec <HAL_InitTick+0xe8>)
 8000b60:	fba2 2303 	umull	r2, r3, r2, r3
 8000b64:	0c9b      	lsrs	r3, r3, #18
 8000b66:	3b01      	subs	r3, #1
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <HAL_InitTick+0xec>)
 8000b6c:	4a21      	ldr	r2, [pc, #132]	; (8000bf4 <HAL_InitTick+0xf0>)
 8000b6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <HAL_InitTick+0xec>)
 8000b72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b76:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b78:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <HAL_InitTick+0xec>)
 8000b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <HAL_InitTick+0xec>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <HAL_InitTick+0xec>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <HAL_InitTick+0xec>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b90:	4817      	ldr	r0, [pc, #92]	; (8000bf0 <HAL_InitTick+0xec>)
 8000b92:	f001 f9af 	bl	8001ef4 <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d11b      	bne.n	8000bdc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ba4:	4812      	ldr	r0, [pc, #72]	; (8000bf0 <HAL_InitTick+0xec>)
 8000ba6:	f001 f9ff 	bl	8001fa8 <HAL_TIM_Base_Start_IT>
 8000baa:	4603      	mov	r3, r0
 8000bac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d111      	bne.n	8000bdc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bb8:	2036      	movs	r0, #54	; 0x36
 8000bba:	f000 f99b 	bl	8000ef4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d808      	bhi.n	8000bd6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	2036      	movs	r0, #54	; 0x36
 8000bca:	f000 f977 	bl	8000ebc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_InitTick+0xf4>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	e002      	b.n	8000bdc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3738      	adds	r7, #56	; 0x38
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	431bde83 	.word	0x431bde83
 8000bf0:	2000004c 	.word	0x2000004c
 8000bf4:	40001000 	.word	0x40001000
 8000bf8:	20000004 	.word	0x20000004

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	ButtonTaskHandler();
 8000c2c:	f7ff ff02 	bl	8000a34 <ButtonTaskHandler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c34:	f000 fb34 	bl	80012a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <TIM6_DAC_IRQHandler+0x10>)
 8000c42:	f001 fa21 	bl	8002088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000004c 	.word	0x2000004c

08000c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c7a:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c90:	4c0b      	ldr	r4, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c9e:	f7ff ffd7 	bl	8000c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f006 fe8b 	bl	80079bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fc7f 	bl	80005a8 <main>
  bx  lr    
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000cb8:	08007c34 	.word	0x08007c34
  ldr r2, =_sbss
 8000cbc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000cc0:	200144bc 	.word	0x200144bc

08000cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <HAL_Init+0x40>)
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_Init+0x40>)
 8000cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <HAL_Init+0x40>)
 8000cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f8d8 	bl	8000ea6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	200f      	movs	r0, #15
 8000cf8:	f7ff ff04 	bl	8000b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfc:	f7ff feda 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x20>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x24>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <HAL_IncTick+0x24>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000094 	.word	0x20000094

08000d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <HAL_GetTick+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000094 	.word	0x20000094

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db0b      	blt.n	8000dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 021f 	and.w	r2, r3, #31
 8000dc8:	4907      	ldr	r1, [pc, #28]	; (8000de8 <__NVIC_EnableIRQ+0x38>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff4c 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ece:	f7ff ff61 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000ed2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	6978      	ldr	r0, [r7, #20]
 8000eda:	f7ff ffb1 	bl	8000e40 <NVIC_EncodePriority>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff80 	bl	8000dec <__NVIC_SetPriority>
}
 8000eec:	bf00      	nop
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff54 	bl	8000db0 <__NVIC_EnableIRQ>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e165      	b.n	80011f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 8154 	bne.w	80011f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d005      	beq.n	8000f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d130      	bne.n	8000fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	69b9      	ldr	r1, [r7, #24]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80ae 	beq.w	80011f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_GPIO_Init+0x300>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a5c      	ldr	r2, [pc, #368]	; (8001210 <HAL_GPIO_Init+0x300>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b5a      	ldr	r3, [pc, #360]	; (8001210 <HAL_GPIO_Init+0x300>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a58      	ldr	r2, [pc, #352]	; (8001214 <HAL_GPIO_Init+0x304>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4f      	ldr	r2, [pc, #316]	; (8001218 <HAL_GPIO_Init+0x308>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d025      	beq.n	800112a <HAL_GPIO_Init+0x21a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4e      	ldr	r2, [pc, #312]	; (800121c <HAL_GPIO_Init+0x30c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d01f      	beq.n	8001126 <HAL_GPIO_Init+0x216>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <HAL_GPIO_Init+0x310>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d019      	beq.n	8001122 <HAL_GPIO_Init+0x212>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	; (8001224 <HAL_GPIO_Init+0x314>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d013      	beq.n	800111e <HAL_GPIO_Init+0x20e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <HAL_GPIO_Init+0x318>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00d      	beq.n	800111a <HAL_GPIO_Init+0x20a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4a      	ldr	r2, [pc, #296]	; (800122c <HAL_GPIO_Init+0x31c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d007      	beq.n	8001116 <HAL_GPIO_Init+0x206>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a49      	ldr	r2, [pc, #292]	; (8001230 <HAL_GPIO_Init+0x320>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_GPIO_Init+0x202>
 800110e:	2306      	movs	r3, #6
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001112:	2307      	movs	r3, #7
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x21c>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x21c>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x21c>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	; (8001214 <HAL_GPIO_Init+0x304>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <HAL_GPIO_Init+0x324>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a31      	ldr	r2, [pc, #196]	; (8001234 <HAL_GPIO_Init+0x324>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <HAL_GPIO_Init+0x324>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a26      	ldr	r2, [pc, #152]	; (8001234 <HAL_GPIO_Init+0x324>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119e:	4b25      	ldr	r3, [pc, #148]	; (8001234 <HAL_GPIO_Init+0x324>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <HAL_GPIO_Init+0x324>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_GPIO_Init+0x324>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ec:	4a11      	ldr	r2, [pc, #68]	; (8001234 <HAL_GPIO_Init+0x324>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae96 	bls.w	8000f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40013c00 	.word	0x40013c00

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126a:	b480      	push	{r7}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800127c:	887a      	ldrh	r2, [r7, #2]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4013      	ands	r3, r2
 8001282:	041a      	lsls	r2, r3, #16
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43d9      	mvns	r1, r3
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	400b      	ands	r3, r1
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f806 	bl	80012d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40013c00 	.word	0x40013c00

080012d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e0cc      	b.n	8001496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012fc:	4b68      	ldr	r3, [pc, #416]	; (80014a0 <HAL_RCC_ClockConfig+0x1b8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d90c      	bls.n	8001324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130a:	4b65      	ldr	r3, [pc, #404]	; (80014a0 <HAL_RCC_ClockConfig+0x1b8>)
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001312:	4b63      	ldr	r3, [pc, #396]	; (80014a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d001      	beq.n	8001324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e0b8      	b.n	8001496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d020      	beq.n	8001372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800133c:	4b59      	ldr	r3, [pc, #356]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	4a58      	ldr	r2, [pc, #352]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001354:	4b53      	ldr	r3, [pc, #332]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	4a52      	ldr	r2, [pc, #328]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 800135a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800135e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001360:	4b50      	ldr	r3, [pc, #320]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	494d      	ldr	r1, [pc, #308]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 800136e:	4313      	orrs	r3, r2
 8001370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d044      	beq.n	8001408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d107      	bne.n	8001396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	4b47      	ldr	r3, [pc, #284]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d119      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e07f      	b.n	8001496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d003      	beq.n	80013a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d107      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a6:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d109      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e06f      	b.n	8001496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b6:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e067      	b.n	8001496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013c6:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f023 0203 	bic.w	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4934      	ldr	r1, [pc, #208]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d8:	f7ff fcac 	bl	8000d34 <HAL_GetTick>
 80013dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013de:	e00a      	b.n	80013f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e0:	f7ff fca8 	bl	8000d34 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e04f      	b.n	8001496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 020c 	and.w	r2, r3, #12
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	429a      	cmp	r2, r3
 8001406:	d1eb      	bne.n	80013e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <HAL_RCC_ClockConfig+0x1b8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 030f 	and.w	r3, r3, #15
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d20c      	bcs.n	8001430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001416:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d001      	beq.n	8001430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e032      	b.n	8001496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d008      	beq.n	800144e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	4916      	ldr	r1, [pc, #88]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	4313      	orrs	r3, r2
 800144c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	2b00      	cmp	r3, #0
 8001458:	d009      	beq.n	800146e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	490e      	ldr	r1, [pc, #56]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	4313      	orrs	r3, r2
 800146c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800146e:	f000 f873 	bl	8001558 <HAL_RCC_GetSysClockFreq>
 8001472:	4602      	mov	r2, r0
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	091b      	lsrs	r3, r3, #4
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	490a      	ldr	r1, [pc, #40]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001480:	5ccb      	ldrb	r3, [r1, r3]
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_RCC_ClockConfig+0x1c8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fb38 	bl	8000b04 <HAL_InitTick>

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023c00 	.word	0x40023c00
 80014a4:	40023800 	.word	0x40023800
 80014a8:	08007bd0 	.word	0x08007bd0
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000000 	.word	0x20000000

080014cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014d0:	f7ff fff0 	bl	80014b4 <HAL_RCC_GetHCLKFreq>
 80014d4:	4602      	mov	r2, r0
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	0a9b      	lsrs	r3, r3, #10
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	4903      	ldr	r1, [pc, #12]	; (80014f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014e2:	5ccb      	ldrb	r3, [r1, r3]
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	08007be0 	.word	0x08007be0

080014f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	220f      	movs	r2, #15
 8001502:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_RCC_GetClockConfig+0x5c>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0203 	and.w	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_RCC_GetClockConfig+0x5c>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_RCC_GetClockConfig+0x5c>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_RCC_GetClockConfig+0x5c>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	08db      	lsrs	r3, r3, #3
 800152e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_RCC_GetClockConfig+0x60>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 020f 	and.w	r2, r3, #15
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	601a      	str	r2, [r3, #0]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	40023c00 	.word	0x40023c00

08001558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800155c:	b0ae      	sub	sp, #184	; 0xb8
 800155e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800157e:	4bcb      	ldr	r3, [pc, #812]	; (80018ac <HAL_RCC_GetSysClockFreq+0x354>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b0c      	cmp	r3, #12
 8001588:	f200 8206 	bhi.w	8001998 <HAL_RCC_GetSysClockFreq+0x440>
 800158c:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <HAL_RCC_GetSysClockFreq+0x3c>)
 800158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001592:	bf00      	nop
 8001594:	080015c9 	.word	0x080015c9
 8001598:	08001999 	.word	0x08001999
 800159c:	08001999 	.word	0x08001999
 80015a0:	08001999 	.word	0x08001999
 80015a4:	080015d1 	.word	0x080015d1
 80015a8:	08001999 	.word	0x08001999
 80015ac:	08001999 	.word	0x08001999
 80015b0:	08001999 	.word	0x08001999
 80015b4:	080015d9 	.word	0x080015d9
 80015b8:	08001999 	.word	0x08001999
 80015bc:	08001999 	.word	0x08001999
 80015c0:	08001999 	.word	0x08001999
 80015c4:	080017c9 	.word	0x080017c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015c8:	4bb9      	ldr	r3, [pc, #740]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x358>)
 80015ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80015ce:	e1e7      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015d0:	4bb8      	ldr	r3, [pc, #736]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80015d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015d6:	e1e3      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015d8:	4bb4      	ldr	r3, [pc, #720]	; (80018ac <HAL_RCC_GetSysClockFreq+0x354>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015e4:	4bb1      	ldr	r3, [pc, #708]	; (80018ac <HAL_RCC_GetSysClockFreq+0x354>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d071      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f0:	4bae      	ldr	r3, [pc, #696]	; (80018ac <HAL_RCC_GetSysClockFreq+0x354>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	099b      	lsrs	r3, r3, #6
 80015f6:	2200      	movs	r2, #0
 80015f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80015fc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001608:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001616:	4622      	mov	r2, r4
 8001618:	462b      	mov	r3, r5
 800161a:	f04f 0000 	mov.w	r0, #0
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	0159      	lsls	r1, r3, #5
 8001624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001628:	0150      	lsls	r0, r2, #5
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4621      	mov	r1, r4
 8001630:	1a51      	subs	r1, r2, r1
 8001632:	6439      	str	r1, [r7, #64]	; 0x40
 8001634:	4629      	mov	r1, r5
 8001636:	eb63 0301 	sbc.w	r3, r3, r1
 800163a:	647b      	str	r3, [r7, #68]	; 0x44
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001648:	4649      	mov	r1, r9
 800164a:	018b      	lsls	r3, r1, #6
 800164c:	4641      	mov	r1, r8
 800164e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001652:	4641      	mov	r1, r8
 8001654:	018a      	lsls	r2, r1, #6
 8001656:	4641      	mov	r1, r8
 8001658:	1a51      	subs	r1, r2, r1
 800165a:	63b9      	str	r1, [r7, #56]	; 0x38
 800165c:	4649      	mov	r1, r9
 800165e:	eb63 0301 	sbc.w	r3, r3, r1
 8001662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001670:	4649      	mov	r1, r9
 8001672:	00cb      	lsls	r3, r1, #3
 8001674:	4641      	mov	r1, r8
 8001676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800167a:	4641      	mov	r1, r8
 800167c:	00ca      	lsls	r2, r1, #3
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	4603      	mov	r3, r0
 8001684:	4622      	mov	r2, r4
 8001686:	189b      	adds	r3, r3, r2
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
 800168a:	462b      	mov	r3, r5
 800168c:	460a      	mov	r2, r1
 800168e:	eb42 0303 	adc.w	r3, r2, r3
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016a0:	4629      	mov	r1, r5
 80016a2:	024b      	lsls	r3, r1, #9
 80016a4:	4621      	mov	r1, r4
 80016a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016aa:	4621      	mov	r1, r4
 80016ac:	024a      	lsls	r2, r1, #9
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016b6:	2200      	movs	r2, #0
 80016b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80016c4:	f7fe fdee 	bl	80002a4 <__aeabi_uldivmod>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4613      	mov	r3, r2
 80016ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016d2:	e067      	b.n	80017a4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d4:	4b75      	ldr	r3, [pc, #468]	; (80018ac <HAL_RCC_GetSysClockFreq+0x354>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	099b      	lsrs	r3, r3, #6
 80016da:	2200      	movs	r2, #0
 80016dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016e0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80016e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80016ee:	2300      	movs	r3, #0
 80016f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80016f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80016f6:	4622      	mov	r2, r4
 80016f8:	462b      	mov	r3, r5
 80016fa:	f04f 0000 	mov.w	r0, #0
 80016fe:	f04f 0100 	mov.w	r1, #0
 8001702:	0159      	lsls	r1, r3, #5
 8001704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001708:	0150      	lsls	r0, r2, #5
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4621      	mov	r1, r4
 8001710:	1a51      	subs	r1, r2, r1
 8001712:	62b9      	str	r1, [r7, #40]	; 0x28
 8001714:	4629      	mov	r1, r5
 8001716:	eb63 0301 	sbc.w	r3, r3, r1
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001728:	4649      	mov	r1, r9
 800172a:	018b      	lsls	r3, r1, #6
 800172c:	4641      	mov	r1, r8
 800172e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001732:	4641      	mov	r1, r8
 8001734:	018a      	lsls	r2, r1, #6
 8001736:	4641      	mov	r1, r8
 8001738:	ebb2 0a01 	subs.w	sl, r2, r1
 800173c:	4649      	mov	r1, r9
 800173e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800174e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001752:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001756:	4692      	mov	sl, r2
 8001758:	469b      	mov	fp, r3
 800175a:	4623      	mov	r3, r4
 800175c:	eb1a 0303 	adds.w	r3, sl, r3
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	462b      	mov	r3, r5
 8001764:	eb4b 0303 	adc.w	r3, fp, r3
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001776:	4629      	mov	r1, r5
 8001778:	028b      	lsls	r3, r1, #10
 800177a:	4621      	mov	r1, r4
 800177c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001780:	4621      	mov	r1, r4
 8001782:	028a      	lsls	r2, r1, #10
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800178c:	2200      	movs	r2, #0
 800178e:	673b      	str	r3, [r7, #112]	; 0x70
 8001790:	677a      	str	r2, [r7, #116]	; 0x74
 8001792:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001796:	f7fe fd85 	bl	80002a4 <__aeabi_uldivmod>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4613      	mov	r3, r2
 80017a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_GetSysClockFreq+0x354>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	0c1b      	lsrs	r3, r3, #16
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	3301      	adds	r3, #1
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80017b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017c6:	e0eb      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c8:	4b38      	ldr	r3, [pc, #224]	; (80018ac <HAL_RCC_GetSysClockFreq+0x354>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017d4:	4b35      	ldr	r3, [pc, #212]	; (80018ac <HAL_RCC_GetSysClockFreq+0x354>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d06b      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e0:	4b32      	ldr	r3, [pc, #200]	; (80018ac <HAL_RCC_GetSysClockFreq+0x354>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	099b      	lsrs	r3, r3, #6
 80017e6:	2200      	movs	r2, #0
 80017e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80017ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80017ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017f2:	663b      	str	r3, [r7, #96]	; 0x60
 80017f4:	2300      	movs	r3, #0
 80017f6:	667b      	str	r3, [r7, #100]	; 0x64
 80017f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80017fc:	4622      	mov	r2, r4
 80017fe:	462b      	mov	r3, r5
 8001800:	f04f 0000 	mov.w	r0, #0
 8001804:	f04f 0100 	mov.w	r1, #0
 8001808:	0159      	lsls	r1, r3, #5
 800180a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800180e:	0150      	lsls	r0, r2, #5
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4621      	mov	r1, r4
 8001816:	1a51      	subs	r1, r2, r1
 8001818:	61b9      	str	r1, [r7, #24]
 800181a:	4629      	mov	r1, r5
 800181c:	eb63 0301 	sbc.w	r3, r3, r1
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800182e:	4659      	mov	r1, fp
 8001830:	018b      	lsls	r3, r1, #6
 8001832:	4651      	mov	r1, sl
 8001834:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001838:	4651      	mov	r1, sl
 800183a:	018a      	lsls	r2, r1, #6
 800183c:	4651      	mov	r1, sl
 800183e:	ebb2 0801 	subs.w	r8, r2, r1
 8001842:	4659      	mov	r1, fp
 8001844:	eb63 0901 	sbc.w	r9, r3, r1
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001854:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001858:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800185c:	4690      	mov	r8, r2
 800185e:	4699      	mov	r9, r3
 8001860:	4623      	mov	r3, r4
 8001862:	eb18 0303 	adds.w	r3, r8, r3
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	462b      	mov	r3, r5
 800186a:	eb49 0303 	adc.w	r3, r9, r3
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800187c:	4629      	mov	r1, r5
 800187e:	024b      	lsls	r3, r1, #9
 8001880:	4621      	mov	r1, r4
 8001882:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001886:	4621      	mov	r1, r4
 8001888:	024a      	lsls	r2, r1, #9
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001892:	2200      	movs	r2, #0
 8001894:	65bb      	str	r3, [r7, #88]	; 0x58
 8001896:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001898:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800189c:	f7fe fd02 	bl	80002a4 <__aeabi_uldivmod>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4613      	mov	r3, r2
 80018a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018aa:	e065      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x420>
 80018ac:	40023800 	.word	0x40023800
 80018b0:	00f42400 	.word	0x00f42400
 80018b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b8:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x458>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	099b      	lsrs	r3, r3, #6
 80018be:	2200      	movs	r2, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	4611      	mov	r1, r2
 80018c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018c8:	653b      	str	r3, [r7, #80]	; 0x50
 80018ca:	2300      	movs	r3, #0
 80018cc:	657b      	str	r3, [r7, #84]	; 0x54
 80018ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80018d2:	4642      	mov	r2, r8
 80018d4:	464b      	mov	r3, r9
 80018d6:	f04f 0000 	mov.w	r0, #0
 80018da:	f04f 0100 	mov.w	r1, #0
 80018de:	0159      	lsls	r1, r3, #5
 80018e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e4:	0150      	lsls	r0, r2, #5
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4641      	mov	r1, r8
 80018ec:	1a51      	subs	r1, r2, r1
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	4649      	mov	r1, r9
 80018f2:	eb63 0301 	sbc.w	r3, r3, r1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001904:	4659      	mov	r1, fp
 8001906:	018b      	lsls	r3, r1, #6
 8001908:	4651      	mov	r1, sl
 800190a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800190e:	4651      	mov	r1, sl
 8001910:	018a      	lsls	r2, r1, #6
 8001912:	4651      	mov	r1, sl
 8001914:	1a54      	subs	r4, r2, r1
 8001916:	4659      	mov	r1, fp
 8001918:	eb63 0501 	sbc.w	r5, r3, r1
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	00eb      	lsls	r3, r5, #3
 8001926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800192a:	00e2      	lsls	r2, r4, #3
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
 8001930:	4643      	mov	r3, r8
 8001932:	18e3      	adds	r3, r4, r3
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	464b      	mov	r3, r9
 8001938:	eb45 0303 	adc.w	r3, r5, r3
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800194a:	4629      	mov	r1, r5
 800194c:	028b      	lsls	r3, r1, #10
 800194e:	4621      	mov	r1, r4
 8001950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001954:	4621      	mov	r1, r4
 8001956:	028a      	lsls	r2, r1, #10
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001960:	2200      	movs	r2, #0
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
 8001964:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001966:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800196a:	f7fe fc9b 	bl	80002a4 <__aeabi_uldivmod>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4613      	mov	r3, r2
 8001974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	0f1b      	lsrs	r3, r3, #28
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800198a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001996:	e003      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800199a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800199e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	37b8      	adds	r7, #184	; 0xb8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	00f42400 	.word	0x00f42400

080019b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e28d      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8083 	beq.w	8001ade <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019d8:	4b94      	ldr	r3, [pc, #592]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d019      	beq.n	8001a18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019e4:	4b91      	ldr	r3, [pc, #580]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019f0:	4b8e      	ldr	r3, [pc, #568]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019fc:	d00c      	beq.n	8001a18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019fe:	4b8b      	ldr	r3, [pc, #556]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	d112      	bne.n	8001a30 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a0a:	4b88      	ldr	r3, [pc, #544]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a16:	d10b      	bne.n	8001a30 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	4b84      	ldr	r3, [pc, #528]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d05b      	beq.n	8001adc <HAL_RCC_OscConfig+0x124>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d157      	bne.n	8001adc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e25a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a38:	d106      	bne.n	8001a48 <HAL_RCC_OscConfig+0x90>
 8001a3a:	4b7c      	ldr	r3, [pc, #496]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a7b      	ldr	r2, [pc, #492]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e01d      	b.n	8001a84 <HAL_RCC_OscConfig+0xcc>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0xb4>
 8001a52:	4b76      	ldr	r3, [pc, #472]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a75      	ldr	r2, [pc, #468]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b73      	ldr	r3, [pc, #460]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a72      	ldr	r2, [pc, #456]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_OscConfig+0xcc>
 8001a6c:	4b6f      	ldr	r3, [pc, #444]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6e      	ldr	r2, [pc, #440]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b6c      	ldr	r3, [pc, #432]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a6b      	ldr	r2, [pc, #428]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f952 	bl	8000d34 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff f94e 	bl	8000d34 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e21f      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b61      	ldr	r3, [pc, #388]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0xdc>
 8001ab2:	e014      	b.n	8001ade <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f93e 	bl	8000d34 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff f93a 	bl	8000d34 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e20b      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	4b57      	ldr	r3, [pc, #348]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x104>
 8001ada:	e000      	b.n	8001ade <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d06f      	beq.n	8001bca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001aea:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d017      	beq.n	8001b26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001af6:	4b4d      	ldr	r3, [pc, #308]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d105      	bne.n	8001b0e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b02:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d11c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b1a:	4b44      	ldr	r3, [pc, #272]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d116      	bne.n	8001b54 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	4b41      	ldr	r3, [pc, #260]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_RCC_OscConfig+0x186>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e1d3      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3e:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4937      	ldr	r1, [pc, #220]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b52:	e03a      	b.n	8001bca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5c:	4b34      	ldr	r3, [pc, #208]	; (8001c30 <HAL_RCC_OscConfig+0x278>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff f8e7 	bl	8000d34 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b6a:	f7ff f8e3 	bl	8000d34 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e1b4      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4925      	ldr	r1, [pc, #148]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]
 8001b9c:	e015      	b.n	8001bca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_RCC_OscConfig+0x278>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f8c6 	bl	8000d34 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bac:	f7ff f8c2 	bl	8000d34 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e193      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d036      	beq.n	8001c44 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d016      	beq.n	8001c0c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_RCC_OscConfig+0x27c>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff f8a6 	bl	8000d34 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bec:	f7ff f8a2 	bl	8000d34 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e173      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x234>
 8001c0a:	e01b      	b.n	8001c44 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_OscConfig+0x27c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c12:	f7ff f88f 	bl	8000d34 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	e00e      	b.n	8001c38 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1a:	f7ff f88b 	bl	8000d34 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d907      	bls.n	8001c38 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e15c      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	42470000 	.word	0x42470000
 8001c34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c38:	4b8a      	ldr	r3, [pc, #552]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1ea      	bne.n	8001c1a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 8097 	beq.w	8001d80 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c56:	4b83      	ldr	r3, [pc, #524]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10f      	bne.n	8001c82 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	4b7f      	ldr	r3, [pc, #508]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a7e      	ldr	r2, [pc, #504]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b7c      	ldr	r3, [pc, #496]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c82:	4b79      	ldr	r3, [pc, #484]	; (8001e68 <HAL_RCC_OscConfig+0x4b0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d118      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8e:	4b76      	ldr	r3, [pc, #472]	; (8001e68 <HAL_RCC_OscConfig+0x4b0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a75      	ldr	r2, [pc, #468]	; (8001e68 <HAL_RCC_OscConfig+0x4b0>)
 8001c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f84b 	bl	8000d34 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca2:	f7ff f847 	bl	8000d34 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e118      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	4b6c      	ldr	r3, [pc, #432]	; (8001e68 <HAL_RCC_OscConfig+0x4b0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d106      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x31e>
 8001cc8:	4b66      	ldr	r3, [pc, #408]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ccc:	4a65      	ldr	r2, [pc, #404]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd4:	e01c      	b.n	8001d10 <HAL_RCC_OscConfig+0x358>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x340>
 8001cde:	4b61      	ldr	r3, [pc, #388]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	4a60      	ldr	r2, [pc, #384]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cea:	4b5e      	ldr	r3, [pc, #376]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	4a5d      	ldr	r2, [pc, #372]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0x358>
 8001cf8:	4b5a      	ldr	r3, [pc, #360]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfc:	4a59      	ldr	r2, [pc, #356]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001cfe:	f023 0301 	bic.w	r3, r3, #1
 8001d02:	6713      	str	r3, [r2, #112]	; 0x70
 8001d04:	4b57      	ldr	r3, [pc, #348]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d08:	4a56      	ldr	r2, [pc, #344]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001d0a:	f023 0304 	bic.w	r3, r3, #4
 8001d0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d015      	beq.n	8001d44 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d18:	f7ff f80c 	bl	8000d34 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f7ff f808 	bl	8000d34 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e0d7      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d36:	4b4b      	ldr	r3, [pc, #300]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0ee      	beq.n	8001d20 <HAL_RCC_OscConfig+0x368>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d44:	f7fe fff6 	bl	8000d34 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4c:	f7fe fff2 	bl	8000d34 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e0c1      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d62:	4b40      	ldr	r3, [pc, #256]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1ee      	bne.n	8001d4c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d105      	bne.n	8001d80 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d74:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a3a      	ldr	r2, [pc, #232]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80ad 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d8a:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d060      	beq.n	8001e58 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d145      	bne.n	8001e2a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <HAL_RCC_OscConfig+0x4b4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7fe ffc6 	bl	8000d34 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dac:	f7fe ffc2 	bl	8000d34 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e093      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69da      	ldr	r2, [r3, #28]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	019b      	lsls	r3, r3, #6
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	3b01      	subs	r3, #1
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	071b      	lsls	r3, r3, #28
 8001df6:	491b      	ldr	r1, [pc, #108]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <HAL_RCC_OscConfig+0x4b4>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7fe ff97 	bl	8000d34 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7fe ff93 	bl	8000d34 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e064      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x452>
 8001e28:	e05c      	b.n	8001ee4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <HAL_RCC_OscConfig+0x4b4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7fe ff80 	bl	8000d34 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7fe ff7c 	bl	8000d34 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e04d      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_RCC_OscConfig+0x4ac>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x480>
 8001e56:	e045      	b.n	8001ee4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d107      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e040      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <HAL_RCC_OscConfig+0x538>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d030      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d129      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d122      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ea6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d119      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	085b      	lsrs	r3, r3, #1
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d10f      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e041      	b.n	8001f8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f839 	bl	8001f92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3304      	adds	r3, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	4610      	mov	r0, r2
 8001f34:	f000 f9d8 	bl	80022e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d001      	beq.n	8001fc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e04e      	b.n	800205e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a23      	ldr	r2, [pc, #140]	; (800206c <HAL_TIM_Base_Start_IT+0xc4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d022      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x80>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fea:	d01d      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x80>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d018      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x80>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d013      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x80>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <HAL_TIM_Base_Start_IT+0xd0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00e      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x80>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1b      	ldr	r2, [pc, #108]	; (800207c <HAL_TIM_Base_Start_IT+0xd4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d009      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x80>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a19      	ldr	r2, [pc, #100]	; (8002080 <HAL_TIM_Base_Start_IT+0xd8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d004      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x80>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a18      	ldr	r2, [pc, #96]	; (8002084 <HAL_TIM_Base_Start_IT+0xdc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d111      	bne.n	800204c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b06      	cmp	r3, #6
 8002038:	d010      	beq.n	800205c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204a:	e007      	b.n	800205c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40010000 	.word	0x40010000
 8002070:	40000400 	.word	0x40000400
 8002074:	40000800 	.word	0x40000800
 8002078:	40000c00 	.word	0x40000c00
 800207c:	40010400 	.word	0x40010400
 8002080:	40014000 	.word	0x40014000
 8002084:	40001800 	.word	0x40001800

08002088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b02      	cmp	r3, #2
 800209c:	d122      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d11b      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0202 	mvn.w	r2, #2
 80020b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f8ee 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8e0 	bl	8002298 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f8f1 	bl	80022c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d122      	bne.n	8002138 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d11b      	bne.n	8002138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0204 	mvn.w	r2, #4
 8002108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2202      	movs	r2, #2
 800210e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f8c4 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f8b6 	bl	8002298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f8c7 	bl	80022c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b08      	cmp	r3, #8
 8002144:	d122      	bne.n	800218c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b08      	cmp	r3, #8
 8002152:	d11b      	bne.n	800218c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0208 	mvn.w	r2, #8
 800215c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2204      	movs	r2, #4
 8002162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f89a 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f88c 	bl	8002298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f89d 	bl	80022c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b10      	cmp	r3, #16
 8002198:	d122      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b10      	cmp	r3, #16
 80021a6:	d11b      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0210 	mvn.w	r2, #16
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2208      	movs	r2, #8
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f870 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f862 	bl	8002298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f873 	bl	80022c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d10e      	bne.n	800220c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d107      	bne.n	800220c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0201 	mvn.w	r2, #1
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fc3c 	bl	8000a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	2b80      	cmp	r3, #128	; 0x80
 8002218:	d10e      	bne.n	8002238 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002224:	2b80      	cmp	r3, #128	; 0x80
 8002226:	d107      	bne.n	8002238 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f902 	bl	800243c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002242:	2b40      	cmp	r3, #64	; 0x40
 8002244:	d10e      	bne.n	8002264 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002250:	2b40      	cmp	r3, #64	; 0x40
 8002252:	d107      	bne.n	8002264 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800225c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f838 	bl	80022d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b20      	cmp	r3, #32
 8002270:	d10e      	bne.n	8002290 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b20      	cmp	r3, #32
 800227e:	d107      	bne.n	8002290 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0220 	mvn.w	r2, #32
 8002288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f8cc 	bl	8002428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a40      	ldr	r2, [pc, #256]	; (80023fc <TIM_Base_SetConfig+0x114>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d013      	beq.n	8002328 <TIM_Base_SetConfig+0x40>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002306:	d00f      	beq.n	8002328 <TIM_Base_SetConfig+0x40>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a3d      	ldr	r2, [pc, #244]	; (8002400 <TIM_Base_SetConfig+0x118>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d00b      	beq.n	8002328 <TIM_Base_SetConfig+0x40>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a3c      	ldr	r2, [pc, #240]	; (8002404 <TIM_Base_SetConfig+0x11c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d007      	beq.n	8002328 <TIM_Base_SetConfig+0x40>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a3b      	ldr	r2, [pc, #236]	; (8002408 <TIM_Base_SetConfig+0x120>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d003      	beq.n	8002328 <TIM_Base_SetConfig+0x40>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a3a      	ldr	r2, [pc, #232]	; (800240c <TIM_Base_SetConfig+0x124>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d108      	bne.n	800233a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a2f      	ldr	r2, [pc, #188]	; (80023fc <TIM_Base_SetConfig+0x114>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d02b      	beq.n	800239a <TIM_Base_SetConfig+0xb2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d027      	beq.n	800239a <TIM_Base_SetConfig+0xb2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a2c      	ldr	r2, [pc, #176]	; (8002400 <TIM_Base_SetConfig+0x118>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d023      	beq.n	800239a <TIM_Base_SetConfig+0xb2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a2b      	ldr	r2, [pc, #172]	; (8002404 <TIM_Base_SetConfig+0x11c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01f      	beq.n	800239a <TIM_Base_SetConfig+0xb2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a2a      	ldr	r2, [pc, #168]	; (8002408 <TIM_Base_SetConfig+0x120>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01b      	beq.n	800239a <TIM_Base_SetConfig+0xb2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a29      	ldr	r2, [pc, #164]	; (800240c <TIM_Base_SetConfig+0x124>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d017      	beq.n	800239a <TIM_Base_SetConfig+0xb2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a28      	ldr	r2, [pc, #160]	; (8002410 <TIM_Base_SetConfig+0x128>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <TIM_Base_SetConfig+0xb2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a27      	ldr	r2, [pc, #156]	; (8002414 <TIM_Base_SetConfig+0x12c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00f      	beq.n	800239a <TIM_Base_SetConfig+0xb2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a26      	ldr	r2, [pc, #152]	; (8002418 <TIM_Base_SetConfig+0x130>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00b      	beq.n	800239a <TIM_Base_SetConfig+0xb2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a25      	ldr	r2, [pc, #148]	; (800241c <TIM_Base_SetConfig+0x134>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d007      	beq.n	800239a <TIM_Base_SetConfig+0xb2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a24      	ldr	r2, [pc, #144]	; (8002420 <TIM_Base_SetConfig+0x138>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d003      	beq.n	800239a <TIM_Base_SetConfig+0xb2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a23      	ldr	r2, [pc, #140]	; (8002424 <TIM_Base_SetConfig+0x13c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d108      	bne.n	80023ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <TIM_Base_SetConfig+0x114>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d003      	beq.n	80023e0 <TIM_Base_SetConfig+0xf8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a0c      	ldr	r2, [pc, #48]	; (800240c <TIM_Base_SetConfig+0x124>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d103      	bne.n	80023e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	615a      	str	r2, [r3, #20]
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40010000 	.word	0x40010000
 8002400:	40000400 	.word	0x40000400
 8002404:	40000800 	.word	0x40000800
 8002408:	40000c00 	.word	0x40000c00
 800240c:	40010400 	.word	0x40010400
 8002410:	40014000 	.word	0x40014000
 8002414:	40014400 	.word	0x40014400
 8002418:	40014800 	.word	0x40014800
 800241c:	40001800 	.word	0x40001800
 8002420:	40001c00 	.word	0x40001c00
 8002424:	40002000 	.word	0x40002000

08002428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f103 0208 	add.w	r2, r3, #8
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f04f 32ff 	mov.w	r2, #4294967295
 8002468:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f103 0208 	add.w	r2, r3, #8
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f103 0208 	add.w	r2, r3, #8
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	601a      	str	r2, [r3, #0]
}
 80024e6:	bf00      	nop
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d103      	bne.n	8002512 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	e00c      	b.n	800252c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3308      	adds	r3, #8
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e002      	b.n	8002520 <vListInsert+0x2e>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	429a      	cmp	r2, r3
 800252a:	d2f6      	bcs.n	800251a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	601a      	str	r2, [r3, #0]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6892      	ldr	r2, [r2, #8]
 800257a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6852      	ldr	r2, [r2, #4]
 8002584:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	d103      	bne.n	8002598 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	1e5a      	subs	r2, r3, #1
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80025c2:	2301      	movs	r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <xQueueGenericReset+0x2e>
        __asm volatile
 80025d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d4:	f383 8811 	msr	BASEPRI, r3
 80025d8:	f3bf 8f6f 	isb	sy
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	60fb      	str	r3, [r7, #12]
    }
 80025e2:	bf00      	nop
 80025e4:	e7fe      	b.n	80025e4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d05d      	beq.n	80026a8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d059      	beq.n	80026a8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fc:	2100      	movs	r1, #0
 80025fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d000      	beq.n	8002608 <xQueueGenericReset+0x50>
 8002606:	2101      	movs	r1, #1
 8002608:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800260a:	2b00      	cmp	r3, #0
 800260c:	d14c      	bne.n	80026a8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800260e:	f002 f91b 	bl	8004848 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261a:	6939      	ldr	r1, [r7, #16]
 800261c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	441a      	add	r2, r3
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2200      	movs	r2, #0
 800262c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263e:	3b01      	subs	r3, #1
 8002640:	6939      	ldr	r1, [r7, #16]
 8002642:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	441a      	add	r2, r3
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	22ff      	movs	r2, #255	; 0xff
 8002652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	22ff      	movs	r2, #255	; 0xff
 800265a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d114      	bne.n	800268e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01a      	beq.n	80026a2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	3310      	adds	r3, #16
 8002670:	4618      	mov	r0, r3
 8002672:	f001 f891 	bl	8003798 <xTaskRemoveFromEventList>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d012      	beq.n	80026a2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800267c:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <xQueueGenericReset+0x11c>)
 800267e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	f3bf 8f4f 	dsb	sy
 8002688:	f3bf 8f6f 	isb	sy
 800268c:	e009      	b.n	80026a2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	3310      	adds	r3, #16
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fedc 	bl	8002450 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	3324      	adds	r3, #36	; 0x24
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fed7 	bl	8002450 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80026a2:	f002 f901 	bl	80048a8 <vPortExitCritical>
 80026a6:	e001      	b.n	80026ac <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10a      	bne.n	80026c8 <xQueueGenericReset+0x110>
        __asm volatile
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	60bb      	str	r3, [r7, #8]
    }
 80026c4:	bf00      	nop
 80026c6:	e7fe      	b.n	80026c6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80026c8:	697b      	ldr	r3, [r7, #20]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	e000ed04 	.word	0xe000ed04

080026d8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d02e      	beq.n	800274e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80026f0:	2100      	movs	r1, #0
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	fba3 2302 	umull	r2, r3, r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d000      	beq.n	8002700 <xQueueGenericCreate+0x28>
 80026fe:	2101      	movs	r1, #1
 8002700:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002702:	2b00      	cmp	r3, #0
 8002704:	d123      	bne.n	800274e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800270e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002712:	d81c      	bhi.n	800274e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	fb02 f303 	mul.w	r3, r2, r3
 800271c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	3350      	adds	r3, #80	; 0x50
 8002722:	4618      	mov	r0, r3
 8002724:	f002 f9ba 	bl	8004a9c <pvPortMalloc>
 8002728:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d01c      	beq.n	800276a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3350      	adds	r3, #80	; 0x50
 8002738:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800273a:	79fa      	ldrb	r2, [r7, #7]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f814 	bl	8002774 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800274c:	e00d      	b.n	800276a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <xQueueGenericCreate+0x92>
        __asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	613b      	str	r3, [r7, #16]
    }
 8002766:	bf00      	nop
 8002768:	e7fe      	b.n	8002768 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800276a:	69fb      	ldr	r3, [r7, #28]
    }
 800276c:	4618      	mov	r0, r3
 800276e:	3720      	adds	r7, #32
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d103      	bne.n	8002790 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e002      	b.n	8002796 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027a2:	2101      	movs	r1, #1
 80027a4:	69b8      	ldr	r0, [r7, #24]
 80027a6:	f7ff ff07 	bl	80025b8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	68f9      	ldr	r1, [r7, #12]
 80027b8:	2073      	movs	r0, #115	; 0x73
 80027ba:	f004 f98f 	bl	8006adc <SEGGER_SYSVIEW_RecordU32x3>
}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b08f      	sub	sp, #60	; 0x3c
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10a      	bne.n	80027f8 <xQueueReceive+0x30>
        __asm volatile
 80027e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e6:	f383 8811 	msr	BASEPRI, r3
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	623b      	str	r3, [r7, #32]
    }
 80027f4:	bf00      	nop
 80027f6:	e7fe      	b.n	80027f6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d103      	bne.n	8002806 <xQueueReceive+0x3e>
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <xQueueReceive+0x42>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <xQueueReceive+0x44>
 800280a:	2300      	movs	r3, #0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <xQueueReceive+0x5e>
        __asm volatile
 8002810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	61fb      	str	r3, [r7, #28]
    }
 8002822:	bf00      	nop
 8002824:	e7fe      	b.n	8002824 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002826:	f001 f9c9 	bl	8003bbc <xTaskGetSchedulerState>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <xQueueReceive+0x6e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <xQueueReceive+0x72>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <xQueueReceive+0x74>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <xQueueReceive+0x8e>
        __asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	61bb      	str	r3, [r7, #24]
    }
 8002852:	bf00      	nop
 8002854:	e7fe      	b.n	8002854 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002856:	f001 fff7 	bl	8004848 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	2b00      	cmp	r3, #0
 8002864:	d02f      	beq.n	80028c6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800286a:	f000 f8bd 	bl	80029e8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	4618      	mov	r0, r3
 8002872:	f004 ff0f 	bl	8007694 <SEGGER_SYSVIEW_ShrinkId>
 8002876:	4604      	mov	r4, r0
 8002878:	2000      	movs	r0, #0
 800287a:	f004 ff0b 	bl	8007694 <SEGGER_SYSVIEW_ShrinkId>
 800287e:	4602      	mov	r2, r0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2101      	movs	r1, #1
 8002884:	9100      	str	r1, [sp, #0]
 8002886:	4621      	mov	r1, r4
 8002888:	205c      	movs	r0, #92	; 0x5c
 800288a:	f004 f99d 	bl	8006bc8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	1e5a      	subs	r2, r3, #1
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00f      	beq.n	80028be <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a0:	3310      	adds	r3, #16
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 ff78 	bl	8003798 <xTaskRemoveFromEventList>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80028ae:	4b4d      	ldr	r3, [pc, #308]	; (80029e4 <xQueueReceive+0x21c>)
 80028b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80028be:	f001 fff3 	bl	80048a8 <vPortExitCritical>
                return pdPASS;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e08a      	b.n	80029dc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d113      	bne.n	80028f4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80028cc:	f001 ffec 	bl	80048a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	4618      	mov	r0, r3
 80028d4:	f004 fede 	bl	8007694 <SEGGER_SYSVIEW_ShrinkId>
 80028d8:	4604      	mov	r4, r0
 80028da:	2000      	movs	r0, #0
 80028dc:	f004 feda 	bl	8007694 <SEGGER_SYSVIEW_ShrinkId>
 80028e0:	4602      	mov	r2, r0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2101      	movs	r1, #1
 80028e6:	9100      	str	r1, [sp, #0]
 80028e8:	4621      	mov	r1, r4
 80028ea:	205c      	movs	r0, #92	; 0x5c
 80028ec:	f004 f96c 	bl	8006bc8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80028f0:	2300      	movs	r3, #0
 80028f2:	e073      	b.n	80029dc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028fa:	f107 0310 	add.w	r3, r7, #16
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 f822 	bl	8003948 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002904:	2301      	movs	r3, #1
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002908:	f001 ffce 	bl	80048a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800290c:	f000 fc20 	bl	8003150 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002910:	f001 ff9a 	bl	8004848 <vPortEnterCritical>
 8002914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800291a:	b25b      	sxtb	r3, r3
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d103      	bne.n	800292a <xQueueReceive+0x162>
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002930:	b25b      	sxtb	r3, r3
 8002932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002936:	d103      	bne.n	8002940 <xQueueReceive+0x178>
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002940:	f001 ffb2 	bl	80048a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002944:	1d3a      	adds	r2, r7, #4
 8002946:	f107 0310 	add.w	r3, r7, #16
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f001 f811 	bl	8003974 <xTaskCheckForTimeOut>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d124      	bne.n	80029a2 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800295a:	f000 f8bd 	bl	8002ad8 <prvIsQueueEmpty>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d018      	beq.n	8002996 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002966:	3324      	adds	r3, #36	; 0x24
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f000 fea7 	bl	80036c0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002974:	f000 f85e 	bl	8002a34 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002978:	f000 fbf8 	bl	800316c <xTaskResumeAll>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	f47f af69 	bne.w	8002856 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002984:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <xQueueReceive+0x21c>)
 8002986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	e75f      	b.n	8002856 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002998:	f000 f84c 	bl	8002a34 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800299c:	f000 fbe6 	bl	800316c <xTaskResumeAll>
 80029a0:	e759      	b.n	8002856 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80029a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029a4:	f000 f846 	bl	8002a34 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029a8:	f000 fbe0 	bl	800316c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ae:	f000 f893 	bl	8002ad8 <prvIsQueueEmpty>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f43f af4e 	beq.w	8002856 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	4618      	mov	r0, r3
 80029be:	f004 fe69 	bl	8007694 <SEGGER_SYSVIEW_ShrinkId>
 80029c2:	4604      	mov	r4, r0
 80029c4:	2000      	movs	r0, #0
 80029c6:	f004 fe65 	bl	8007694 <SEGGER_SYSVIEW_ShrinkId>
 80029ca:	4602      	mov	r2, r0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2101      	movs	r1, #1
 80029d0:	9100      	str	r1, [sp, #0]
 80029d2:	4621      	mov	r1, r4
 80029d4:	205c      	movs	r0, #92	; 0x5c
 80029d6:	f004 f8f7 	bl	8006bc8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80029da:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3734      	adds	r7, #52	; 0x34
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd90      	pop	{r4, r7, pc}
 80029e4:	e000ed04 	.word	0xe000ed04

080029e8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d018      	beq.n	8002a2c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	441a      	add	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d303      	bcc.n	8002a1c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68d9      	ldr	r1, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	461a      	mov	r2, r3
 8002a26:	6838      	ldr	r0, [r7, #0]
 8002a28:	f004 fffc 	bl	8007a24 <memcpy>
    }
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a3c:	f001 ff04 	bl	8004848 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a46:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a48:	e011      	b.n	8002a6e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d012      	beq.n	8002a78 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3324      	adds	r3, #36	; 0x24
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fe9e 	bl	8003798 <xTaskRemoveFromEventList>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002a62:	f000 ffed 	bl	8003a40 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	dce9      	bgt.n	8002a4a <prvUnlockQueue+0x16>
 8002a76:	e000      	b.n	8002a7a <prvUnlockQueue+0x46>
                    break;
 8002a78:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	22ff      	movs	r2, #255	; 0xff
 8002a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002a82:	f001 ff11 	bl	80048a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a86:	f001 fedf 	bl	8004848 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a90:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a92:	e011      	b.n	8002ab8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d012      	beq.n	8002ac2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3310      	adds	r3, #16
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fe79 	bl	8003798 <xTaskRemoveFromEventList>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002aac:	f000 ffc8 	bl	8003a40 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002ab0:	7bbb      	ldrb	r3, [r7, #14]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	dce9      	bgt.n	8002a94 <prvUnlockQueue+0x60>
 8002ac0:	e000      	b.n	8002ac4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002ac2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	22ff      	movs	r2, #255	; 0xff
 8002ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002acc:	f001 feec 	bl	80048a8 <vPortExitCritical>
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ae0:	f001 feb2 	bl	8004848 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002aec:	2301      	movs	r3, #1
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e001      	b.n	8002af6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002af6:	f001 fed7 	bl	80048a8 <vPortExitCritical>

    return xReturn;
 8002afa:	68fb      	ldr	r3, [r7, #12]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10a      	bne.n	8002b2e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1c:	f383 8811 	msr	BASEPRI, r3
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	60fb      	str	r3, [r7, #12]
    }
 8002b2a:	bf00      	nop
 8002b2c:	e7fe      	b.n	8002b2c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d024      	beq.n	8002b7e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	e01e      	b.n	8002b78 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002b3a:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <vQueueAddToRegistry+0xa8>)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d105      	bne.n	8002b56 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4a17      	ldr	r2, [pc, #92]	; (8002bac <vQueueAddToRegistry+0xa8>)
 8002b50:	4413      	add	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
                    break;
 8002b54:	e013      	b.n	8002b7e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <vQueueAddToRegistry+0x6e>
 8002b5c:	4a13      	ldr	r2, [pc, #76]	; (8002bac <vQueueAddToRegistry+0xa8>)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d104      	bne.n	8002b72 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4a0f      	ldr	r2, [pc, #60]	; (8002bac <vQueueAddToRegistry+0xa8>)
 8002b6e:	4413      	add	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3301      	adds	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b07      	cmp	r3, #7
 8002b7c:	d9dd      	bls.n	8002b3a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00f      	beq.n	8002ba4 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f004 fd7e 	bl	8007694 <SEGGER_SYSVIEW_ShrinkId>
 8002b98:	4601      	mov	r1, r0
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2071      	movs	r0, #113	; 0x71
 8002ba0:	f003 ff42 	bl	8006a28 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002ba4:	bf00      	nop
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000098 	.word	0x20000098

08002bb0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002bc0:	f001 fe42 	bl	8004848 <vPortEnterCritical>
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bca:	b25b      	sxtb	r3, r3
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd0:	d103      	bne.n	8002bda <vQueueWaitForMessageRestricted+0x2a>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002be0:	b25b      	sxtb	r3, r3
 8002be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be6:	d103      	bne.n	8002bf0 <vQueueWaitForMessageRestricted+0x40>
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bf0:	f001 fe5a 	bl	80048a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d106      	bne.n	8002c0a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3324      	adds	r3, #36	; 0x24
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fd7f 	bl	8003708 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002c0a:	6978      	ldr	r0, [r7, #20]
 8002c0c:	f7ff ff12 	bl	8002a34 <prvUnlockQueue>
    }
 8002c10:	bf00      	nop
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	; 0x30
 8002c1c:	af04      	add	r7, sp, #16
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 ff35 	bl	8004a9c <pvPortMalloc>
 8002c32:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d013      	beq.n	8002c62 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c3a:	2058      	movs	r0, #88	; 0x58
 8002c3c:	f001 ff2e 	bl	8004a9c <pvPortMalloc>
 8002c40:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002c48:	2258      	movs	r2, #88	; 0x58
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	69f8      	ldr	r0, [r7, #28]
 8002c4e:	f004 fef7 	bl	8007a40 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
 8002c58:	e005      	b.n	8002c66 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f001 ffd8 	bl	8004c10 <vPortFree>
 8002c60:	e001      	b.n	8002c66 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d013      	beq.n	8002c94 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c6c:	88fa      	ldrh	r2, [r7, #6]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	9303      	str	r3, [sp, #12]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	9302      	str	r3, [sp, #8]
 8002c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f80e 	bl	8002ca4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002c88:	69f8      	ldr	r0, [r7, #28]
 8002c8a:	f000 f899 	bl	8002dc0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	e002      	b.n	8002c9a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c94:	f04f 33ff 	mov.w	r3, #4294967295
 8002c98:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
    }
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3720      	adds	r7, #32
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	461a      	mov	r2, r3
 8002cbc:	21a5      	movs	r1, #165	; 0xa5
 8002cbe:	f004 febf 	bl	8007a40 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f023 0307 	bic.w	r3, r3, #7
 8002cda:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <prvInitialiseNewTask+0x58>
        __asm volatile
 8002ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	617b      	str	r3, [r7, #20]
    }
 8002cf8:	bf00      	nop
 8002cfa:	e7fe      	b.n	8002cfa <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01e      	beq.n	8002d40 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	e012      	b.n	8002d2e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	7819      	ldrb	r1, [r3, #0]
 8002d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	4413      	add	r3, r2
 8002d16:	3334      	adds	r3, #52	; 0x34
 8002d18:	460a      	mov	r2, r1
 8002d1a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d006      	beq.n	8002d36 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	2b09      	cmp	r3, #9
 8002d32:	d9e9      	bls.n	8002d08 <prvInitialiseNewTask+0x64>
 8002d34:	e000      	b.n	8002d38 <prvInitialiseNewTask+0x94>
            {
                break;
 8002d36:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d90a      	bls.n	8002d5c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	613b      	str	r3, [r7, #16]
    }
 8002d58:	bf00      	nop
 8002d5a:	e7fe      	b.n	8002d5a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d901      	bls.n	8002d66 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d62:	2304      	movs	r3, #4
 8002d64:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d70:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	3304      	adds	r3, #4
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fb8a 	bl	8002490 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	3318      	adds	r3, #24
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fb85 	bl	8002490 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d8a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	f1c3 0205 	rsb	r2, r3, #5
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	68f9      	ldr	r1, [r7, #12]
 8002da0:	69b8      	ldr	r0, [r7, #24]
 8002da2:	f001 fc23 	bl	80045ec <pxPortInitialiseStack>
 8002da6:	4602      	mov	r2, r0
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002db6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002db8:	bf00      	nop
 8002dba:	3720      	adds	r7, #32
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002dc0:	b5b0      	push	{r4, r5, r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002dc8:	f001 fd3e 	bl	8004848 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002dcc:	4b4f      	ldr	r3, [pc, #316]	; (8002f0c <prvAddNewTaskToReadyList+0x14c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	4a4e      	ldr	r2, [pc, #312]	; (8002f0c <prvAddNewTaskToReadyList+0x14c>)
 8002dd4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002dd6:	4b4e      	ldr	r3, [pc, #312]	; (8002f10 <prvAddNewTaskToReadyList+0x150>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002dde:	4a4c      	ldr	r2, [pc, #304]	; (8002f10 <prvAddNewTaskToReadyList+0x150>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002de4:	4b49      	ldr	r3, [pc, #292]	; (8002f0c <prvAddNewTaskToReadyList+0x14c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d110      	bne.n	8002e0e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002dec:	f000 fe4c 	bl	8003a88 <prvInitialiseTaskLists>
 8002df0:	e00d      	b.n	8002e0e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002df2:	4b48      	ldr	r3, [pc, #288]	; (8002f14 <prvAddNewTaskToReadyList+0x154>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dfa:	4b45      	ldr	r3, [pc, #276]	; (8002f10 <prvAddNewTaskToReadyList+0x150>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d802      	bhi.n	8002e0e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002e08:	4a41      	ldr	r2, [pc, #260]	; (8002f10 <prvAddNewTaskToReadyList+0x150>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002e0e:	4b42      	ldr	r3, [pc, #264]	; (8002f18 <prvAddNewTaskToReadyList+0x158>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3301      	adds	r3, #1
 8002e14:	4a40      	ldr	r2, [pc, #256]	; (8002f18 <prvAddNewTaskToReadyList+0x158>)
 8002e16:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e18:	4b3f      	ldr	r3, [pc, #252]	; (8002f18 <prvAddNewTaskToReadyList+0x158>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d016      	beq.n	8002e54 <prvAddNewTaskToReadyList+0x94>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f004 fb6d 	bl	8007508 <SEGGER_SYSVIEW_OnTaskCreate>
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	461d      	mov	r5, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461c      	mov	r4, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	1ae3      	subs	r3, r4, r3
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	462b      	mov	r3, r5
 8002e50:	f002 f8a0 	bl	8004f94 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 fbda 	bl	8007610 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	2201      	movs	r2, #1
 8002e62:	409a      	lsls	r2, r3
 8002e64:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <prvAddNewTaskToReadyList+0x15c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	4a2c      	ldr	r2, [pc, #176]	; (8002f1c <prvAddNewTaskToReadyList+0x15c>)
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e72:	492b      	ldr	r1, [pc, #172]	; (8002f20 <prvAddNewTaskToReadyList+0x160>)
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	3304      	adds	r3, #4
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	3204      	adds	r2, #4
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	1d1a      	adds	r2, r3, #4
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	; (8002f20 <prvAddNewTaskToReadyList+0x160>)
 8002eb2:	441a      	add	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	615a      	str	r2, [r3, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebc:	4918      	ldr	r1, [pc, #96]	; (8002f20 <prvAddNewTaskToReadyList+0x160>)
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	1c59      	adds	r1, r3, #1
 8002ecc:	4814      	ldr	r0, [pc, #80]	; (8002f20 <prvAddNewTaskToReadyList+0x160>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4403      	add	r3, r0
 8002ed8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002eda:	f001 fce5 	bl	80048a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <prvAddNewTaskToReadyList+0x154>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00e      	beq.n	8002f04 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <prvAddNewTaskToReadyList+0x150>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d207      	bcs.n	8002f04 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <prvAddNewTaskToReadyList+0x164>)
 8002ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f0c:	200001b0 	.word	0x200001b0
 8002f10:	200000d8 	.word	0x200000d8
 8002f14:	200001bc 	.word	0x200001bc
 8002f18:	200001cc 	.word	0x200001cc
 8002f1c:	200001b8 	.word	0x200001b8
 8002f20:	200000dc 	.word	0x200000dc
 8002f24:	e000ed04 	.word	0xe000ed04

08002f28 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002f30:	f001 fc8a 	bl	8004848 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <vTaskDelete+0x18>
 8002f3a:	4b48      	ldr	r3, [pc, #288]	; (800305c <vTaskDelete+0x134>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	e000      	b.n	8002f42 <vTaskDelete+0x1a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3304      	adds	r3, #4
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fb0b 	bl	8002564 <uxListRemove>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d115      	bne.n	8002f80 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f58:	4941      	ldr	r1, [pc, #260]	; (8003060 <vTaskDelete+0x138>)
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <vTaskDelete+0x58>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	2201      	movs	r2, #1
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43da      	mvns	r2, r3
 8002f76:	4b3b      	ldr	r3, [pc, #236]	; (8003064 <vTaskDelete+0x13c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	4a39      	ldr	r2, [pc, #228]	; (8003064 <vTaskDelete+0x13c>)
 8002f7e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d004      	beq.n	8002f92 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3318      	adds	r3, #24
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fae9 	bl	8002564 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002f92:	4b35      	ldr	r3, [pc, #212]	; (8003068 <vTaskDelete+0x140>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3301      	adds	r3, #1
 8002f98:	4a33      	ldr	r2, [pc, #204]	; (8003068 <vTaskDelete+0x140>)
 8002f9a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002f9c:	4b2f      	ldr	r3, [pc, #188]	; (800305c <vTaskDelete+0x134>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d118      	bne.n	8002fd8 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	4619      	mov	r1, r3
 8002fac:	482f      	ldr	r0, [pc, #188]	; (800306c <vTaskDelete+0x144>)
 8002fae:	f7ff fa7c 	bl	80024aa <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002fb2:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <vTaskDelete+0x148>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	4a2d      	ldr	r2, [pc, #180]	; (8003070 <vTaskDelete+0x148>)
 8002fba:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f004 fb68 	bl	8007694 <SEGGER_SYSVIEW_ShrinkId>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	2022      	movs	r0, #34	; 0x22
 8002fca:	f003 fcf1 	bl	80069b0 <SEGGER_SYSVIEW_RecordU32>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f002 f847 	bl	8005064 <SYSVIEW_DeleteTask>
 8002fd6:	e013      	b.n	8003000 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002fd8:	4b26      	ldr	r3, [pc, #152]	; (8003074 <vTaskDelete+0x14c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	4a25      	ldr	r2, [pc, #148]	; (8003074 <vTaskDelete+0x14c>)
 8002fe0:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f004 fb55 	bl	8007694 <SEGGER_SYSVIEW_ShrinkId>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4619      	mov	r1, r3
 8002fee:	2022      	movs	r0, #34	; 0x22
 8002ff0:	f003 fcde 	bl	80069b0 <SEGGER_SYSVIEW_RecordU32>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f002 f834 	bl	8005064 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002ffc:	f000 fdc2 	bl	8003b84 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003000:	f001 fc52 	bl	80048a8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8003004:	4b15      	ldr	r3, [pc, #84]	; (800305c <vTaskDelete+0x134>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	429a      	cmp	r2, r3
 800300c:	d002      	beq.n	8003014 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fda8 	bl	8003b64 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8003014:	4b18      	ldr	r3, [pc, #96]	; (8003078 <vTaskDelete+0x150>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01b      	beq.n	8003054 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <vTaskDelete+0x134>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	429a      	cmp	r2, r3
 8003024:	d116      	bne.n	8003054 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <vTaskDelete+0x154>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <vTaskDelete+0x11c>
        __asm volatile
 800302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	60bb      	str	r3, [r7, #8]
    }
 8003040:	bf00      	nop
 8003042:	e7fe      	b.n	8003042 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8003044:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <vTaskDelete+0x158>)
 8003046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003054:	bf00      	nop
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	200000d8 	.word	0x200000d8
 8003060:	200000dc 	.word	0x200000dc
 8003064:	200001b8 	.word	0x200001b8
 8003068:	200001cc 	.word	0x200001cc
 800306c:	20000184 	.word	0x20000184
 8003070:	20000198 	.word	0x20000198
 8003074:	200001b0 	.word	0x200001b0
 8003078:	200001bc 	.word	0x200001bc
 800307c:	200001d8 	.word	0x200001d8
 8003080:	e000ed04 	.word	0xe000ed04

08003084 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800308a:	4b29      	ldr	r3, [pc, #164]	; (8003130 <vTaskStartScheduler+0xac>)
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	2300      	movs	r3, #0
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	2300      	movs	r3, #0
 8003094:	2282      	movs	r2, #130	; 0x82
 8003096:	4927      	ldr	r1, [pc, #156]	; (8003134 <vTaskStartScheduler+0xb0>)
 8003098:	4827      	ldr	r0, [pc, #156]	; (8003138 <vTaskStartScheduler+0xb4>)
 800309a:	f7ff fdbd 	bl	8002c18 <xTaskCreate>
 800309e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d102      	bne.n	80030ac <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80030a6:	f001 f81d 	bl	80040e4 <xTimerCreateTimerTask>
 80030aa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d129      	bne.n	8003106 <vTaskStartScheduler+0x82>
        __asm volatile
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	60bb      	str	r3, [r7, #8]
    }
 80030c4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80030c6:	4b1d      	ldr	r3, [pc, #116]	; (800313c <vTaskStartScheduler+0xb8>)
 80030c8:	f04f 32ff 	mov.w	r2, #4294967295
 80030cc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80030ce:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <vTaskStartScheduler+0xbc>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <vTaskStartScheduler+0xc0>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80030da:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <vTaskStartScheduler+0xc4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3334      	adds	r3, #52	; 0x34
 80030e0:	2205      	movs	r2, #5
 80030e2:	4914      	ldr	r1, [pc, #80]	; (8003134 <vTaskStartScheduler+0xb0>)
 80030e4:	4618      	mov	r0, r3
 80030e6:	f004 fc8d 	bl	8007a04 <memcmp>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <vTaskStartScheduler+0x78>
 80030f0:	4b15      	ldr	r3, [pc, #84]	; (8003148 <vTaskStartScheduler+0xc4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f004 fa49 	bl	800758c <SEGGER_SYSVIEW_OnTaskStartExec>
 80030fa:	e001      	b.n	8003100 <vTaskStartScheduler+0x7c>
 80030fc:	f004 f9e8 	bl	80074d0 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003100:	f001 fb00 	bl	8004704 <xPortStartScheduler>
 8003104:	e00e      	b.n	8003124 <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310c:	d10a      	bne.n	8003124 <vTaskStartScheduler+0xa0>
        __asm volatile
 800310e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003112:	f383 8811 	msr	BASEPRI, r3
 8003116:	f3bf 8f6f 	isb	sy
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	607b      	str	r3, [r7, #4]
    }
 8003120:	bf00      	nop
 8003122:	e7fe      	b.n	8003122 <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <vTaskStartScheduler+0xc8>)
 8003126:	681b      	ldr	r3, [r3, #0]
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	200001d4 	.word	0x200001d4
 8003134:	08007af4 	.word	0x08007af4
 8003138:	08003a59 	.word	0x08003a59
 800313c:	200001d0 	.word	0x200001d0
 8003140:	200001bc 	.word	0x200001bc
 8003144:	200001b4 	.word	0x200001b4
 8003148:	200000d8 	.word	0x200000d8
 800314c:	2000000c 	.word	0x2000000c

08003150 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <vTaskSuspendAll+0x18>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	4a03      	ldr	r2, [pc, #12]	; (8003168 <vTaskSuspendAll+0x18>)
 800315c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	200001d8 	.word	0x200001d8

0800316c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800317a:	4b73      	ldr	r3, [pc, #460]	; (8003348 <xTaskResumeAll+0x1dc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10a      	bne.n	8003198 <xTaskResumeAll+0x2c>
        __asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	607b      	str	r3, [r7, #4]
    }
 8003194:	bf00      	nop
 8003196:	e7fe      	b.n	8003196 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003198:	f001 fb56 	bl	8004848 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800319c:	4b6a      	ldr	r3, [pc, #424]	; (8003348 <xTaskResumeAll+0x1dc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	4a69      	ldr	r2, [pc, #420]	; (8003348 <xTaskResumeAll+0x1dc>)
 80031a4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031a6:	4b68      	ldr	r3, [pc, #416]	; (8003348 <xTaskResumeAll+0x1dc>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 80c4 	bne.w	8003338 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031b0:	4b66      	ldr	r3, [pc, #408]	; (800334c <xTaskResumeAll+0x1e0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80bf 	beq.w	8003338 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031ba:	e08e      	b.n	80032da <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031bc:	4b64      	ldr	r3, [pc, #400]	; (8003350 <xTaskResumeAll+0x1e4>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	6a12      	ldr	r2, [r2, #32]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	69d2      	ldr	r2, [r2, #28]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3318      	adds	r3, #24
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d103      	bne.n	80031f2 <xTaskResumeAll+0x86>
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	6a1a      	ldr	r2, [r3, #32]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	2200      	movs	r2, #0
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	1e5a      	subs	r2, r3, #1
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	68d2      	ldr	r2, [r2, #12]
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	6892      	ldr	r2, [r2, #8]
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	3304      	adds	r3, #4
 8003224:	429a      	cmp	r2, r3
 8003226:	d103      	bne.n	8003230 <xTaskResumeAll+0xc4>
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2200      	movs	r2, #0
 8003234:	615a      	str	r2, [r3, #20]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	1e5a      	subs	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	4618      	mov	r0, r3
 8003244:	f004 f9e4 	bl	8007610 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	2201      	movs	r2, #1
 800324e:	409a      	lsls	r2, r3
 8003250:	4b40      	ldr	r3, [pc, #256]	; (8003354 <xTaskResumeAll+0x1e8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4313      	orrs	r3, r2
 8003256:	4a3f      	ldr	r2, [pc, #252]	; (8003354 <xTaskResumeAll+0x1e8>)
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	493e      	ldr	r1, [pc, #248]	; (8003358 <xTaskResumeAll+0x1ec>)
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	3304      	adds	r3, #4
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	3204      	adds	r2, #4
 8003286:	605a      	str	r2, [r3, #4]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	1d1a      	adds	r2, r3, #4
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4a2e      	ldr	r2, [pc, #184]	; (8003358 <xTaskResumeAll+0x1ec>)
 800329e:	441a      	add	r2, r3
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	615a      	str	r2, [r3, #20]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a8:	492b      	ldr	r1, [pc, #172]	; (8003358 <xTaskResumeAll+0x1ec>)
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	1c59      	adds	r1, r3, #1
 80032b8:	4827      	ldr	r0, [pc, #156]	; (8003358 <xTaskResumeAll+0x1ec>)
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4403      	add	r3, r0
 80032c4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ca:	4b24      	ldr	r3, [pc, #144]	; (800335c <xTaskResumeAll+0x1f0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d302      	bcc.n	80032da <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80032d4:	4b22      	ldr	r3, [pc, #136]	; (8003360 <xTaskResumeAll+0x1f4>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032da:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <xTaskResumeAll+0x1e4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f47f af6c 	bne.w	80031bc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80032ea:	f000 fc4b 	bl	8003b84 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <xTaskResumeAll+0x1f8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d010      	beq.n	800331c <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80032fa:	f000 f859 	bl	80033b0 <xTaskIncrementTick>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003304:	4b16      	ldr	r3, [pc, #88]	; (8003360 <xTaskResumeAll+0x1f4>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	3b01      	subs	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f1      	bne.n	80032fa <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <xTaskResumeAll+0x1f8>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800331c:	4b10      	ldr	r3, [pc, #64]	; (8003360 <xTaskResumeAll+0x1f4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d009      	beq.n	8003338 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003324:	2301      	movs	r3, #1
 8003326:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <xTaskResumeAll+0x1fc>)
 800332a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003338:	f001 fab6 	bl	80048a8 <vPortExitCritical>

    return xAlreadyYielded;
 800333c:	69bb      	ldr	r3, [r7, #24]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200001d8 	.word	0x200001d8
 800334c:	200001b0 	.word	0x200001b0
 8003350:	20000170 	.word	0x20000170
 8003354:	200001b8 	.word	0x200001b8
 8003358:	200000dc 	.word	0x200000dc
 800335c:	200000d8 	.word	0x200000d8
 8003360:	200001c4 	.word	0x200001c4
 8003364:	200001c0 	.word	0x200001c0
 8003368:	e000ed04 	.word	0xe000ed04

0800336c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <xTaskGetTickCount+0x1c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003378:	687b      	ldr	r3, [r7, #4]
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	200001b4 	.word	0x200001b4

0800338c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003392:	f001 fb43 	bl	8004a1c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800339a:	4b04      	ldr	r3, [pc, #16]	; (80033ac <xTaskGetTickCountFromISR+0x20>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80033a0:	683b      	ldr	r3, [r7, #0]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200001b4 	.word	0x200001b4

080033b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08a      	sub	sp, #40	; 0x28
 80033b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ba:	4b7f      	ldr	r3, [pc, #508]	; (80035b8 <xTaskIncrementTick+0x208>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 80f0 	bne.w	80035a4 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033c4:	4b7d      	ldr	r3, [pc, #500]	; (80035bc <xTaskIncrementTick+0x20c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3301      	adds	r3, #1
 80033ca:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80033cc:	4a7b      	ldr	r2, [pc, #492]	; (80035bc <xTaskIncrementTick+0x20c>)
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d120      	bne.n	800341a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80033d8:	4b79      	ldr	r3, [pc, #484]	; (80035c0 <xTaskIncrementTick+0x210>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <xTaskIncrementTick+0x48>
        __asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	607b      	str	r3, [r7, #4]
    }
 80033f4:	bf00      	nop
 80033f6:	e7fe      	b.n	80033f6 <xTaskIncrementTick+0x46>
 80033f8:	4b71      	ldr	r3, [pc, #452]	; (80035c0 <xTaskIncrementTick+0x210>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	4b71      	ldr	r3, [pc, #452]	; (80035c4 <xTaskIncrementTick+0x214>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6f      	ldr	r2, [pc, #444]	; (80035c0 <xTaskIncrementTick+0x210>)
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4a6f      	ldr	r2, [pc, #444]	; (80035c4 <xTaskIncrementTick+0x214>)
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	4b6e      	ldr	r3, [pc, #440]	; (80035c8 <xTaskIncrementTick+0x218>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3301      	adds	r3, #1
 8003412:	4a6d      	ldr	r2, [pc, #436]	; (80035c8 <xTaskIncrementTick+0x218>)
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	f000 fbb5 	bl	8003b84 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800341a:	4b6c      	ldr	r3, [pc, #432]	; (80035cc <xTaskIncrementTick+0x21c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6a3a      	ldr	r2, [r7, #32]
 8003420:	429a      	cmp	r2, r3
 8003422:	f0c0 80aa 	bcc.w	800357a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003426:	4b66      	ldr	r3, [pc, #408]	; (80035c0 <xTaskIncrementTick+0x210>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d104      	bne.n	800343a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003430:	4b66      	ldr	r3, [pc, #408]	; (80035cc <xTaskIncrementTick+0x21c>)
 8003432:	f04f 32ff 	mov.w	r2, #4294967295
 8003436:	601a      	str	r2, [r3, #0]
                    break;
 8003438:	e09f      	b.n	800357a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800343a:	4b61      	ldr	r3, [pc, #388]	; (80035c0 <xTaskIncrementTick+0x210>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800344a:	6a3a      	ldr	r2, [r7, #32]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	429a      	cmp	r2, r3
 8003450:	d203      	bcs.n	800345a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003452:	4a5e      	ldr	r2, [pc, #376]	; (80035cc <xTaskIncrementTick+0x21c>)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003458:	e08f      	b.n	800357a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	68d2      	ldr	r2, [r2, #12]
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	6892      	ldr	r2, [r2, #8]
 8003472:	605a      	str	r2, [r3, #4]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	3304      	adds	r3, #4
 800347c:	429a      	cmp	r2, r3
 800347e:	d103      	bne.n	8003488 <xTaskIncrementTick+0xd8>
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	605a      	str	r2, [r3, #4]
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2200      	movs	r2, #0
 800348c:	615a      	str	r2, [r3, #20]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	1e5a      	subs	r2, r3, #1
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01e      	beq.n	80034de <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	6a12      	ldr	r2, [r2, #32]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	69d2      	ldr	r2, [r2, #28]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	3318      	adds	r3, #24
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d103      	bne.n	80034ce <xTaskIncrementTick+0x11e>
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	6a1a      	ldr	r2, [r3, #32]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2200      	movs	r2, #0
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	1e5a      	subs	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f004 f895 	bl	8007610 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	2201      	movs	r2, #1
 80034ec:	409a      	lsls	r2, r3
 80034ee:	4b38      	ldr	r3, [pc, #224]	; (80035d0 <xTaskIncrementTick+0x220>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	4a36      	ldr	r2, [pc, #216]	; (80035d0 <xTaskIncrementTick+0x220>)
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fc:	4935      	ldr	r1, [pc, #212]	; (80035d4 <xTaskIncrementTick+0x224>)
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	3304      	adds	r3, #4
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	60da      	str	r2, [r3, #12]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	3204      	adds	r2, #4
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	1d1a      	adds	r2, r3, #4
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	609a      	str	r2, [r3, #8]
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4a26      	ldr	r2, [pc, #152]	; (80035d4 <xTaskIncrementTick+0x224>)
 800353c:	441a      	add	r2, r3
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	615a      	str	r2, [r3, #20]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003546:	4923      	ldr	r1, [pc, #140]	; (80035d4 <xTaskIncrementTick+0x224>)
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	1c59      	adds	r1, r3, #1
 8003556:	481f      	ldr	r0, [pc, #124]	; (80035d4 <xTaskIncrementTick+0x224>)
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4403      	add	r3, r0
 8003562:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <xTaskIncrementTick+0x228>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	429a      	cmp	r2, r3
 8003570:	f67f af59 	bls.w	8003426 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003574:	2301      	movs	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003578:	e755      	b.n	8003426 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800357a:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <xTaskIncrementTick+0x228>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003580:	4914      	ldr	r1, [pc, #80]	; (80035d4 <xTaskIncrementTick+0x224>)
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d901      	bls.n	8003596 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003592:	2301      	movs	r3, #1
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003596:	4b11      	ldr	r3, [pc, #68]	; (80035dc <xTaskIncrementTick+0x22c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800359e:	2301      	movs	r3, #1
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
 80035a2:	e004      	b.n	80035ae <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80035a4:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <xTaskIncrementTick+0x230>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3301      	adds	r3, #1
 80035aa:	4a0d      	ldr	r2, [pc, #52]	; (80035e0 <xTaskIncrementTick+0x230>)
 80035ac:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3728      	adds	r7, #40	; 0x28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	200001d8 	.word	0x200001d8
 80035bc:	200001b4 	.word	0x200001b4
 80035c0:	20000168 	.word	0x20000168
 80035c4:	2000016c 	.word	0x2000016c
 80035c8:	200001c8 	.word	0x200001c8
 80035cc:	200001d0 	.word	0x200001d0
 80035d0:	200001b8 	.word	0x200001b8
 80035d4:	200000dc 	.word	0x200000dc
 80035d8:	200000d8 	.word	0x200000d8
 80035dc:	200001c4 	.word	0x200001c4
 80035e0:	200001c0 	.word	0x200001c0

080035e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035ea:	4b2f      	ldr	r3, [pc, #188]	; (80036a8 <vTaskSwitchContext+0xc4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80035f2:	4b2e      	ldr	r3, [pc, #184]	; (80036ac <vTaskSwitchContext+0xc8>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80035f8:	e052      	b.n	80036a0 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 80035fa:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <vTaskSwitchContext+0xc8>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <vTaskSwitchContext+0xcc>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	fab3 f383 	clz	r3, r3
 800360c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800360e:	7afb      	ldrb	r3, [r7, #11]
 8003610:	f1c3 031f 	rsb	r3, r3, #31
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	4927      	ldr	r1, [pc, #156]	; (80036b4 <vTaskSwitchContext+0xd0>)
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <vTaskSwitchContext+0x5c>
        __asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	607b      	str	r3, [r7, #4]
    }
 800363c:	bf00      	nop
 800363e:	e7fe      	b.n	800363e <vTaskSwitchContext+0x5a>
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4a1a      	ldr	r2, [pc, #104]	; (80036b4 <vTaskSwitchContext+0xd0>)
 800364c:	4413      	add	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3308      	adds	r3, #8
 8003662:	429a      	cmp	r2, r3
 8003664:	d104      	bne.n	8003670 <vTaskSwitchContext+0x8c>
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	4a10      	ldr	r2, [pc, #64]	; (80036b8 <vTaskSwitchContext+0xd4>)
 8003678:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800367a:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <vTaskSwitchContext+0xd4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3334      	adds	r3, #52	; 0x34
 8003680:	2205      	movs	r2, #5
 8003682:	490e      	ldr	r1, [pc, #56]	; (80036bc <vTaskSwitchContext+0xd8>)
 8003684:	4618      	mov	r0, r3
 8003686:	f004 f9bd 	bl	8007a04 <memcmp>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <vTaskSwitchContext+0xb8>
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <vTaskSwitchContext+0xd4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f003 ff79 	bl	800758c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800369a:	e001      	b.n	80036a0 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 800369c:	f003 ff18 	bl	80074d0 <SEGGER_SYSVIEW_OnIdle>
}
 80036a0:	bf00      	nop
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	200001d8 	.word	0x200001d8
 80036ac:	200001c4 	.word	0x200001c4
 80036b0:	200001b8 	.word	0x200001b8
 80036b4:	200000dc 	.word	0x200000dc
 80036b8:	200000d8 	.word	0x200000d8
 80036bc:	08007af4 	.word	0x08007af4

080036c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	60fb      	str	r3, [r7, #12]
    }
 80036e2:	bf00      	nop
 80036e4:	e7fe      	b.n	80036e4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <vTaskPlaceOnEventList+0x44>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3318      	adds	r3, #24
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fe feff 	bl	80024f2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036f4:	2101      	movs	r1, #1
 80036f6:	6838      	ldr	r0, [r7, #0]
 80036f8:	f000 fc74 	bl	8003fe4 <prvAddCurrentTaskToDelayedList>
}
 80036fc:	bf00      	nop
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	200000d8 	.word	0x200000d8

08003708 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	613b      	str	r3, [r7, #16]
    }
 800372c:	bf00      	nop
 800372e:	e7fe      	b.n	800372e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	4b17      	ldr	r3, [pc, #92]	; (8003794 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	61da      	str	r2, [r3, #28]
 800373e:	4b15      	ldr	r3, [pc, #84]	; (8003794 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	6892      	ldr	r2, [r2, #8]
 8003746:	621a      	str	r2, [r3, #32]
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <vTaskPlaceOnEventListRestricted+0x8c>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	3218      	adds	r2, #24
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f103 0218 	add.w	r2, r3, #24
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
 800377c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800377e:	2024      	movs	r0, #36	; 0x24
 8003780:	f003 f8f8 	bl	8006974 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	68b8      	ldr	r0, [r7, #8]
 8003788:	f000 fc2c 	bl	8003fe4 <prvAddCurrentTaskToDelayedList>
    }
 800378c:	bf00      	nop
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	200000d8 	.word	0x200000d8

08003798 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10a      	bne.n	80037c4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	60fb      	str	r3, [r7, #12]
    }
 80037c0:	bf00      	nop
 80037c2:	e7fe      	b.n	80037c2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	6a3a      	ldr	r2, [r7, #32]
 80037d0:	6a12      	ldr	r2, [r2, #32]
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	6a3a      	ldr	r2, [r7, #32]
 80037da:	69d2      	ldr	r2, [r2, #28]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	3318      	adds	r3, #24
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d103      	bne.n	80037f2 <xTaskRemoveFromEventList+0x5a>
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	2200      	movs	r2, #0
 80037f6:	629a      	str	r2, [r3, #40]	; 0x28
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	1e5a      	subs	r2, r3, #1
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003802:	4b4b      	ldr	r3, [pc, #300]	; (8003930 <xTaskRemoveFromEventList+0x198>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d162      	bne.n	80038d0 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	6a3a      	ldr	r2, [r7, #32]
 8003816:	68d2      	ldr	r2, [r2, #12]
 8003818:	609a      	str	r2, [r3, #8]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	6a3a      	ldr	r2, [r7, #32]
 8003820:	6892      	ldr	r2, [r2, #8]
 8003822:	605a      	str	r2, [r3, #4]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	3304      	adds	r3, #4
 800382c:	429a      	cmp	r2, r3
 800382e:	d103      	bne.n	8003838 <xTaskRemoveFromEventList+0xa0>
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	2200      	movs	r2, #0
 800383c:	615a      	str	r2, [r3, #20]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	1e5a      	subs	r2, r3, #1
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	4618      	mov	r0, r3
 800384c:	f003 fee0 	bl	8007610 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	2201      	movs	r2, #1
 8003856:	409a      	lsls	r2, r3
 8003858:	4b36      	ldr	r3, [pc, #216]	; (8003934 <xTaskRemoveFromEventList+0x19c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4313      	orrs	r3, r2
 800385e:	4a35      	ldr	r2, [pc, #212]	; (8003934 <xTaskRemoveFromEventList+0x19c>)
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003866:	4934      	ldr	r1, [pc, #208]	; (8003938 <xTaskRemoveFromEventList+0x1a0>)
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	3304      	adds	r3, #4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	609a      	str	r2, [r3, #8]
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	6a3a      	ldr	r2, [r7, #32]
 800388c:	3204      	adds	r2, #4
 800388e:	605a      	str	r2, [r3, #4]
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	1d1a      	adds	r2, r3, #4
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4a24      	ldr	r2, [pc, #144]	; (8003938 <xTaskRemoveFromEventList+0x1a0>)
 80038a6:	441a      	add	r2, r3
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	615a      	str	r2, [r3, #20]
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b0:	4921      	ldr	r1, [pc, #132]	; (8003938 <xTaskRemoveFromEventList+0x1a0>)
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	1c59      	adds	r1, r3, #1
 80038c0:	481d      	ldr	r0, [pc, #116]	; (8003938 <xTaskRemoveFromEventList+0x1a0>)
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4403      	add	r3, r0
 80038cc:	6019      	str	r1, [r3, #0]
 80038ce:	e01b      	b.n	8003908 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038d0:	4b1a      	ldr	r3, [pc, #104]	; (800393c <xTaskRemoveFromEventList+0x1a4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	61da      	str	r2, [r3, #28]
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	621a      	str	r2, [r3, #32]
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	6a3a      	ldr	r2, [r7, #32]
 80038ea:	3218      	adds	r2, #24
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	f103 0218 	add.w	r2, r3, #24
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	609a      	str	r2, [r3, #8]
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	4a10      	ldr	r2, [pc, #64]	; (800393c <xTaskRemoveFromEventList+0x1a4>)
 80038fc:	629a      	str	r2, [r3, #40]	; 0x28
 80038fe:	4b0f      	ldr	r3, [pc, #60]	; (800393c <xTaskRemoveFromEventList+0x1a4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3301      	adds	r3, #1
 8003904:	4a0d      	ldr	r2, [pc, #52]	; (800393c <xTaskRemoveFromEventList+0x1a4>)
 8003906:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <xTaskRemoveFromEventList+0x1a8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	429a      	cmp	r2, r3
 8003914:	d905      	bls.n	8003922 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003916:	2301      	movs	r3, #1
 8003918:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <xTaskRemoveFromEventList+0x1ac>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e001      	b.n	8003926 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003922:	2300      	movs	r3, #0
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003928:	4618      	mov	r0, r3
 800392a:	3728      	adds	r7, #40	; 0x28
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	200001d8 	.word	0x200001d8
 8003934:	200001b8 	.word	0x200001b8
 8003938:	200000dc 	.word	0x200000dc
 800393c:	20000170 	.word	0x20000170
 8003940:	200000d8 	.word	0x200000d8
 8003944:	200001c4 	.word	0x200001c4

08003948 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <vTaskInternalSetTimeOutState+0x24>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <vTaskInternalSetTimeOutState+0x28>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	605a      	str	r2, [r3, #4]
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	200001c8 	.word	0x200001c8
 8003970:	200001b4 	.word	0x200001b4

08003974 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	613b      	str	r3, [r7, #16]
    }
 8003996:	bf00      	nop
 8003998:	e7fe      	b.n	8003998 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60fb      	str	r3, [r7, #12]
    }
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80039b6:	f000 ff47 	bl	8004848 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80039ba:	4b1f      	ldr	r3, [pc, #124]	; (8003a38 <xTaskCheckForTimeOut+0xc4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d2:	d102      	bne.n	80039da <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	e026      	b.n	8003a28 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <xTaskCheckForTimeOut+0xc8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d00a      	beq.n	80039fc <xTaskCheckForTimeOut+0x88>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d305      	bcc.n	80039fc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80039f0:	2301      	movs	r3, #1
 80039f2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	e015      	b.n	8003a28 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d20b      	bcs.n	8003a1e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	1ad2      	subs	r2, r2, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ff98 	bl	8003948 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	e004      	b.n	8003a28 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003a24:	2301      	movs	r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003a28:	f000 ff3e 	bl	80048a8 <vPortExitCritical>

    return xReturn;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	200001b4 	.word	0x200001b4
 8003a3c:	200001c8 	.word	0x200001c8

08003a40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003a44:	4b03      	ldr	r3, [pc, #12]	; (8003a54 <vTaskMissedYield+0x14>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	200001c4 	.word	0x200001c4

08003a58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a60:	f000 f852 	bl	8003b08 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <prvIdleTask+0x28>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d9f9      	bls.n	8003a60 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <prvIdleTask+0x2c>)
 8003a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003a7c:	e7f0      	b.n	8003a60 <prvIdleTask+0x8>
 8003a7e:	bf00      	nop
 8003a80:	200000dc 	.word	0x200000dc
 8003a84:	e000ed04 	.word	0xe000ed04

08003a88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a8e:	2300      	movs	r3, #0
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	e00c      	b.n	8003aae <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <prvInitialiseTaskLists+0x60>)
 8003aa0:	4413      	add	r3, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe fcd4 	bl	8002450 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d9ef      	bls.n	8003a94 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003ab4:	480d      	ldr	r0, [pc, #52]	; (8003aec <prvInitialiseTaskLists+0x64>)
 8003ab6:	f7fe fccb 	bl	8002450 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003aba:	480d      	ldr	r0, [pc, #52]	; (8003af0 <prvInitialiseTaskLists+0x68>)
 8003abc:	f7fe fcc8 	bl	8002450 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003ac0:	480c      	ldr	r0, [pc, #48]	; (8003af4 <prvInitialiseTaskLists+0x6c>)
 8003ac2:	f7fe fcc5 	bl	8002450 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003ac6:	480c      	ldr	r0, [pc, #48]	; (8003af8 <prvInitialiseTaskLists+0x70>)
 8003ac8:	f7fe fcc2 	bl	8002450 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003acc:	480b      	ldr	r0, [pc, #44]	; (8003afc <prvInitialiseTaskLists+0x74>)
 8003ace:	f7fe fcbf 	bl	8002450 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <prvInitialiseTaskLists+0x78>)
 8003ad4:	4a05      	ldr	r2, [pc, #20]	; (8003aec <prvInitialiseTaskLists+0x64>)
 8003ad6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <prvInitialiseTaskLists+0x7c>)
 8003ada:	4a05      	ldr	r2, [pc, #20]	; (8003af0 <prvInitialiseTaskLists+0x68>)
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	200000dc 	.word	0x200000dc
 8003aec:	20000140 	.word	0x20000140
 8003af0:	20000154 	.word	0x20000154
 8003af4:	20000170 	.word	0x20000170
 8003af8:	20000184 	.word	0x20000184
 8003afc:	2000019c 	.word	0x2000019c
 8003b00:	20000168 	.word	0x20000168
 8003b04:	2000016c 	.word	0x2000016c

08003b08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b0e:	e019      	b.n	8003b44 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003b10:	f000 fe9a 	bl	8004848 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b14:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <prvCheckTasksWaitingTermination+0x50>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe fd1f 	bl	8002564 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <prvCheckTasksWaitingTermination+0x54>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	4a0b      	ldr	r2, [pc, #44]	; (8003b5c <prvCheckTasksWaitingTermination+0x54>)
 8003b2e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <prvCheckTasksWaitingTermination+0x58>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <prvCheckTasksWaitingTermination+0x58>)
 8003b38:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003b3a:	f000 feb5 	bl	80048a8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f810 	bl	8003b64 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <prvCheckTasksWaitingTermination+0x58>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e1      	bne.n	8003b10 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000184 	.word	0x20000184
 8003b5c:	200001b0 	.word	0x200001b0
 8003b60:	20000198 	.word	0x20000198

08003b64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 f84d 	bl	8004c10 <vPortFree>
            vPortFree( pxTCB );
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f001 f84a 	bl	8004c10 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <prvResetNextTaskUnblockTime+0x30>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d104      	bne.n	8003b9c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <prvResetNextTaskUnblockTime+0x34>)
 8003b94:	f04f 32ff 	mov.w	r2, #4294967295
 8003b98:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b9a:	e005      	b.n	8003ba8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <prvResetNextTaskUnblockTime+0x30>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <prvResetNextTaskUnblockTime+0x34>)
 8003ba6:	6013      	str	r3, [r2, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000168 	.word	0x20000168
 8003bb8:	200001d0 	.word	0x200001d0

08003bbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <xTaskGetSchedulerState+0x34>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	e008      	b.n	8003be2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd0:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <xTaskGetSchedulerState+0x38>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d102      	bne.n	8003bde <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	607b      	str	r3, [r7, #4]
 8003bdc:	e001      	b.n	8003be2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003bde:	2300      	movs	r3, #0
 8003be0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003be2:	687b      	ldr	r3, [r7, #4]
    }
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	200001bc 	.word	0x200001bc
 8003bf4:	200001d8 	.word	0x200001d8

08003bf8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	613b      	str	r3, [r7, #16]
    }
 8003c1e:	bf00      	nop
 8003c20:	e7fe      	b.n	8003c20 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003c22:	f000 fe11 	bl	8004848 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003c26:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <xTaskGenericNotifyWait+0x108>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3354      	adds	r3, #84	; 0x54
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d022      	beq.n	8003c7e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003c38:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <xTaskGenericNotifyWait+0x108>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	3214      	adds	r2, #20
 8003c40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	43d2      	mvns	r2, r2
 8003c48:	4011      	ands	r1, r2
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	3214      	adds	r2, #20
 8003c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003c52:	4b2b      	ldr	r3, [pc, #172]	; (8003d00 <xTaskGenericNotifyWait+0x108>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	3354      	adds	r3, #84	; 0x54
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c66:	2101      	movs	r1, #1
 8003c68:	6a38      	ldr	r0, [r7, #32]
 8003c6a:	f000 f9bb 	bl	8003fe4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003c6e:	4b25      	ldr	r3, [pc, #148]	; (8003d04 <xTaskGenericNotifyWait+0x10c>)
 8003c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c7e:	f000 fe13 	bl	80048a8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003c82:	f000 fde1 	bl	8004848 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	2040      	movs	r0, #64	; 0x40
 8003c94:	f002 ff98 	bl	8006bc8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d007      	beq.n	8003cae <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003c9e:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <xTaskGenericNotifyWait+0x108>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	3214      	adds	r2, #20
 8003ca6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003cae:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <xTaskGenericNotifyWait+0x108>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3354      	adds	r3, #84	; 0x54
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d002      	beq.n	8003cc6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	e00e      	b.n	8003ce4 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <xTaskGenericNotifyWait+0x108>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	3214      	adds	r2, #20
 8003cce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	43d2      	mvns	r2, r2
 8003cd6:	4011      	ands	r1, r2
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	3214      	adds	r2, #20
 8003cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003ce4:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <xTaskGenericNotifyWait+0x108>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	3354      	adds	r3, #84	; 0x54
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003cf2:	f000 fdd9 	bl	80048a8 <vPortExitCritical>

        return xReturn;
 8003cf6:	697b      	ldr	r3, [r7, #20]
    }
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	200000d8 	.word	0x200000d8
 8003d04:	e000ed04 	.word	0xe000ed04

08003d08 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b094      	sub	sp, #80	; 0x50
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003d16:	2301      	movs	r3, #1
 8003d18:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003d4e:	bf00      	nop
 8003d50:	e7fe      	b.n	8003d50 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d52:	f000 fe63 	bl	8004a1c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003d5a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	623a      	str	r2, [r7, #32]
 8003d70:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003d72:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8003d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d006      	beq.n	8003d8a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	3214      	adds	r2, #20
 8003d82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d88:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003d8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4413      	add	r3, r2
 8003d90:	3354      	adds	r3, #84	; 0x54
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003d98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3354      	adds	r3, #84	; 0x54
 8003da0:	2202      	movs	r2, #2
 8003da2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d83b      	bhi.n	8003e22 <xTaskGenericNotifyFromISR+0x11a>
 8003daa:	a201      	add	r2, pc, #4	; (adr r2, 8003db0 <xTaskGenericNotifyFromISR+0xa8>)
 8003dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db0:	08003e41 	.word	0x08003e41
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003de1 	.word	0x08003de1
 8003dbc:	08003df9 	.word	0x08003df9
 8003dc0:	08003e07 	.word	0x08003e07
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	3214      	adds	r2, #20
 8003dca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	ea42 0103 	orr.w	r1, r2, r3
 8003dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	3214      	adds	r2, #20
 8003dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003dde:	e032      	b.n	8003e46 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	3214      	adds	r2, #20
 8003de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dea:	1c59      	adds	r1, r3, #1
 8003dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	3214      	adds	r2, #20
 8003df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003df6:	e026      	b.n	8003e46 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	3214      	adds	r2, #20
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003e04:	e01f      	b.n	8003e46 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003e06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d006      	beq.n	8003e1c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	3214      	adds	r2, #20
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003e1a:	e014      	b.n	8003e46 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8003e20:	e011      	b.n	8003e46 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003e22:	4b69      	ldr	r3, [pc, #420]	; (8003fc8 <xTaskGenericNotifyFromISR+0x2c0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00c      	beq.n	8003e44 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	61bb      	str	r3, [r7, #24]
    }
 8003e3c:	bf00      	nop
 8003e3e:	e7fe      	b.n	8003e3e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003e40:	bf00      	nop
 8003e42:	e000      	b.n	8003e46 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8003e44:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8003e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f003 fc23 	bl	8007694 <SEGGER_SYSVIEW_ShrinkId>
 8003e4e:	78f9      	ldrb	r1, [r7, #3]
 8003e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e54:	9201      	str	r2, [sp, #4]
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4601      	mov	r1, r0
 8003e5e:	203f      	movs	r0, #63	; 0x3f
 8003e60:	f002 ff44 	bl	8006cec <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003e64:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	f040 80a2 	bne.w	8003fb2 <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	617b      	str	r3, [r7, #20]
    }
 8003e88:	bf00      	nop
 8003e8a:	e7fe      	b.n	8003e8a <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e8c:	4b4f      	ldr	r3, [pc, #316]	; (8003fcc <xTaskGenericNotifyFromISR+0x2c4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d162      	bne.n	8003f5a <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	633b      	str	r3, [r7, #48]	; 0x30
 8003e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ea0:	68d2      	ldr	r2, [r2, #12]
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eaa:	6892      	ldr	r2, [r2, #8]
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d103      	bne.n	8003ec2 <xTaskGenericNotifyFromISR+0x1ba>
 8003eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	615a      	str	r2, [r3, #20]
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	1e5a      	subs	r2, r3, #1
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f003 fb9b 	bl	8007610 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	2201      	movs	r2, #1
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <xTaskGenericNotifyFromISR+0x2c8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	4a39      	ldr	r2, [pc, #228]	; (8003fd0 <xTaskGenericNotifyFromISR+0x2c8>)
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef0:	4938      	ldr	r1, [pc, #224]	; (8003fd4 <xTaskGenericNotifyFromISR+0x2cc>)
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	3304      	adds	r3, #4
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f0e:	60da      	str	r2, [r3, #12]
 8003f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f16:	3204      	adds	r2, #4
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f1c:	1d1a      	adds	r2, r3, #4
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	609a      	str	r2, [r3, #8]
 8003f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4a29      	ldr	r2, [pc, #164]	; (8003fd4 <xTaskGenericNotifyFromISR+0x2cc>)
 8003f30:	441a      	add	r2, r3
 8003f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f34:	615a      	str	r2, [r3, #20]
 8003f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3a:	4926      	ldr	r1, [pc, #152]	; (8003fd4 <xTaskGenericNotifyFromISR+0x2cc>)
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	1c59      	adds	r1, r3, #1
 8003f4a:	4822      	ldr	r0, [pc, #136]	; (8003fd4 <xTaskGenericNotifyFromISR+0x2cc>)
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4403      	add	r3, r0
 8003f56:	6019      	str	r1, [r3, #0]
 8003f58:	e01b      	b.n	8003f92 <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003f5a:	4b1f      	ldr	r3, [pc, #124]	; (8003fd8 <xTaskGenericNotifyFromISR+0x2d0>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f64:	61da      	str	r2, [r3, #28]
 8003f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f6c:	621a      	str	r2, [r3, #32]
 8003f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f74:	3218      	adds	r2, #24
 8003f76:	605a      	str	r2, [r3, #4]
 8003f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f7a:	f103 0218 	add.w	r2, r3, #24
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f80:	609a      	str	r2, [r3, #8]
 8003f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f84:	4a14      	ldr	r2, [pc, #80]	; (8003fd8 <xTaskGenericNotifyFromISR+0x2d0>)
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28
 8003f88:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <xTaskGenericNotifyFromISR+0x2d0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	4a12      	ldr	r2, [pc, #72]	; (8003fd8 <xTaskGenericNotifyFromISR+0x2d0>)
 8003f90:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <xTaskGenericNotifyFromISR+0x2d4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d908      	bls.n	8003fb2 <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003fac:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <xTaskGenericNotifyFromISR+0x2d8>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003fbc:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3748      	adds	r7, #72	; 0x48
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	200001b4 	.word	0x200001b4
 8003fcc:	200001d8 	.word	0x200001d8
 8003fd0:	200001b8 	.word	0x200001b8
 8003fd4:	200000dc 	.word	0x200000dc
 8003fd8:	20000170 	.word	0x20000170
 8003fdc:	200000d8 	.word	0x200000d8
 8003fe0:	200001c4 	.word	0x200001c4

08003fe4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003fee:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ff4:	4b35      	ldr	r3, [pc, #212]	; (80040cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe fab2 	bl	8002564 <uxListRemove>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10b      	bne.n	800401e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004006:	4b31      	ldr	r3, [pc, #196]	; (80040cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	2201      	movs	r2, #1
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43da      	mvns	r2, r3
 8004014:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <prvAddCurrentTaskToDelayedList+0xec>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4013      	ands	r3, r2
 800401a:	4a2d      	ldr	r2, [pc, #180]	; (80040d0 <prvAddCurrentTaskToDelayedList+0xec>)
 800401c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d124      	bne.n	8004070 <prvAddCurrentTaskToDelayedList+0x8c>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d021      	beq.n	8004070 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800402c:	4b29      	ldr	r3, [pc, #164]	; (80040d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	4b26      	ldr	r3, [pc, #152]	; (80040cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	609a      	str	r2, [r3, #8]
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	6892      	ldr	r2, [r2, #8]
 8004042:	60da      	str	r2, [r3, #12]
 8004044:	4b21      	ldr	r3, [pc, #132]	; (80040cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	3204      	adds	r2, #4
 800404e:	605a      	str	r2, [r3, #4]
 8004050:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	1d1a      	adds	r2, r3, #4
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	609a      	str	r2, [r3, #8]
 800405a:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1d      	ldr	r2, [pc, #116]	; (80040d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004060:	615a      	str	r2, [r3, #20]
 8004062:	4b1c      	ldr	r3, [pc, #112]	; (80040d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3301      	adds	r3, #1
 8004068:	4a1a      	ldr	r2, [pc, #104]	; (80040d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800406e:	e026      	b.n	80040be <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004078:	4b14      	ldr	r3, [pc, #80]	; (80040cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	429a      	cmp	r2, r3
 8004086:	d209      	bcs.n	800409c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004088:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3304      	adds	r3, #4
 8004092:	4619      	mov	r1, r3
 8004094:	4610      	mov	r0, r2
 8004096:	f7fe fa2c 	bl	80024f2 <vListInsert>
}
 800409a:	e010      	b.n	80040be <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800409c:	4b0f      	ldr	r3, [pc, #60]	; (80040dc <prvAddCurrentTaskToDelayedList+0xf8>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <prvAddCurrentTaskToDelayedList+0xe8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3304      	adds	r3, #4
 80040a6:	4619      	mov	r1, r3
 80040a8:	4610      	mov	r0, r2
 80040aa:	f7fe fa22 	bl	80024f2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80040ae:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d202      	bcs.n	80040be <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80040b8:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6013      	str	r3, [r2, #0]
}
 80040be:	bf00      	nop
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	200001b4 	.word	0x200001b4
 80040cc:	200000d8 	.word	0x200000d8
 80040d0:	200001b8 	.word	0x200001b8
 80040d4:	2000019c 	.word	0x2000019c
 80040d8:	2000016c 	.word	0x2000016c
 80040dc:	20000168 	.word	0x20000168
 80040e0:	200001d0 	.word	0x200001d0

080040e4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80040ee:	f000 fa47 	bl	8004580 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80040f2:	4b11      	ldr	r3, [pc, #68]	; (8004138 <xTimerCreateTimerTask+0x54>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00b      	beq.n	8004112 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80040fa:	4b10      	ldr	r3, [pc, #64]	; (800413c <xTimerCreateTimerTask+0x58>)
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	2302      	movs	r3, #2
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	2300      	movs	r3, #0
 8004104:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004108:	490d      	ldr	r1, [pc, #52]	; (8004140 <xTimerCreateTimerTask+0x5c>)
 800410a:	480e      	ldr	r0, [pc, #56]	; (8004144 <xTimerCreateTimerTask+0x60>)
 800410c:	f7fe fd84 	bl	8002c18 <xTaskCreate>
 8004110:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	603b      	str	r3, [r7, #0]
    }
 800412a:	bf00      	nop
 800412c:	e7fe      	b.n	800412c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800412e:	687b      	ldr	r3, [r7, #4]
    }
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	2000020c 	.word	0x2000020c
 800413c:	20000210 	.word	0x20000210
 8004140:	08007afc 	.word	0x08007afc
 8004144:	080041ed 	.word	0x080041ed

08004148 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004154:	e008      	b.n	8004168 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	4413      	add	r3, r2
 800415e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	699a      	ldr	r2, [r3, #24]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	18d1      	adds	r1, r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f8dd 	bl	8004334 <prvInsertTimerInActiveList>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1ea      	bne.n	8004156 <prvReloadTimer+0xe>
        }
    }
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <prvProcessExpiredTimer+0x5c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe f9dd 	bl	8002564 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff ffc3 	bl	8004148 <prvReloadTimer>
 80041c2:	e008      	b.n	80041d6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ca:	f023 0301 	bic.w	r3, r3, #1
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	4798      	blx	r3
    }
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000204 	.word	0x20000204

080041ec <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041f4:	f107 0308 	add.w	r3, r7, #8
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 f857 	bl	80042ac <prvGetNextExpireTime>
 80041fe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4619      	mov	r1, r3
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f803 	bl	8004210 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800420a:	f000 f8d5 	bl	80043b8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800420e:	e7f1      	b.n	80041f4 <prvTimerTask+0x8>

08004210 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800421a:	f7fe ff99 	bl	8003150 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800421e:	f107 0308 	add.w	r3, r7, #8
 8004222:	4618      	mov	r0, r3
 8004224:	f000 f866 	bl	80042f4 <prvSampleTimeNow>
 8004228:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d130      	bne.n	8004292 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <prvProcessTimerOrBlockTask+0x3c>
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	429a      	cmp	r2, r3
 800423c:	d806      	bhi.n	800424c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800423e:	f7fe ff95 	bl	800316c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004242:	68f9      	ldr	r1, [r7, #12]
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ffa1 	bl	800418c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800424a:	e024      	b.n	8004296 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d008      	beq.n	8004264 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004252:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <prvProcessTimerOrBlockTask+0x90>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <prvProcessTimerOrBlockTask+0x50>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <prvProcessTimerOrBlockTask+0x52>
 8004260:	2300      	movs	r3, #0
 8004262:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004264:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <prvProcessTimerOrBlockTask+0x94>)
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	4619      	mov	r1, r3
 8004272:	f7fe fc9d 	bl	8002bb0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004276:	f7fe ff79 	bl	800316c <xTaskResumeAll>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10a      	bne.n	8004296 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004280:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <prvProcessTimerOrBlockTask+0x98>)
 8004282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	f3bf 8f6f 	isb	sy
    }
 8004290:	e001      	b.n	8004296 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004292:	f7fe ff6b 	bl	800316c <xTaskResumeAll>
    }
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000208 	.word	0x20000208
 80042a4:	2000020c 	.word	0x2000020c
 80042a8:	e000ed04 	.word	0xe000ed04

080042ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <prvGetNextExpireTime+0x44>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <prvGetNextExpireTime+0x16>
 80042be:	2201      	movs	r2, #1
 80042c0:	e000      	b.n	80042c4 <prvGetNextExpireTime+0x18>
 80042c2:	2200      	movs	r2, #0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <prvGetNextExpireTime+0x44>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	e001      	b.n	80042e0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80042e0:	68fb      	ldr	r3, [r7, #12]
    }
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000204 	.word	0x20000204

080042f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80042fc:	f7ff f836 	bl	800336c <xTaskGetTickCount>
 8004300:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <prvSampleTimeNow+0x3c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	429a      	cmp	r2, r3
 800430a:	d205      	bcs.n	8004318 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800430c:	f000 f912 	bl	8004534 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	e002      	b.n	800431e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800431e:	4a04      	ldr	r2, [pc, #16]	; (8004330 <prvSampleTimeNow+0x3c>)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004324:	68fb      	ldr	r3, [r7, #12]
    }
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000214 	.word	0x20000214

08004334 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	429a      	cmp	r2, r3
 8004358:	d812      	bhi.n	8004380 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	1ad2      	subs	r2, r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	429a      	cmp	r2, r3
 8004366:	d302      	bcc.n	800436e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004368:	2301      	movs	r3, #1
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	e01b      	b.n	80043a6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800436e:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <prvInsertTimerInActiveList+0x7c>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3304      	adds	r3, #4
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f7fe f8ba 	bl	80024f2 <vListInsert>
 800437e:	e012      	b.n	80043a6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d206      	bcs.n	8004396 <prvInsertTimerInActiveList+0x62>
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d302      	bcc.n	8004396 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004390:	2301      	movs	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e007      	b.n	80043a6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <prvInsertTimerInActiveList+0x80>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3304      	adds	r3, #4
 800439e:	4619      	mov	r1, r3
 80043a0:	4610      	mov	r0, r2
 80043a2:	f7fe f8a6 	bl	80024f2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80043a6:	697b      	ldr	r3, [r7, #20]
    }
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000208 	.word	0x20000208
 80043b4:	20000204 	.word	0x20000204

080043b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043be:	e0a6      	b.n	800450e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f2c0 80a2 	blt.w	800450c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d004      	beq.n	80043de <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	3304      	adds	r3, #4
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fe f8c3 	bl	8002564 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043de:	1d3b      	adds	r3, r7, #4
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff ff87 	bl	80042f4 <prvSampleTimeNow>
 80043e6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	f200 808e 	bhi.w	800450e <prvProcessReceivedCommands+0x156>
 80043f2:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <prvProcessReceivedCommands+0x40>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	0800441d 	.word	0x0800441d
 80043fc:	0800441d 	.word	0x0800441d
 8004400:	08004485 	.word	0x08004485
 8004404:	08004499 	.word	0x08004499
 8004408:	080044e3 	.word	0x080044e3
 800440c:	0800441d 	.word	0x0800441d
 8004410:	0800441d 	.word	0x0800441d
 8004414:	08004485 	.word	0x08004485
 8004418:	08004499 	.word	0x08004499
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	b2da      	uxtb	r2, r3
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	18d1      	adds	r1, r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	69f8      	ldr	r0, [r7, #28]
 800443c:	f7ff ff7a 	bl	8004334 <prvInsertTimerInActiveList>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d063      	beq.n	800450e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d009      	beq.n	8004468 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	4413      	add	r3, r2
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4619      	mov	r1, r3
 8004460:	69f8      	ldr	r0, [r7, #28]
 8004462:	f7ff fe71 	bl	8004148 <prvReloadTimer>
 8004466:	e008      	b.n	800447a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	b2da      	uxtb	r2, r3
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	69f8      	ldr	r0, [r7, #28]
 8004480:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004482:	e044      	b.n	800450e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800448a:	f023 0301 	bic.w	r3, r3, #1
 800448e:	b2da      	uxtb	r2, r3
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004496:	e03a      	b.n	800450e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <prvProcessReceivedCommands+0x116>
        __asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	617b      	str	r3, [r7, #20]
    }
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	18d1      	adds	r1, r2, r3
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	69f8      	ldr	r0, [r7, #28]
 80044dc:	f7ff ff2a 	bl	8004334 <prvInsertTimerInActiveList>
                        break;
 80044e0:	e015      	b.n	800450e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d103      	bne.n	80044f8 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80044f0:	69f8      	ldr	r0, [r7, #28]
 80044f2:	f000 fb8d 	bl	8004c10 <vPortFree>
 80044f6:	e00a      	b.n	800450e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	b2da      	uxtb	r2, r3
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800450a:	e000      	b.n	800450e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800450c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <prvProcessReceivedCommands+0x178>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f107 0108 	add.w	r1, r7, #8
 8004516:	2200      	movs	r2, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f7fe f955 	bl	80027c8 <xQueueReceive>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	f47f af4d 	bne.w	80043c0 <prvProcessReceivedCommands+0x8>
        }
    }
 8004526:	bf00      	nop
 8004528:	bf00      	nop
 800452a:	3720      	adds	r7, #32
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	2000020c 	.word	0x2000020c

08004534 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800453a:	e009      	b.n	8004550 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800453c:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <prvSwitchTimerLists+0x44>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004546:	f04f 31ff 	mov.w	r1, #4294967295
 800454a:	6838      	ldr	r0, [r7, #0]
 800454c:	f7ff fe1e 	bl	800418c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004550:	4b09      	ldr	r3, [pc, #36]	; (8004578 <prvSwitchTimerLists+0x44>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800455a:	4b07      	ldr	r3, [pc, #28]	; (8004578 <prvSwitchTimerLists+0x44>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <prvSwitchTimerLists+0x48>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a04      	ldr	r2, [pc, #16]	; (8004578 <prvSwitchTimerLists+0x44>)
 8004566:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004568:	4a04      	ldr	r2, [pc, #16]	; (800457c <prvSwitchTimerLists+0x48>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6013      	str	r3, [r2, #0]
    }
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20000204 	.word	0x20000204
 800457c:	20000208 	.word	0x20000208

08004580 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004584:	f000 f960 	bl	8004848 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004588:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <prvCheckForValidListAndQueue+0x54>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d11d      	bne.n	80045cc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004590:	4811      	ldr	r0, [pc, #68]	; (80045d8 <prvCheckForValidListAndQueue+0x58>)
 8004592:	f7fd ff5d 	bl	8002450 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004596:	4811      	ldr	r0, [pc, #68]	; (80045dc <prvCheckForValidListAndQueue+0x5c>)
 8004598:	f7fd ff5a 	bl	8002450 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800459c:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <prvCheckForValidListAndQueue+0x60>)
 800459e:	4a0e      	ldr	r2, [pc, #56]	; (80045d8 <prvCheckForValidListAndQueue+0x58>)
 80045a0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <prvCheckForValidListAndQueue+0x64>)
 80045a4:	4a0d      	ldr	r2, [pc, #52]	; (80045dc <prvCheckForValidListAndQueue+0x5c>)
 80045a6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80045a8:	2200      	movs	r2, #0
 80045aa:	210c      	movs	r1, #12
 80045ac:	200a      	movs	r0, #10
 80045ae:	f7fe f893 	bl	80026d8 <xQueueGenericCreate>
 80045b2:	4603      	mov	r3, r0
 80045b4:	4a07      	ldr	r2, [pc, #28]	; (80045d4 <prvCheckForValidListAndQueue+0x54>)
 80045b6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <prvCheckForValidListAndQueue+0x54>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045c0:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <prvCheckForValidListAndQueue+0x54>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4908      	ldr	r1, [pc, #32]	; (80045e8 <prvCheckForValidListAndQueue+0x68>)
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe fa9c 	bl	8002b04 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80045cc:	f000 f96c 	bl	80048a8 <vPortExitCritical>
    }
 80045d0:	bf00      	nop
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	2000020c 	.word	0x2000020c
 80045d8:	200001dc 	.word	0x200001dc
 80045dc:	200001f0 	.word	0x200001f0
 80045e0:	20000204 	.word	0x20000204
 80045e4:	20000208 	.word	0x20000208
 80045e8:	08007b04 	.word	0x08007b04

080045ec <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3b04      	subs	r3, #4
 80045fc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004604:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3b04      	subs	r3, #4
 800460a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f023 0201 	bic.w	r2, r3, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3b04      	subs	r3, #4
 800461a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800461c:	4a0c      	ldr	r2, [pc, #48]	; (8004650 <pxPortInitialiseStack+0x64>)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3b14      	subs	r3, #20
 8004626:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3b04      	subs	r3, #4
 8004632:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f06f 0202 	mvn.w	r2, #2
 800463a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3b20      	subs	r3, #32
 8004640:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004642:	68fb      	ldr	r3, [r7, #12]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	08004655 	.word	0x08004655

08004654 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800465a:	2300      	movs	r3, #0
 800465c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800465e:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <prvTaskExitError+0x54>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004666:	d00a      	beq.n	800467e <prvTaskExitError+0x2a>
        __asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	60fb      	str	r3, [r7, #12]
    }
 800467a:	bf00      	nop
 800467c:	e7fe      	b.n	800467c <prvTaskExitError+0x28>
        __asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	60bb      	str	r3, [r7, #8]
    }
 8004690:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004692:	bf00      	nop
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0fc      	beq.n	8004694 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800469a:	bf00      	nop
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	20000010 	.word	0x20000010
 80046ac:	00000000 	.word	0x00000000

080046b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80046b0:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <pxCurrentTCBConst2>)
 80046b2:	6819      	ldr	r1, [r3, #0]
 80046b4:	6808      	ldr	r0, [r1, #0]
 80046b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ba:	f380 8809 	msr	PSP, r0
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f04f 0000 	mov.w	r0, #0
 80046c6:	f380 8811 	msr	BASEPRI, r0
 80046ca:	4770      	bx	lr
 80046cc:	f3af 8000 	nop.w

080046d0 <pxCurrentTCBConst2>:
 80046d0:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop

080046d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80046d8:	4808      	ldr	r0, [pc, #32]	; (80046fc <prvPortStartFirstTask+0x24>)
 80046da:	6800      	ldr	r0, [r0, #0]
 80046dc:	6800      	ldr	r0, [r0, #0]
 80046de:	f380 8808 	msr	MSP, r0
 80046e2:	f04f 0000 	mov.w	r0, #0
 80046e6:	f380 8814 	msr	CONTROL, r0
 80046ea:	b662      	cpsie	i
 80046ec:	b661      	cpsie	f
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	df00      	svc	0
 80046f8:	bf00      	nop
 80046fa:	0000      	.short	0x0000
 80046fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004700:	bf00      	nop
 8004702:	bf00      	nop

08004704 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800470a:	4b46      	ldr	r3, [pc, #280]	; (8004824 <xPortStartScheduler+0x120>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a46      	ldr	r2, [pc, #280]	; (8004828 <xPortStartScheduler+0x124>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d10a      	bne.n	800472a <xPortStartScheduler+0x26>
        __asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	613b      	str	r3, [r7, #16]
    }
 8004726:	bf00      	nop
 8004728:	e7fe      	b.n	8004728 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800472a:	4b3e      	ldr	r3, [pc, #248]	; (8004824 <xPortStartScheduler+0x120>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a3f      	ldr	r2, [pc, #252]	; (800482c <xPortStartScheduler+0x128>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d10a      	bne.n	800474a <xPortStartScheduler+0x46>
        __asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	60fb      	str	r3, [r7, #12]
    }
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800474a:	4b39      	ldr	r3, [pc, #228]	; (8004830 <xPortStartScheduler+0x12c>)
 800474c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	22ff      	movs	r2, #255	; 0xff
 800475a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800476c:	b2da      	uxtb	r2, r3
 800476e:	4b31      	ldr	r3, [pc, #196]	; (8004834 <xPortStartScheduler+0x130>)
 8004770:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004772:	4b31      	ldr	r3, [pc, #196]	; (8004838 <xPortStartScheduler+0x134>)
 8004774:	2207      	movs	r2, #7
 8004776:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004778:	e009      	b.n	800478e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800477a:	4b2f      	ldr	r3, [pc, #188]	; (8004838 <xPortStartScheduler+0x134>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3b01      	subs	r3, #1
 8004780:	4a2d      	ldr	r2, [pc, #180]	; (8004838 <xPortStartScheduler+0x134>)
 8004782:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	b2db      	uxtb	r3, r3
 800478c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b80      	cmp	r3, #128	; 0x80
 8004798:	d0ef      	beq.n	800477a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800479a:	4b27      	ldr	r3, [pc, #156]	; (8004838 <xPortStartScheduler+0x134>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f1c3 0307 	rsb	r3, r3, #7
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d00a      	beq.n	80047bc <xPortStartScheduler+0xb8>
        __asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	60bb      	str	r3, [r7, #8]
    }
 80047b8:	bf00      	nop
 80047ba:	e7fe      	b.n	80047ba <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047bc:	4b1e      	ldr	r3, [pc, #120]	; (8004838 <xPortStartScheduler+0x134>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	4a1d      	ldr	r2, [pc, #116]	; (8004838 <xPortStartScheduler+0x134>)
 80047c4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047c6:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <xPortStartScheduler+0x134>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047ce:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <xPortStartScheduler+0x134>)
 80047d0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80047da:	4b18      	ldr	r3, [pc, #96]	; (800483c <xPortStartScheduler+0x138>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a17      	ldr	r2, [pc, #92]	; (800483c <xPortStartScheduler+0x138>)
 80047e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <xPortStartScheduler+0x138>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a14      	ldr	r2, [pc, #80]	; (800483c <xPortStartScheduler+0x138>)
 80047ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80047f2:	f000 f8e3 	bl	80049bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <xPortStartScheduler+0x13c>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80047fc:	f000 f902 	bl	8004a04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004800:	4b10      	ldr	r3, [pc, #64]	; (8004844 <xPortStartScheduler+0x140>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a0f      	ldr	r2, [pc, #60]	; (8004844 <xPortStartScheduler+0x140>)
 8004806:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800480a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800480c:	f7ff ff64 	bl	80046d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004810:	f7fe fee8 	bl	80035e4 <vTaskSwitchContext>
    prvTaskExitError();
 8004814:	f7ff ff1e 	bl	8004654 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	e000ed00 	.word	0xe000ed00
 8004828:	410fc271 	.word	0x410fc271
 800482c:	410fc270 	.word	0x410fc270
 8004830:	e000e400 	.word	0xe000e400
 8004834:	20000218 	.word	0x20000218
 8004838:	2000021c 	.word	0x2000021c
 800483c:	e000ed20 	.word	0xe000ed20
 8004840:	20000010 	.word	0x20000010
 8004844:	e000ef34 	.word	0xe000ef34

08004848 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
        __asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	607b      	str	r3, [r7, #4]
    }
 8004860:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004862:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <vPortEnterCritical+0x58>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3301      	adds	r3, #1
 8004868:	4a0d      	ldr	r2, [pc, #52]	; (80048a0 <vPortEnterCritical+0x58>)
 800486a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <vPortEnterCritical+0x58>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d10f      	bne.n	8004894 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <vPortEnterCritical+0x5c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <vPortEnterCritical+0x4c>
        __asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	603b      	str	r3, [r7, #0]
    }
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <vPortEnterCritical+0x4a>
    }
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	20000010 	.word	0x20000010
 80048a4:	e000ed04 	.word	0xe000ed04

080048a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80048ae:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <vPortExitCritical+0x50>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <vPortExitCritical+0x24>
        __asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	607b      	str	r3, [r7, #4]
    }
 80048c8:	bf00      	nop
 80048ca:	e7fe      	b.n	80048ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80048cc:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <vPortExitCritical+0x50>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <vPortExitCritical+0x50>)
 80048d4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80048d6:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <vPortExitCritical+0x50>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d105      	bne.n	80048ea <vPortExitCritical+0x42>
 80048de:	2300      	movs	r3, #0
 80048e0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	f383 8811 	msr	BASEPRI, r3
    }
 80048e8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	20000010 	.word	0x20000010
 80048fc:	00000000 	.word	0x00000000

08004900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004900:	f3ef 8009 	mrs	r0, PSP
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	4b15      	ldr	r3, [pc, #84]	; (8004960 <pxCurrentTCBConst>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	f01e 0f10 	tst.w	lr, #16
 8004910:	bf08      	it	eq
 8004912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491a:	6010      	str	r0, [r2, #0]
 800491c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004920:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004924:	f380 8811 	msr	BASEPRI, r0
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f7fe fe58 	bl	80035e4 <vTaskSwitchContext>
 8004934:	f04f 0000 	mov.w	r0, #0
 8004938:	f380 8811 	msr	BASEPRI, r0
 800493c:	bc09      	pop	{r0, r3}
 800493e:	6819      	ldr	r1, [r3, #0]
 8004940:	6808      	ldr	r0, [r1, #0]
 8004942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004946:	f01e 0f10 	tst.w	lr, #16
 800494a:	bf08      	it	eq
 800494c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004950:	f380 8809 	msr	PSP, r0
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	f3af 8000 	nop.w

08004960 <pxCurrentTCBConst>:
 8004960:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop

08004968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
        __asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	607b      	str	r3, [r7, #4]
    }
 8004980:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004982:	f002 fd2b 	bl	80073dc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004986:	f7fe fd13 	bl	80033b0 <xTaskIncrementTick>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d006      	beq.n	800499e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004990:	f002 fd82 	bl	8007498 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004994:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <SysTick_Handler+0x50>)
 8004996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e001      	b.n	80049a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800499e:	f002 fd5f 	bl	8007460 <SEGGER_SYSVIEW_RecordExitISR>
 80049a2:	2300      	movs	r3, #0
 80049a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	f383 8811 	msr	BASEPRI, r3
    }
 80049ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <vPortSetupTimerInterrupt+0x34>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049c6:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <vPortSetupTimerInterrupt+0x38>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <vPortSetupTimerInterrupt+0x3c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <vPortSetupTimerInterrupt+0x40>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	099b      	lsrs	r3, r3, #6
 80049d8:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <vPortSetupTimerInterrupt+0x44>)
 80049da:	3b01      	subs	r3, #1
 80049dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049de:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <vPortSetupTimerInterrupt+0x34>)
 80049e0:	2207      	movs	r2, #7
 80049e2:	601a      	str	r2, [r3, #0]
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	e000e010 	.word	0xe000e010
 80049f4:	e000e018 	.word	0xe000e018
 80049f8:	20000000 	.word	0x20000000
 80049fc:	10624dd3 	.word	0x10624dd3
 8004a00:	e000e014 	.word	0xe000e014

08004a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004a04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a14 <vPortEnableVFP+0x10>
 8004a08:	6801      	ldr	r1, [r0, #0]
 8004a0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a0e:	6001      	str	r1, [r0, #0]
 8004a10:	4770      	bx	lr
 8004a12:	0000      	.short	0x0000
 8004a14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004a18:	bf00      	nop
 8004a1a:	bf00      	nop

08004a1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004a22:	f3ef 8305 	mrs	r3, IPSR
 8004a26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b0f      	cmp	r3, #15
 8004a2c:	d914      	bls.n	8004a58 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a2e:	4a17      	ldr	r2, [pc, #92]	; (8004a8c <vPortValidateInterruptPriority+0x70>)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a38:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <vPortValidateInterruptPriority+0x74>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	7afa      	ldrb	r2, [r7, #11]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d20a      	bcs.n	8004a58 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	607b      	str	r3, [r7, #4]
    }
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a58:	4b0e      	ldr	r3, [pc, #56]	; (8004a94 <vPortValidateInterruptPriority+0x78>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a60:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <vPortValidateInterruptPriority+0x7c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d90a      	bls.n	8004a7e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	603b      	str	r3, [r7, #0]
    }
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <vPortValidateInterruptPriority+0x60>
    }
 8004a7e:	bf00      	nop
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	e000e3f0 	.word	0xe000e3f0
 8004a90:	20000218 	.word	0x20000218
 8004a94:	e000ed0c 	.word	0xe000ed0c
 8004a98:	2000021c 	.word	0x2000021c

08004a9c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08a      	sub	sp, #40	; 0x28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004aa8:	f7fe fb52 	bl	8003150 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004aac:	4b53      	ldr	r3, [pc, #332]	; (8004bfc <pvPortMalloc+0x160>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004ab4:	f000 f908 	bl	8004cc8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d012      	beq.n	8004ae4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004abe:	2208      	movs	r2, #8
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	3308      	adds	r3, #8
 8004aca:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d804      	bhi.n	8004ae0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	4413      	add	r3, r2
 8004adc:	607b      	str	r3, [r7, #4]
 8004ade:	e001      	b.n	8004ae4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	db70      	blt.n	8004bcc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d06d      	beq.n	8004bcc <pvPortMalloc+0x130>
 8004af0:	4b43      	ldr	r3, [pc, #268]	; (8004c00 <pvPortMalloc+0x164>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d868      	bhi.n	8004bcc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004afa:	4b42      	ldr	r3, [pc, #264]	; (8004c04 <pvPortMalloc+0x168>)
 8004afc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004afe:	4b41      	ldr	r3, [pc, #260]	; (8004c04 <pvPortMalloc+0x168>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b04:	e004      	b.n	8004b10 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d903      	bls.n	8004b22 <pvPortMalloc+0x86>
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f1      	bne.n	8004b06 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004b22:	4b36      	ldr	r3, [pc, #216]	; (8004bfc <pvPortMalloc+0x160>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d04f      	beq.n	8004bcc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2208      	movs	r2, #8
 8004b32:	4413      	add	r3, r2
 8004b34:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	1ad2      	subs	r2, r2, r3
 8004b46:	2308      	movs	r3, #8
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d91f      	bls.n	8004b8e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4413      	add	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <pvPortMalloc+0xda>
        __asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	613b      	str	r3, [r7, #16]
    }
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	1ad2      	subs	r2, r2, r3
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b88:	6978      	ldr	r0, [r7, #20]
 8004b8a:	f000 f8f9 	bl	8004d80 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b8e:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <pvPortMalloc+0x164>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <pvPortMalloc+0x164>)
 8004b9a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b9c:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <pvPortMalloc+0x164>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	4b19      	ldr	r3, [pc, #100]	; (8004c08 <pvPortMalloc+0x16c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d203      	bcs.n	8004bb0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ba8:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <pvPortMalloc+0x164>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <pvPortMalloc+0x16c>)
 8004bae:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <pvPortMalloc+0x170>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	4a10      	ldr	r2, [pc, #64]	; (8004c0c <pvPortMalloc+0x170>)
 8004bca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004bcc:	f7fe face 	bl	800316c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <pvPortMalloc+0x154>
        __asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	60fb      	str	r3, [r7, #12]
    }
 8004bec:	bf00      	nop
 8004bee:	e7fe      	b.n	8004bee <pvPortMalloc+0x152>
    return pvReturn;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3728      	adds	r7, #40	; 0x28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20012e28 	.word	0x20012e28
 8004c00:	20012e2c 	.word	0x20012e2c
 8004c04:	20012e20 	.word	0x20012e20
 8004c08:	20012e30 	.word	0x20012e30
 8004c0c:	20012e34 	.word	0x20012e34

08004c10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d049      	beq.n	8004cb6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004c22:	2308      	movs	r3, #8
 8004c24:	425b      	negs	r3, r3
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4413      	add	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	db0a      	blt.n	8004c4e <vPortFree+0x3e>
        __asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	60fb      	str	r3, [r7, #12]
    }
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <vPortFree+0x5c>
        __asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	60bb      	str	r3, [r7, #8]
    }
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	0fdb      	lsrs	r3, r3, #31
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01c      	beq.n	8004cb6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d118      	bne.n	8004cb6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004c90:	f7fe fa5e 	bl	8003150 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <vPortFree+0xb0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	4a08      	ldr	r2, [pc, #32]	; (8004cc0 <vPortFree+0xb0>)
 8004ca0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ca2:	6938      	ldr	r0, [r7, #16]
 8004ca4:	f000 f86c 	bl	8004d80 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <vPortFree+0xb4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3301      	adds	r3, #1
 8004cae:	4a05      	ldr	r2, [pc, #20]	; (8004cc4 <vPortFree+0xb4>)
 8004cb0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004cb2:	f7fe fa5b 	bl	800316c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004cb6:	bf00      	nop
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20012e2c 	.word	0x20012e2c
 8004cc4:	20012e38 	.word	0x20012e38

08004cc8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cce:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004cd2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004cd4:	4b25      	ldr	r3, [pc, #148]	; (8004d6c <prvHeapInit+0xa4>)
 8004cd6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00c      	beq.n	8004cfc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3307      	adds	r3, #7
 8004ce6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0307 	bic.w	r3, r3, #7
 8004cee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	4a1d      	ldr	r2, [pc, #116]	; (8004d6c <prvHeapInit+0xa4>)
 8004cf8:	4413      	add	r3, r2
 8004cfa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d00:	4a1b      	ldr	r2, [pc, #108]	; (8004d70 <prvHeapInit+0xa8>)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004d06:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <prvHeapInit+0xa8>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	4413      	add	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004d14:	2208      	movs	r2, #8
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0307 	bic.w	r3, r3, #7
 8004d22:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <prvHeapInit+0xac>)
 8004d28:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004d2a:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <prvHeapInit+0xac>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004d32:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <prvHeapInit+0xac>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2200      	movs	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	1ad2      	subs	r2, r2, r3
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d48:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <prvHeapInit+0xac>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	4a08      	ldr	r2, [pc, #32]	; (8004d78 <prvHeapInit+0xb0>)
 8004d56:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4a07      	ldr	r2, [pc, #28]	; (8004d7c <prvHeapInit+0xb4>)
 8004d5e:	6013      	str	r3, [r2, #0]
}
 8004d60:	bf00      	nop
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	20000220 	.word	0x20000220
 8004d70:	20012e20 	.word	0x20012e20
 8004d74:	20012e28 	.word	0x20012e28
 8004d78:	20012e30 	.word	0x20012e30
 8004d7c:	20012e2c 	.word	0x20012e2c

08004d80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d88:	4b28      	ldr	r3, [pc, #160]	; (8004e2c <prvInsertBlockIntoFreeList+0xac>)
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	e002      	b.n	8004d94 <prvInsertBlockIntoFreeList+0x14>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d8f7      	bhi.n	8004d8e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	4413      	add	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d108      	bne.n	8004dc2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	441a      	add	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	441a      	add	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d118      	bne.n	8004e08 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <prvInsertBlockIntoFreeList+0xb0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d00d      	beq.n	8004dfe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	441a      	add	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e008      	b.n	8004e10 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <prvInsertBlockIntoFreeList+0xb0>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	e003      	b.n	8004e10 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d002      	beq.n	8004e1e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e1e:	bf00      	nop
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20012e20 	.word	0x20012e20
 8004e30:	20012e28 	.word	0x20012e28

08004e34 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004e38:	4803      	ldr	r0, [pc, #12]	; (8004e48 <_cbSendSystemDesc+0x14>)
 8004e3a:	f002 fa79 	bl	8007330 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004e3e:	4803      	ldr	r0, [pc, #12]	; (8004e4c <_cbSendSystemDesc+0x18>)
 8004e40:	f002 fa76 	bl	8007330 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004e44:	bf00      	nop
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	08007b0c 	.word	0x08007b0c
 8004e4c:	08007b4c 	.word	0x08007b4c

08004e50 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004e54:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <SEGGER_SYSVIEW_Conf+0x20>)
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <SEGGER_SYSVIEW_Conf+0x20>)
 8004e5a:	6819      	ldr	r1, [r3, #0]
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <SEGGER_SYSVIEW_Conf+0x24>)
 8004e5e:	4a06      	ldr	r2, [pc, #24]	; (8004e78 <SEGGER_SYSVIEW_Conf+0x28>)
 8004e60:	f001 fd34 	bl	80068cc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004e64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004e68:	f001 fd74 	bl	8006954 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004e6c:	bf00      	nop
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20000000 	.word	0x20000000
 8004e74:	08004e35 	.word	0x08004e35
 8004e78:	08007be8 	.word	0x08007be8

08004e7c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004e82:	2300      	movs	r3, #0
 8004e84:	607b      	str	r3, [r7, #4]
 8004e86:	e033      	b.n	8004ef0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004e88:	491e      	ldr	r1, [pc, #120]	; (8004f04 <_cbSendTaskList+0x88>)
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	491a      	ldr	r1, [pc, #104]	; (8004f04 <_cbSendTaskList+0x88>)
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	6819      	ldr	r1, [r3, #0]
 8004eaa:	4c16      	ldr	r4, [pc, #88]	; (8004f04 <_cbSendTaskList+0x88>)
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4423      	add	r3, r4
 8004eb8:	3308      	adds	r3, #8
 8004eba:	681c      	ldr	r4, [r3, #0]
 8004ebc:	4d11      	ldr	r5, [pc, #68]	; (8004f04 <_cbSendTaskList+0x88>)
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	442b      	add	r3, r5
 8004eca:	330c      	adds	r3, #12
 8004ecc:	681d      	ldr	r5, [r3, #0]
 8004ece:	4e0d      	ldr	r6, [pc, #52]	; (8004f04 <_cbSendTaskList+0x88>)
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4433      	add	r3, r6
 8004edc:	3310      	adds	r3, #16
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	462b      	mov	r3, r5
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	f000 f979 	bl	80051dc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3301      	adds	r3, #1
 8004eee:	607b      	str	r3, [r7, #4]
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <_cbSendTaskList+0x8c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d3c6      	bcc.n	8004e88 <_cbSendTaskList+0xc>
  }
}
 8004efa:	bf00      	nop
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f04:	20012e3c 	.word	0x20012e3c
 8004f08:	20012edc 	.word	0x20012edc

08004f0c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004f14:	f7fe fa3a 	bl	800338c <xTaskGetTickCountFromISR>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	469a      	mov	sl, r3
 8004f1e:	4693      	mov	fp, r2
 8004f20:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004f24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	f04f 0a00 	mov.w	sl, #0
 8004f30:	f04f 0b00 	mov.w	fp, #0
 8004f34:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004f38:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004f3c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004f40:	4652      	mov	r2, sl
 8004f42:	465b      	mov	r3, fp
 8004f44:	1a14      	subs	r4, r2, r0
 8004f46:	eb63 0501 	sbc.w	r5, r3, r1
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	00ab      	lsls	r3, r5, #2
 8004f54:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004f58:	00a2      	lsls	r2, r4, #2
 8004f5a:	4614      	mov	r4, r2
 8004f5c:	461d      	mov	r5, r3
 8004f5e:	eb14 0800 	adds.w	r8, r4, r0
 8004f62:	eb45 0901 	adc.w	r9, r5, r1
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f7a:	4690      	mov	r8, r2
 8004f7c:	4699      	mov	r9, r3
 8004f7e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004f82:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004f94 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004fa2:	2205      	movs	r2, #5
 8004fa4:	492b      	ldr	r1, [pc, #172]	; (8005054 <SYSVIEW_AddTask+0xc0>)
 8004fa6:	68b8      	ldr	r0, [r7, #8]
 8004fa8:	f002 fd2c 	bl	8007a04 <memcmp>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d04b      	beq.n	800504a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004fb2:	4b29      	ldr	r3, [pc, #164]	; (8005058 <SYSVIEW_AddTask+0xc4>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b07      	cmp	r3, #7
 8004fb8:	d903      	bls.n	8004fc2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004fba:	4828      	ldr	r0, [pc, #160]	; (800505c <SYSVIEW_AddTask+0xc8>)
 8004fbc:	f002 fc74 	bl	80078a8 <SEGGER_SYSVIEW_Warn>
    return;
 8004fc0:	e044      	b.n	800504c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004fc2:	4b25      	ldr	r3, [pc, #148]	; (8005058 <SYSVIEW_AddTask+0xc4>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4926      	ldr	r1, [pc, #152]	; (8005060 <SYSVIEW_AddTask+0xcc>)
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004fd6:	4b20      	ldr	r3, [pc, #128]	; (8005058 <SYSVIEW_AddTask+0xc4>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4921      	ldr	r1, [pc, #132]	; (8005060 <SYSVIEW_AddTask+0xcc>)
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004fec:	4b1a      	ldr	r3, [pc, #104]	; (8005058 <SYSVIEW_AddTask+0xc4>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	491b      	ldr	r1, [pc, #108]	; (8005060 <SYSVIEW_AddTask+0xcc>)
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005002:	4b15      	ldr	r3, [pc, #84]	; (8005058 <SYSVIEW_AddTask+0xc4>)
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4916      	ldr	r1, [pc, #88]	; (8005060 <SYSVIEW_AddTask+0xcc>)
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	330c      	adds	r3, #12
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005018:	4b0f      	ldr	r3, [pc, #60]	; (8005058 <SYSVIEW_AddTask+0xc4>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4910      	ldr	r1, [pc, #64]	; (8005060 <SYSVIEW_AddTask+0xcc>)
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	3310      	adds	r3, #16
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800502e:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <SYSVIEW_AddTask+0xc4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3301      	adds	r3, #1
 8005034:	4a08      	ldr	r2, [pc, #32]	; (8005058 <SYSVIEW_AddTask+0xc4>)
 8005036:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f8ca 	bl	80051dc <SYSVIEW_SendTaskInfo>
 8005048:	e000      	b.n	800504c <SYSVIEW_AddTask+0xb8>
    return;
 800504a:	bf00      	nop

}
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	08007b5c 	.word	0x08007b5c
 8005058:	20012edc 	.word	0x20012edc
 800505c:	08007b64 	.word	0x08007b64
 8005060:	20012e3c 	.word	0x20012e3c

08005064 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800506c:	4b59      	ldr	r3, [pc, #356]	; (80051d4 <SYSVIEW_DeleteTask+0x170>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80ab 	beq.w	80051cc <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	e00d      	b.n	8005098 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800507c:	4956      	ldr	r1, [pc, #344]	; (80051d8 <SYSVIEW_DeleteTask+0x174>)
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	429a      	cmp	r2, r3
 8005090:	d008      	beq.n	80050a4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3301      	adds	r3, #1
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	4b4e      	ldr	r3, [pc, #312]	; (80051d4 <SYSVIEW_DeleteTask+0x170>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d3ec      	bcc.n	800507c <SYSVIEW_DeleteTask+0x18>
 80050a2:	e000      	b.n	80050a6 <SYSVIEW_DeleteTask+0x42>
      break;
 80050a4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80050a6:	4b4b      	ldr	r3, [pc, #300]	; (80051d4 <SYSVIEW_DeleteTask+0x170>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d111      	bne.n	80050d6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4a46      	ldr	r2, [pc, #280]	; (80051d8 <SYSVIEW_DeleteTask+0x174>)
 80050be:	4413      	add	r3, r2
 80050c0:	2214      	movs	r2, #20
 80050c2:	2100      	movs	r1, #0
 80050c4:	4618      	mov	r0, r3
 80050c6:	f002 fcbb 	bl	8007a40 <memset>
    _NumTasks--;
 80050ca:	4b42      	ldr	r3, [pc, #264]	; (80051d4 <SYSVIEW_DeleteTask+0x170>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	4a40      	ldr	r2, [pc, #256]	; (80051d4 <SYSVIEW_DeleteTask+0x170>)
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	e07b      	b.n	80051ce <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80050d6:	4b3f      	ldr	r3, [pc, #252]	; (80051d4 <SYSVIEW_DeleteTask+0x170>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d276      	bcs.n	80051ce <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80050e0:	4b3c      	ldr	r3, [pc, #240]	; (80051d4 <SYSVIEW_DeleteTask+0x170>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	1e5a      	subs	r2, r3, #1
 80050e6:	493c      	ldr	r1, [pc, #240]	; (80051d8 <SYSVIEW_DeleteTask+0x174>)
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	6819      	ldr	r1, [r3, #0]
 80050f4:	4838      	ldr	r0, [pc, #224]	; (80051d8 <SYSVIEW_DeleteTask+0x174>)
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4403      	add	r3, r0
 8005102:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005104:	4b33      	ldr	r3, [pc, #204]	; (80051d4 <SYSVIEW_DeleteTask+0x170>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	1e5a      	subs	r2, r3, #1
 800510a:	4933      	ldr	r1, [pc, #204]	; (80051d8 <SYSVIEW_DeleteTask+0x174>)
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	3304      	adds	r3, #4
 8005118:	6819      	ldr	r1, [r3, #0]
 800511a:	482f      	ldr	r0, [pc, #188]	; (80051d8 <SYSVIEW_DeleteTask+0x174>)
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4403      	add	r3, r0
 8005128:	3304      	adds	r3, #4
 800512a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800512c:	4b29      	ldr	r3, [pc, #164]	; (80051d4 <SYSVIEW_DeleteTask+0x170>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	1e5a      	subs	r2, r3, #1
 8005132:	4929      	ldr	r1, [pc, #164]	; (80051d8 <SYSVIEW_DeleteTask+0x174>)
 8005134:	4613      	mov	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	3308      	adds	r3, #8
 8005140:	6819      	ldr	r1, [r3, #0]
 8005142:	4825      	ldr	r0, [pc, #148]	; (80051d8 <SYSVIEW_DeleteTask+0x174>)
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4403      	add	r3, r0
 8005150:	3308      	adds	r3, #8
 8005152:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005154:	4b1f      	ldr	r3, [pc, #124]	; (80051d4 <SYSVIEW_DeleteTask+0x170>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	1e5a      	subs	r2, r3, #1
 800515a:	491f      	ldr	r1, [pc, #124]	; (80051d8 <SYSVIEW_DeleteTask+0x174>)
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	330c      	adds	r3, #12
 8005168:	6819      	ldr	r1, [r3, #0]
 800516a:	481b      	ldr	r0, [pc, #108]	; (80051d8 <SYSVIEW_DeleteTask+0x174>)
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4613      	mov	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4403      	add	r3, r0
 8005178:	330c      	adds	r3, #12
 800517a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800517c:	4b15      	ldr	r3, [pc, #84]	; (80051d4 <SYSVIEW_DeleteTask+0x170>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	1e5a      	subs	r2, r3, #1
 8005182:	4915      	ldr	r1, [pc, #84]	; (80051d8 <SYSVIEW_DeleteTask+0x174>)
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	3310      	adds	r3, #16
 8005190:	6819      	ldr	r1, [r3, #0]
 8005192:	4811      	ldr	r0, [pc, #68]	; (80051d8 <SYSVIEW_DeleteTask+0x174>)
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4403      	add	r3, r0
 80051a0:	3310      	adds	r3, #16
 80051a2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80051a4:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <SYSVIEW_DeleteTask+0x170>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	1e5a      	subs	r2, r3, #1
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4a09      	ldr	r2, [pc, #36]	; (80051d8 <SYSVIEW_DeleteTask+0x174>)
 80051b4:	4413      	add	r3, r2
 80051b6:	2214      	movs	r2, #20
 80051b8:	2100      	movs	r1, #0
 80051ba:	4618      	mov	r0, r3
 80051bc:	f002 fc40 	bl	8007a40 <memset>
    _NumTasks--;
 80051c0:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <SYSVIEW_DeleteTask+0x170>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	4a03      	ldr	r2, [pc, #12]	; (80051d4 <SYSVIEW_DeleteTask+0x170>)
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	e000      	b.n	80051ce <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80051cc:	bf00      	nop
  }
}
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20012edc 	.word	0x20012edc
 80051d8:	20012e3c 	.word	0x20012e3c

080051dc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	; 0x28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80051ea:	f107 0314 	add.w	r3, r7, #20
 80051ee:	2214      	movs	r2, #20
 80051f0:	2100      	movs	r1, #0
 80051f2:	4618      	mov	r0, r3
 80051f4:	f002 fc24 	bl	8007a40 <memset>
  TaskInfo.TaskID     = TaskID;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800520c:	f107 0314 	add.w	r3, r7, #20
 8005210:	4618      	mov	r0, r3
 8005212:	f001 ff95 	bl	8007140 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005216:	bf00      	nop
 8005218:	3728      	adds	r7, #40	; 0x28
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <__NVIC_EnableIRQ>:
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800522a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522e:	2b00      	cmp	r3, #0
 8005230:	db0b      	blt.n	800524a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	f003 021f 	and.w	r2, r3, #31
 8005238:	4907      	ldr	r1, [pc, #28]	; (8005258 <__NVIC_EnableIRQ+0x38>)
 800523a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	2001      	movs	r0, #1
 8005242:	fa00 f202 	lsl.w	r2, r0, r2
 8005246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	e000e100 	.word	0xe000e100

0800525c <__NVIC_SetPriority>:
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	6039      	str	r1, [r7, #0]
 8005266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526c:	2b00      	cmp	r3, #0
 800526e:	db0a      	blt.n	8005286 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	b2da      	uxtb	r2, r3
 8005274:	490c      	ldr	r1, [pc, #48]	; (80052a8 <__NVIC_SetPriority+0x4c>)
 8005276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800527a:	0112      	lsls	r2, r2, #4
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	440b      	add	r3, r1
 8005280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005284:	e00a      	b.n	800529c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	4908      	ldr	r1, [pc, #32]	; (80052ac <__NVIC_SetPriority+0x50>)
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	3b04      	subs	r3, #4
 8005294:	0112      	lsls	r2, r2, #4
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	440b      	add	r3, r1
 800529a:	761a      	strb	r2, [r3, #24]
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	e000e100 	.word	0xe000e100
 80052ac:	e000ed00 	.word	0xe000ed00

080052b0 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80052b6:	f002 fb53 	bl	8007960 <SEGGER_SYSVIEW_IsStarted>
 80052ba:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80052c2:	f001 fdc1 	bl	8006e48 <SEGGER_SYSVIEW_Start>
  }
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	4603      	mov	r3, r0
 80052d8:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <_cbOnUARTRx+0x3c>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d806      	bhi.n	80052f0 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80052e2:	4b0a      	ldr	r3, [pc, #40]	; (800530c <_cbOnUARTRx+0x3c>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	3301      	adds	r3, #1
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	4b08      	ldr	r3, [pc, #32]	; (800530c <_cbOnUARTRx+0x3c>)
 80052ec:	701a      	strb	r2, [r3, #0]
    goto Done;
 80052ee:	e009      	b.n	8005304 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80052f0:	f7ff ffde 	bl	80052b0 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80052f4:	4b05      	ldr	r3, [pc, #20]	; (800530c <_cbOnUARTRx+0x3c>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	4618      	mov	r0, r3
 80052fa:	1dfb      	adds	r3, r7, #7
 80052fc:	2201      	movs	r2, #1
 80052fe:	4619      	mov	r1, r3
 8005300:	f000 fb9c 	bl	8005a3c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005304:	bf00      	nop
}
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20000014 	.word	0x20000014

08005310 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005318:	4b14      	ldr	r3, [pc, #80]	; (800536c <_cbOnUARTTx+0x5c>)
 800531a:	785b      	ldrb	r3, [r3, #1]
 800531c:	2b03      	cmp	r3, #3
 800531e:	d80f      	bhi.n	8005340 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005320:	4b12      	ldr	r3, [pc, #72]	; (800536c <_cbOnUARTTx+0x5c>)
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	461a      	mov	r2, r3
 8005326:	4b12      	ldr	r3, [pc, #72]	; (8005370 <_cbOnUARTTx+0x60>)
 8005328:	5c9a      	ldrb	r2, [r3, r2]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800532e:	4b0f      	ldr	r3, [pc, #60]	; (800536c <_cbOnUARTTx+0x5c>)
 8005330:	785b      	ldrb	r3, [r3, #1]
 8005332:	3301      	adds	r3, #1
 8005334:	b2da      	uxtb	r2, r3
 8005336:	4b0d      	ldr	r3, [pc, #52]	; (800536c <_cbOnUARTTx+0x5c>)
 8005338:	705a      	strb	r2, [r3, #1]
    r = 1;
 800533a:	2301      	movs	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
    goto Done;
 800533e:	e00f      	b.n	8005360 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005340:	4b0a      	ldr	r3, [pc, #40]	; (800536c <_cbOnUARTTx+0x5c>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fa1b 	bl	8005784 <SEGGER_RTT_ReadUpBufferNoLock>
 800534e:	4603      	mov	r3, r0
 8005350:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	da02      	bge.n	800535e <_cbOnUARTTx+0x4e>
    r = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e000      	b.n	8005360 <_cbOnUARTTx+0x50>
  }
Done:
 800535e:	bf00      	nop
  return r;
 8005360:	68fb      	ldr	r3, [r7, #12]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000014 	.word	0x20000014
 8005370:	08007bf0 	.word	0x08007bf0

08005374 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800537c:	4a04      	ldr	r2, [pc, #16]	; (8005390 <SEGGER_UART_init+0x1c>)
 800537e:	4905      	ldr	r1, [pc, #20]	; (8005394 <SEGGER_UART_init+0x20>)
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f863 	bl	800544c <HIF_UART_Init>
}
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	080052d1 	.word	0x080052d1
 8005394:	08005311 	.word	0x08005311

08005398 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800539e:	4b1e      	ldr	r3, [pc, #120]	; (8005418 <USART2_IRQHandler+0x80>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d011      	beq.n	80053d2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80053ae:	4b1b      	ldr	r3, [pc, #108]	; (800541c <USART2_IRQHandler+0x84>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f003 030b 	and.w	r3, r3, #11
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d108      	bne.n	80053d2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80053c0:	4b17      	ldr	r3, [pc, #92]	; (8005420 <USART2_IRQHandler+0x88>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d004      	beq.n	80053d2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80053c8:	4b15      	ldr	r3, [pc, #84]	; (8005420 <USART2_IRQHandler+0x88>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	79fa      	ldrb	r2, [r7, #7]
 80053ce:	4610      	mov	r0, r2
 80053d0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01a      	beq.n	8005412 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80053dc:	4b11      	ldr	r3, [pc, #68]	; (8005424 <USART2_IRQHandler+0x8c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d015      	beq.n	8005410 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80053e4:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <USART2_IRQHandler+0x8c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	1dfa      	adds	r2, r7, #7
 80053ea:	4610      	mov	r0, r2
 80053ec:	4798      	blx	r3
 80053ee:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <USART2_IRQHandler+0x90>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a0b      	ldr	r2, [pc, #44]	; (8005428 <USART2_IRQHandler+0x90>)
 80053fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	e006      	b.n	8005412 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <USART2_IRQHandler+0x80>)
 8005406:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005408:	79fa      	ldrb	r2, [r7, #7]
 800540a:	4b04      	ldr	r3, [pc, #16]	; (800541c <USART2_IRQHandler+0x84>)
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e000      	b.n	8005412 <USART2_IRQHandler+0x7a>
      return;
 8005410:	bf00      	nop
    }
  }
}
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40004400 	.word	0x40004400
 800541c:	40004404 	.word	0x40004404
 8005420:	20012ee0 	.word	0x20012ee0
 8005424:	20012ee4 	.word	0x20012ee4
 8005428:	4000440c 	.word	0x4000440c

0800542c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a04      	ldr	r2, [pc, #16]	; (8005448 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543a:	6013      	str	r3, [r2, #0]
}
 800543c:	bf00      	nop
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	4000440c 	.word	0x4000440c

0800544c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005458:	4b2e      	ldr	r3, [pc, #184]	; (8005514 <HIF_UART_Init+0xc8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a2d      	ldr	r2, [pc, #180]	; (8005514 <HIF_UART_Init+0xc8>)
 800545e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005462:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005464:	4b2c      	ldr	r3, [pc, #176]	; (8005518 <HIF_UART_Init+0xcc>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a2b      	ldr	r2, [pc, #172]	; (8005518 <HIF_UART_Init+0xcc>)
 800546a:	f043 0301 	orr.w	r3, r3, #1
 800546e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005470:	4b2a      	ldr	r3, [pc, #168]	; (800551c <HIF_UART_Init+0xd0>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800547c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005484:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005486:	4a25      	ldr	r2, [pc, #148]	; (800551c <HIF_UART_Init+0xd0>)
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800548c:	4b24      	ldr	r3, [pc, #144]	; (8005520 <HIF_UART_Init+0xd4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005498:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80054a0:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80054a2:	4a1f      	ldr	r2, [pc, #124]	; (8005520 <HIF_UART_Init+0xd4>)
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80054a8:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <HIF_UART_Init+0xd8>)
 80054aa:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80054ae:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80054b0:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <HIF_UART_Init+0xdc>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80054b6:	4b1d      	ldr	r3, [pc, #116]	; (800552c <HIF_UART_Init+0xe0>)
 80054b8:	2280      	movs	r2, #128	; 0x80
 80054ba:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80054c2:	4a1b      	ldr	r2, [pc, #108]	; (8005530 <HIF_UART_Init+0xe4>)
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ca:	3301      	adds	r3, #1
 80054cc:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	085b      	lsrs	r3, r3, #1
 80054d2:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054da:	d302      	bcc.n	80054e2 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80054dc:	f640 73ff 	movw	r3, #4095	; 0xfff
 80054e0:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	4a11      	ldr	r2, [pc, #68]	; (8005534 <HIF_UART_Init+0xe8>)
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80054f2:	4a11      	ldr	r2, [pc, #68]	; (8005538 <HIF_UART_Init+0xec>)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80054f8:	4a10      	ldr	r2, [pc, #64]	; (800553c <HIF_UART_Init+0xf0>)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80054fe:	2106      	movs	r1, #6
 8005500:	2026      	movs	r0, #38	; 0x26
 8005502:	f7ff feab 	bl	800525c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005506:	2026      	movs	r0, #38	; 0x26
 8005508:	f7ff fe8a 	bl	8005220 <__NVIC_EnableIRQ>
}
 800550c:	bf00      	nop
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40023840 	.word	0x40023840
 8005518:	40023830 	.word	0x40023830
 800551c:	40020020 	.word	0x40020020
 8005520:	40020000 	.word	0x40020000
 8005524:	4000440c 	.word	0x4000440c
 8005528:	40004410 	.word	0x40004410
 800552c:	40004414 	.word	0x40004414
 8005530:	0501bd00 	.word	0x0501bd00
 8005534:	40004408 	.word	0x40004408
 8005538:	20012ee0 	.word	0x20012ee0
 800553c:	20012ee4 	.word	0x20012ee4

08005540 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005546:	4b26      	ldr	r3, [pc, #152]	; (80055e0 <_DoInit+0xa0>)
 8005548:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800554a:	22a8      	movs	r2, #168	; 0xa8
 800554c:	2100      	movs	r1, #0
 800554e:	6838      	ldr	r0, [r7, #0]
 8005550:	f002 fa76 	bl	8007a40 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	2203      	movs	r2, #3
 8005558:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2203      	movs	r2, #3
 800555e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	4a20      	ldr	r2, [pc, #128]	; (80055e4 <_DoInit+0xa4>)
 8005564:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	4a1f      	ldr	r2, [pc, #124]	; (80055e8 <_DoInit+0xa8>)
 800556a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005572:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2200      	movs	r2, #0
 8005578:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2200      	movs	r2, #0
 800557e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2200      	movs	r2, #0
 8005584:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <_DoInit+0xa4>)
 800558a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	4a17      	ldr	r2, [pc, #92]	; (80055ec <_DoInit+0xac>)
 8005590:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2210      	movs	r2, #16
 8005596:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2200      	movs	r2, #0
 800559c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2200      	movs	r2, #0
 80055a2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2200      	movs	r2, #0
 80055a8:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80055aa:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80055ae:	2300      	movs	r3, #0
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	e00c      	b.n	80055ce <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f1c3 030f 	rsb	r3, r3, #15
 80055ba:	4a0d      	ldr	r2, [pc, #52]	; (80055f0 <_DoInit+0xb0>)
 80055bc:	5cd1      	ldrb	r1, [r2, r3]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	460a      	mov	r2, r1
 80055c6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3301      	adds	r3, #1
 80055cc:	607b      	str	r3, [r7, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b0f      	cmp	r3, #15
 80055d2:	d9ef      	bls.n	80055b4 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80055d4:	f3bf 8f5f 	dmb	sy
}
 80055d8:	bf00      	nop
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20012ee8 	.word	0x20012ee8
 80055e4:	08007bb4 	.word	0x08007bb4
 80055e8:	20012f90 	.word	0x20012f90
 80055ec:	20013390 	.word	0x20013390
 80055f0:	08007bf4 	.word	0x08007bf4

080055f4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08a      	sub	sp, #40	; 0x28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005600:	2300      	movs	r3, #0
 8005602:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	429a      	cmp	r2, r3
 8005616:	d905      	bls.n	8005624 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
 8005622:	e007      	b.n	8005634 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	69b9      	ldr	r1, [r7, #24]
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	1acb      	subs	r3, r1, r3
 800562e:	4413      	add	r3, r2
 8005630:	3b01      	subs	r3, #1
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563e:	4293      	cmp	r3, r2
 8005640:	bf28      	it	cs
 8005642:	4613      	movcs	r3, r2
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4293      	cmp	r3, r2
 800564c:	bf28      	it	cs
 800564e:	4613      	movcs	r3, r2
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4413      	add	r3, r2
 800565a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800565c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	6978      	ldr	r0, [r7, #20]
 8005662:	f002 f9df 	bl	8007a24 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005666:	6a3a      	ldr	r2, [r7, #32]
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	4413      	add	r3, r2
 800566c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	4413      	add	r3, r2
 8005674:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	4413      	add	r3, r2
 8005684:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	429a      	cmp	r2, r3
 800568e:	d101      	bne.n	8005694 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005690:	2300      	movs	r3, #0
 8005692:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005694:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1b2      	bne.n	800560a <_WriteBlocking+0x16>
  return NumBytesWritten;
 80056a4:	6a3b      	ldr	r3, [r7, #32]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3728      	adds	r7, #40	; 0x28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b088      	sub	sp, #32
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d911      	bls.n	80056f6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	4413      	add	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	68b9      	ldr	r1, [r7, #8]
 80056e0:	6938      	ldr	r0, [r7, #16]
 80056e2:	f002 f99f 	bl	8007a24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056e6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	441a      	add	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80056f4:	e01f      	b.n	8005736 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	4413      	add	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	6938      	ldr	r0, [r7, #16]
 800570a:	f002 f98b 	bl	8007a24 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	4413      	add	r3, r2
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4619      	mov	r1, r3
 8005726:	6938      	ldr	r0, [r7, #16]
 8005728:	f002 f97c 	bl	8007a24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800572c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	60da      	str	r2, [r3, #12]
}
 8005736:	bf00      	nop
 8005738:	3720      	adds	r7, #32
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800573e:	b480      	push	{r7}
 8005740:	b087      	sub	sp, #28
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	429a      	cmp	r2, r3
 8005758:	d808      	bhi.n	800576c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1ad2      	subs	r2, r2, r3
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4413      	add	r3, r2
 8005766:	3b01      	subs	r3, #1
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	e004      	b.n	8005776 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	3b01      	subs	r3, #1
 8005774:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005776:	697b      	ldr	r3, [r7, #20]
}
 8005778:	4618      	mov	r0, r3
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b08c      	sub	sp, #48	; 0x30
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005790:	4b3e      	ldr	r3, [pc, #248]	; (800588c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005792:	623b      	str	r3, [r7, #32]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b53      	cmp	r3, #83	; 0x53
 800579c:	d001      	beq.n	80057a2 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800579e:	f7ff fecf 	bl	8005540 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	4613      	mov	r3, r2
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	4413      	add	r3, r2
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	4a37      	ldr	r2, [pc, #220]	; (800588c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80057b0:	4413      	add	r3, r2
 80057b2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80057c4:	2300      	movs	r3, #0
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80057c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d92b      	bls.n	8005828 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4293      	cmp	r3, r2
 80057e0:	bf28      	it	cs
 80057e2:	4613      	movcs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	4413      	add	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	6939      	ldr	r1, [r7, #16]
 80057f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057f6:	f002 f915 	bl	8007a24 <memcpy>
    NumBytesRead += NumBytesRem;
 80057fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4413      	add	r3, r2
 8005800:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	4413      	add	r3, r2
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	4413      	add	r3, r2
 8005818:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005820:	429a      	cmp	r2, r3
 8005822:	d101      	bne.n	8005828 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005824:	2300      	movs	r3, #0
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4293      	cmp	r3, r2
 8005836:	bf28      	it	cs
 8005838:	4613      	movcs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d019      	beq.n	8005876 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	4413      	add	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	6939      	ldr	r1, [r7, #16]
 8005850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005852:	f002 f8e7 	bl	8007a24 <memcpy>
    NumBytesRead += NumBytesRem;
 8005856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	4413      	add	r3, r2
 800585c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800585e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	4413      	add	r3, r2
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800586e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	4413      	add	r3, r2
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005880:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005884:	4618      	mov	r0, r3
 8005886:	3730      	adds	r7, #48	; 0x30
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	20012ee8 	.word	0x20012ee8

08005890 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005890:	b580      	push	{r7, lr}
 8005892:	b08c      	sub	sp, #48	; 0x30
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800589c:	4b3e      	ldr	r3, [pc, #248]	; (8005998 <SEGGER_RTT_ReadNoLock+0x108>)
 800589e:	623b      	str	r3, [r7, #32]
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b53      	cmp	r3, #83	; 0x53
 80058a8:	d001      	beq.n	80058ae <SEGGER_RTT_ReadNoLock+0x1e>
 80058aa:	f7ff fe49 	bl	8005540 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4613      	mov	r3, r2
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	4413      	add	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	3360      	adds	r3, #96	; 0x60
 80058ba:	4a37      	ldr	r2, [pc, #220]	; (8005998 <SEGGER_RTT_ReadNoLock+0x108>)
 80058bc:	4413      	add	r3, r2
 80058be:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80058d0:	2300      	movs	r3, #0
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80058d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d92b      	bls.n	8005934 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4293      	cmp	r3, r2
 80058ec:	bf28      	it	cs
 80058ee:	4613      	movcs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	4413      	add	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	6939      	ldr	r1, [r7, #16]
 8005900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005902:	f002 f88f 	bl	8007a24 <memcpy>
    NumBytesRead += NumBytesRem;
 8005906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	4413      	add	r3, r2
 800590c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800590e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	4413      	add	r3, r2
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800591e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	4413      	add	r3, r2
 8005924:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800592c:	429a      	cmp	r2, r3
 800592e:	d101      	bne.n	8005934 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005930:	2300      	movs	r3, #0
 8005932:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4293      	cmp	r3, r2
 8005942:	bf28      	it	cs
 8005944:	4613      	movcs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d019      	beq.n	8005982 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005954:	4413      	add	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	6939      	ldr	r1, [r7, #16]
 800595c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800595e:	f002 f861 	bl	8007a24 <memcpy>
    NumBytesRead += NumBytesRem;
 8005962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	4413      	add	r3, r2
 8005968:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800596a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	4413      	add	r3, r2
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800597a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	4413      	add	r3, r2
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800598c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005990:	4618      	mov	r0, r3
 8005992:	3730      	adds	r7, #48	; 0x30
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	20012ee8 	.word	0x20012ee8

0800599c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4613      	mov	r3, r2
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	4413      	add	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	3360      	adds	r3, #96	; 0x60
 80059b8:	4a1f      	ldr	r2, [pc, #124]	; (8005a38 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80059ba:	4413      	add	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d029      	beq.n	8005a1a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d82e      	bhi.n	8005a28 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d013      	beq.n	80059fa <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80059d2:	e029      	b.n	8005a28 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80059d4:	6978      	ldr	r0, [r7, #20]
 80059d6:	f7ff feb2 	bl	800573e <_GetAvailWriteSpace>
 80059da:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d202      	bcs.n	80059ea <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80059e4:	2300      	movs	r3, #0
 80059e6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80059e8:	e021      	b.n	8005a2e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	69b9      	ldr	r1, [r7, #24]
 80059f2:	6978      	ldr	r0, [r7, #20]
 80059f4:	f7ff fe5b 	bl	80056ae <_WriteNoCheck>
    break;
 80059f8:	e019      	b.n	8005a2e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80059fa:	6978      	ldr	r0, [r7, #20]
 80059fc:	f7ff fe9f 	bl	800573e <_GetAvailWriteSpace>
 8005a00:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4293      	cmp	r3, r2
 8005a08:	bf28      	it	cs
 8005a0a:	4613      	movcs	r3, r2
 8005a0c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	69b9      	ldr	r1, [r7, #24]
 8005a12:	6978      	ldr	r0, [r7, #20]
 8005a14:	f7ff fe4b 	bl	80056ae <_WriteNoCheck>
    break;
 8005a18:	e009      	b.n	8005a2e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	69b9      	ldr	r1, [r7, #24]
 8005a1e:	6978      	ldr	r0, [r7, #20]
 8005a20:	f7ff fde8 	bl	80055f4 <_WriteBlocking>
 8005a24:	61f8      	str	r0, [r7, #28]
    break;
 8005a26:	e002      	b.n	8005a2e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61fb      	str	r3, [r7, #28]
    break;
 8005a2c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	20012ee8 	.word	0x20012ee8

08005a3c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b088      	sub	sp, #32
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005a48:	4b0e      	ldr	r3, [pc, #56]	; (8005a84 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005a4a:	61fb      	str	r3, [r7, #28]
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b53      	cmp	r3, #83	; 0x53
 8005a54:	d001      	beq.n	8005a5a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005a56:	f7ff fd73 	bl	8005540 <_DoInit>
  SEGGER_RTT_LOCK();
 8005a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a5e:	f04f 0120 	mov.w	r1, #32
 8005a62:	f381 8811 	msr	BASEPRI, r1
 8005a66:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff ff95 	bl	800599c <SEGGER_RTT_WriteDownBufferNoLock>
 8005a72:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005a7a:	697b      	ldr	r3, [r7, #20]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3720      	adds	r7, #32
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20012ee8 	.word	0x20012ee8

08005a88 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005a96:	4b3d      	ldr	r3, [pc, #244]	; (8005b8c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a98:	61bb      	str	r3, [r7, #24]
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b53      	cmp	r3, #83	; 0x53
 8005aa2:	d001      	beq.n	8005aa8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005aa4:	f7ff fd4c 	bl	8005540 <_DoInit>
  SEGGER_RTT_LOCK();
 8005aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8005aac:	f04f 0120 	mov.w	r1, #32
 8005ab0:	f381 8811 	msr	BASEPRI, r1
 8005ab4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ab6:	4b35      	ldr	r3, [pc, #212]	; (8005b8c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005ab8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005abe:	6939      	ldr	r1, [r7, #16]
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	4413      	add	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	440b      	add	r3, r1
 8005ace:	3304      	adds	r3, #4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	dbeb      	blt.n	8005abe <SEGGER_RTT_AllocUpBuffer+0x36>
 8005ae6:	e000      	b.n	8005aea <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005ae8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	da3f      	bge.n	8005b74 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005af4:	6939      	ldr	r1, [r7, #16]
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	4613      	mov	r3, r2
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	4413      	add	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	440b      	add	r3, r1
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005b08:	6939      	ldr	r1, [r7, #16]
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	4613      	mov	r3, r2
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	4413      	add	r3, r2
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	440b      	add	r3, r1
 8005b18:	3304      	adds	r3, #4
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005b1e:	6939      	ldr	r1, [r7, #16]
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	4613      	mov	r3, r2
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	4413      	add	r3, r2
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	440b      	add	r3, r1
 8005b2c:	3320      	adds	r3, #32
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005b32:	6939      	ldr	r1, [r7, #16]
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	4613      	mov	r3, r2
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	4413      	add	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	440b      	add	r3, r1
 8005b40:	3328      	adds	r3, #40	; 0x28
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005b46:	6939      	ldr	r1, [r7, #16]
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	4413      	add	r3, r2
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	440b      	add	r3, r1
 8005b54:	3324      	adds	r3, #36	; 0x24
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005b5a:	6939      	ldr	r1, [r7, #16]
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	4413      	add	r3, r2
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	440b      	add	r3, r1
 8005b68:	332c      	adds	r3, #44	; 0x2c
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b6e:	f3bf 8f5f 	dmb	sy
 8005b72:	e002      	b.n	8005b7a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005b74:	f04f 33ff 	mov.w	r3, #4294967295
 8005b78:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005b80:	69fb      	ldr	r3, [r7, #28]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3720      	adds	r7, #32
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20012ee8 	.word	0x20012ee8

08005b90 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08a      	sub	sp, #40	; 0x28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005b9e:	4b21      	ldr	r3, [pc, #132]	; (8005c24 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005ba0:	623b      	str	r3, [r7, #32]
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b53      	cmp	r3, #83	; 0x53
 8005baa:	d001      	beq.n	8005bb0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005bac:	f7ff fcc8 	bl	8005540 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bb0:	4b1c      	ldr	r3, [pc, #112]	; (8005c24 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005bb2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d82c      	bhi.n	8005c14 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005bba:	f3ef 8311 	mrs	r3, BASEPRI
 8005bbe:	f04f 0120 	mov.w	r1, #32
 8005bc2:	f381 8811 	msr	BASEPRI, r1
 8005bc6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	4413      	add	r3, r2
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	3360      	adds	r3, #96	; 0x60
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00e      	beq.n	8005bfe <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c02:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005c04:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
 8005c12:	e002      	b.n	8005c1a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005c14:	f04f 33ff 	mov.w	r3, #4294967295
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3728      	adds	r7, #40	; 0x28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20012ee8 	.word	0x20012ee8

08005c28 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	60fa      	str	r2, [r7, #12]
 8005c3e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b80      	cmp	r3, #128	; 0x80
 8005c44:	d90a      	bls.n	8005c5c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005c46:	2380      	movs	r3, #128	; 0x80
 8005c48:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005c4a:	e007      	b.n	8005c5c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	1c53      	adds	r3, r2, #1
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	1c59      	adds	r1, r3, #1
 8005c56:	60f9      	str	r1, [r7, #12]
 8005c58:	7812      	ldrb	r2, [r2, #0]
 8005c5a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	1e5a      	subs	r2, r3, #1
 8005c60:	607a      	str	r2, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <_EncodeStr+0x46>
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1ee      	bne.n	8005c4c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3307      	adds	r3, #7
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ca6:	4b35      	ldr	r3, [pc, #212]	; (8005d7c <_HandleIncomingPacket+0xdc>)
 8005ca8:	7e1b      	ldrb	r3, [r3, #24]
 8005caa:	4618      	mov	r0, r3
 8005cac:	1cfb      	adds	r3, r7, #3
 8005cae:	2201      	movs	r2, #1
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	f7ff fded 	bl	8005890 <SEGGER_RTT_ReadNoLock>
 8005cb6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d052      	beq.n	8005d64 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005cbe:	78fb      	ldrb	r3, [r7, #3]
 8005cc0:	2b80      	cmp	r3, #128	; 0x80
 8005cc2:	d031      	beq.n	8005d28 <_HandleIncomingPacket+0x88>
 8005cc4:	2b80      	cmp	r3, #128	; 0x80
 8005cc6:	dc40      	bgt.n	8005d4a <_HandleIncomingPacket+0xaa>
 8005cc8:	2b07      	cmp	r3, #7
 8005cca:	dc15      	bgt.n	8005cf8 <_HandleIncomingPacket+0x58>
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	dd3c      	ble.n	8005d4a <_HandleIncomingPacket+0xaa>
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	2b06      	cmp	r3, #6
 8005cd4:	d839      	bhi.n	8005d4a <_HandleIncomingPacket+0xaa>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <_HandleIncomingPacket+0x3c>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005cff 	.word	0x08005cff
 8005ce0:	08005d05 	.word	0x08005d05
 8005ce4:	08005d0b 	.word	0x08005d0b
 8005ce8:	08005d11 	.word	0x08005d11
 8005cec:	08005d17 	.word	0x08005d17
 8005cf0:	08005d1d 	.word	0x08005d1d
 8005cf4:	08005d23 	.word	0x08005d23
 8005cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8005cfa:	d035      	beq.n	8005d68 <_HandleIncomingPacket+0xc8>
 8005cfc:	e025      	b.n	8005d4a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005cfe:	f001 f8a3 	bl	8006e48 <SEGGER_SYSVIEW_Start>
      break;
 8005d02:	e036      	b.n	8005d72 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005d04:	f001 f95c 	bl	8006fc0 <SEGGER_SYSVIEW_Stop>
      break;
 8005d08:	e033      	b.n	8005d72 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005d0a:	f001 fb35 	bl	8007378 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005d0e:	e030      	b.n	8005d72 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005d10:	f001 fafa 	bl	8007308 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005d14:	e02d      	b.n	8005d72 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005d16:	f001 f979 	bl	800700c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005d1a:	e02a      	b.n	8005d72 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005d1c:	f001 fd72 	bl	8007804 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005d20:	e027      	b.n	8005d72 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005d22:	f001 fd51 	bl	80077c8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005d26:	e024      	b.n	8005d72 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d28:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <_HandleIncomingPacket+0xdc>)
 8005d2a:	7e1b      	ldrb	r3, [r3, #24]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	1cfb      	adds	r3, r7, #3
 8005d30:	2201      	movs	r2, #1
 8005d32:	4619      	mov	r1, r3
 8005d34:	f7ff fdac 	bl	8005890 <SEGGER_RTT_ReadNoLock>
 8005d38:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d015      	beq.n	8005d6c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 fcb6 	bl	80076b4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005d48:	e010      	b.n	8005d6c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005d4a:	78fb      	ldrb	r3, [r7, #3]
 8005d4c:	b25b      	sxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	da0e      	bge.n	8005d70 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d52:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <_HandleIncomingPacket+0xdc>)
 8005d54:	7e1b      	ldrb	r3, [r3, #24]
 8005d56:	4618      	mov	r0, r3
 8005d58:	1cfb      	adds	r3, r7, #3
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	f7ff fd97 	bl	8005890 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005d62:	e005      	b.n	8005d70 <_HandleIncomingPacket+0xd0>
    }
  }
 8005d64:	bf00      	nop
 8005d66:	e004      	b.n	8005d72 <_HandleIncomingPacket+0xd2>
      break;
 8005d68:	bf00      	nop
 8005d6a:	e002      	b.n	8005d72 <_HandleIncomingPacket+0xd2>
      break;
 8005d6c:	bf00      	nop
 8005d6e:	e000      	b.n	8005d72 <_HandleIncomingPacket+0xd2>
      break;
 8005d70:	bf00      	nop
}
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	200143a8 	.word	0x200143a8

08005d80 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08c      	sub	sp, #48	; 0x30
 8005d84:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005d86:	2301      	movs	r3, #1
 8005d88:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005d8a:	1d3b      	adds	r3, r7, #4
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d94:	4b32      	ldr	r3, [pc, #200]	; (8005e60 <_TrySendOverflowPacket+0xe0>)
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d9a:	e00b      	b.n	8005db4 <_TrySendOverflowPacket+0x34>
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	1c59      	adds	r1, r3, #1
 8005da4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005da6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	09db      	lsrs	r3, r3, #7
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	2b7f      	cmp	r3, #127	; 0x7f
 8005db8:	d8f0      	bhi.n	8005d9c <_TrySendOverflowPacket+0x1c>
 8005dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005dca:	4b26      	ldr	r3, [pc, #152]	; (8005e64 <_TrySendOverflowPacket+0xe4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005dd0:	4b23      	ldr	r3, [pc, #140]	; (8005e60 <_TrySendOverflowPacket+0xe0>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	623b      	str	r3, [r7, #32]
 8005de2:	e00b      	b.n	8005dfc <_TrySendOverflowPacket+0x7c>
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	1c59      	adds	r1, r3, #1
 8005dec:	6279      	str	r1, [r7, #36]	; 0x24
 8005dee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	09db      	lsrs	r3, r3, #7
 8005dfa:	623b      	str	r3, [r7, #32]
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8005e00:	d8f0      	bhi.n	8005de4 <_TrySendOverflowPacket+0x64>
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	627a      	str	r2, [r7, #36]	; 0x24
 8005e08:	6a3a      	ldr	r2, [r7, #32]
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005e12:	4b13      	ldr	r3, [pc, #76]	; (8005e60 <_TrySendOverflowPacket+0xe0>)
 8005e14:	785b      	ldrb	r3, [r3, #1]
 8005e16:	4618      	mov	r0, r3
 8005e18:	1d3b      	adds	r3, r7, #4
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	4619      	mov	r1, r3
 8005e24:	f7fa f9f4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005e2c:	f7ff fafe 	bl	800542c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e36:	4a0a      	ldr	r2, [pc, #40]	; (8005e60 <_TrySendOverflowPacket+0xe0>)
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005e3c:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <_TrySendOverflowPacket+0xe0>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <_TrySendOverflowPacket+0xe0>)
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	e004      	b.n	8005e54 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005e4a:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <_TrySendOverflowPacket+0xe0>)
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	4a03      	ldr	r2, [pc, #12]	; (8005e60 <_TrySendOverflowPacket+0xe0>)
 8005e52:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005e54:	693b      	ldr	r3, [r7, #16]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3730      	adds	r7, #48	; 0x30
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	200143a8 	.word	0x200143a8
 8005e64:	e0001004 	.word	0xe0001004

08005e68 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	; 0x28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005e74:	4b96      	ldr	r3, [pc, #600]	; (80060d0 <_SendPacket+0x268>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d010      	beq.n	8005e9e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005e7c:	4b94      	ldr	r3, [pc, #592]	; (80060d0 <_SendPacket+0x268>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8130 	beq.w	80060e6 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005e86:	4b92      	ldr	r3, [pc, #584]	; (80060d0 <_SendPacket+0x268>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d109      	bne.n	8005ea2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005e8e:	f7ff ff77 	bl	8005d80 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005e92:	4b8f      	ldr	r3, [pc, #572]	; (80060d0 <_SendPacket+0x268>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	f040 8127 	bne.w	80060ea <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005e9c:	e001      	b.n	8005ea2 <_SendPacket+0x3a>
    goto Send;
 8005e9e:	bf00      	nop
 8005ea0:	e000      	b.n	8005ea4 <_SendPacket+0x3c>
Send:
 8005ea2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b1f      	cmp	r3, #31
 8005ea8:	d809      	bhi.n	8005ebe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005eaa:	4b89      	ldr	r3, [pc, #548]	; (80060d0 <_SendPacket+0x268>)
 8005eac:	69da      	ldr	r2, [r3, #28]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f040 8118 	bne.w	80060ee <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b17      	cmp	r3, #23
 8005ec2:	d807      	bhi.n	8005ed4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	e0c4      	b.n	800605e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee0:	d912      	bls.n	8005f08 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	09da      	lsrs	r2, r3, #7
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	3a01      	subs	r2, #1
 8005efa:	60fa      	str	r2, [r7, #12]
 8005efc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	e006      	b.n	8005f16 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b7e      	cmp	r3, #126	; 0x7e
 8005f1a:	d807      	bhi.n	8005f2c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	e098      	b.n	800605e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f32:	d212      	bcs.n	8005f5a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	09da      	lsrs	r2, r3, #7
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	3a01      	subs	r2, #1
 8005f4c:	60fa      	str	r2, [r7, #12]
 8005f4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	e081      	b.n	800605e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f60:	d21d      	bcs.n	8005f9e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	0b9a      	lsrs	r2, r3, #14
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	09db      	lsrs	r3, r3, #7
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	3a01      	subs	r2, #1
 8005f7c:	60fa      	str	r2, [r7, #12]
 8005f7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	3a01      	subs	r2, #1
 8005f90:	60fa      	str	r2, [r7, #12]
 8005f92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	e05f      	b.n	800605e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fa4:	d228      	bcs.n	8005ff8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	0d5a      	lsrs	r2, r3, #21
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	0b9b      	lsrs	r3, r3, #14
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	3a01      	subs	r2, #1
 8005fc0:	60fa      	str	r2, [r7, #12]
 8005fc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	09db      	lsrs	r3, r3, #7
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	3a01      	subs	r2, #1
 8005fd6:	60fa      	str	r2, [r7, #12]
 8005fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	3a01      	subs	r2, #1
 8005fea:	60fa      	str	r2, [r7, #12]
 8005fec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	e032      	b.n	800605e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	0f1a      	lsrs	r2, r3, #28
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	0d5b      	lsrs	r3, r3, #21
 800600c:	b2db      	uxtb	r3, r3
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	3a01      	subs	r2, #1
 8006012:	60fa      	str	r2, [r7, #12]
 8006014:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006018:	b2da      	uxtb	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	0b9b      	lsrs	r3, r3, #14
 8006022:	b2db      	uxtb	r3, r3
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	3a01      	subs	r2, #1
 8006028:	60fa      	str	r2, [r7, #12]
 800602a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800602e:	b2da      	uxtb	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	09db      	lsrs	r3, r3, #7
 8006038:	b2db      	uxtb	r3, r3
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	3a01      	subs	r2, #1
 800603e:	60fa      	str	r2, [r7, #12]
 8006040:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006044:	b2da      	uxtb	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	3a01      	subs	r2, #1
 8006052:	60fa      	str	r2, [r7, #12]
 8006054:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006058:	b2da      	uxtb	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800605e:	4b1d      	ldr	r3, [pc, #116]	; (80060d4 <_SendPacket+0x26c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006064:	4b1a      	ldr	r3, [pc, #104]	; (80060d0 <_SendPacket+0x268>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	623b      	str	r3, [r7, #32]
 8006076:	e00b      	b.n	8006090 <_SendPacket+0x228>
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	b2da      	uxtb	r2, r3
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	1c59      	adds	r1, r3, #1
 8006080:	6279      	str	r1, [r7, #36]	; 0x24
 8006082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	09db      	lsrs	r3, r3, #7
 800608e:	623b      	str	r3, [r7, #32]
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	2b7f      	cmp	r3, #127	; 0x7f
 8006094:	d8f0      	bhi.n	8006078 <_SendPacket+0x210>
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	627a      	str	r2, [r7, #36]	; 0x24
 800609c:	6a3a      	ldr	r2, [r7, #32]
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80060a6:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <_SendPacket+0x268>)
 80060a8:	785b      	ldrb	r3, [r3, #1]
 80060aa:	4618      	mov	r0, r3
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	68f9      	ldr	r1, [r7, #12]
 80060b6:	f7fa f8ab 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80060ba:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80060bc:	f7ff f9b6 	bl	800542c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d008      	beq.n	80060d8 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80060c6:	4a02      	ldr	r2, [pc, #8]	; (80060d0 <_SendPacket+0x268>)
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	60d3      	str	r3, [r2, #12]
 80060cc:	e010      	b.n	80060f0 <_SendPacket+0x288>
 80060ce:	bf00      	nop
 80060d0:	200143a8 	.word	0x200143a8
 80060d4:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80060d8:	4b19      	ldr	r3, [pc, #100]	; (8006140 <_SendPacket+0x2d8>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	3301      	adds	r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	4b17      	ldr	r3, [pc, #92]	; (8006140 <_SendPacket+0x2d8>)
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	e004      	b.n	80060f0 <_SendPacket+0x288>
    goto SendDone;
 80060e6:	bf00      	nop
 80060e8:	e002      	b.n	80060f0 <_SendPacket+0x288>
      goto SendDone;
 80060ea:	bf00      	nop
 80060ec:	e000      	b.n	80060f0 <_SendPacket+0x288>
      goto SendDone;
 80060ee:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80060f0:	4b13      	ldr	r3, [pc, #76]	; (8006140 <_SendPacket+0x2d8>)
 80060f2:	7e1b      	ldrb	r3, [r3, #24]
 80060f4:	4619      	mov	r1, r3
 80060f6:	4a13      	ldr	r2, [pc, #76]	; (8006144 <_SendPacket+0x2dc>)
 80060f8:	460b      	mov	r3, r1
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	440b      	add	r3, r1
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4413      	add	r3, r2
 8006102:	336c      	adds	r3, #108	; 0x6c
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <_SendPacket+0x2d8>)
 8006108:	7e1b      	ldrb	r3, [r3, #24]
 800610a:	4618      	mov	r0, r3
 800610c:	490d      	ldr	r1, [pc, #52]	; (8006144 <_SendPacket+0x2dc>)
 800610e:	4603      	mov	r3, r0
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	4403      	add	r3, r0
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	440b      	add	r3, r1
 8006118:	3370      	adds	r3, #112	; 0x70
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d00b      	beq.n	8006138 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006120:	4b07      	ldr	r3, [pc, #28]	; (8006140 <_SendPacket+0x2d8>)
 8006122:	789b      	ldrb	r3, [r3, #2]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d107      	bne.n	8006138 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006128:	4b05      	ldr	r3, [pc, #20]	; (8006140 <_SendPacket+0x2d8>)
 800612a:	2201      	movs	r2, #1
 800612c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800612e:	f7ff fdb7 	bl	8005ca0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006132:	4b03      	ldr	r3, [pc, #12]	; (8006140 <_SendPacket+0x2d8>)
 8006134:	2200      	movs	r2, #0
 8006136:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006138:	bf00      	nop
 800613a:	3728      	adds	r7, #40	; 0x28
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	200143a8 	.word	0x200143a8
 8006144:	20012ee8 	.word	0x20012ee8

08006148 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	; 0x28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	3301      	adds	r3, #1
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d80a      	bhi.n	8006178 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	1c59      	adds	r1, r3, #1
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6051      	str	r1, [r2, #4]
 800616c:	78fa      	ldrb	r2, [r7, #3]
 800616e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b80      	cmp	r3, #128	; 0x80
 800617e:	d15a      	bne.n	8006236 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	623b      	str	r3, [r7, #32]
 80061a0:	e00b      	b.n	80061ba <_StoreChar+0x72>
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	1c59      	adds	r1, r3, #1
 80061aa:	6279      	str	r1, [r7, #36]	; 0x24
 80061ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	09db      	lsrs	r3, r3, #7
 80061b8:	623b      	str	r3, [r7, #32]
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	2b7f      	cmp	r3, #127	; 0x7f
 80061be:	d8f0      	bhi.n	80061a2 <_StoreChar+0x5a>
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	627a      	str	r2, [r7, #36]	; 0x24
 80061c6:	6a3a      	ldr	r2, [r7, #32]
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	61fb      	str	r3, [r7, #28]
 80061d4:	2300      	movs	r3, #0
 80061d6:	61bb      	str	r3, [r7, #24]
 80061d8:	e00b      	b.n	80061f2 <_StoreChar+0xaa>
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	1c59      	adds	r1, r3, #1
 80061e2:	61f9      	str	r1, [r7, #28]
 80061e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	09db      	lsrs	r3, r3, #7
 80061f0:	61bb      	str	r3, [r7, #24]
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	2b7f      	cmp	r3, #127	; 0x7f
 80061f6:	d8f0      	bhi.n	80061da <_StoreChar+0x92>
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	61fa      	str	r2, [r7, #28]
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	221a      	movs	r2, #26
 800620e:	6939      	ldr	r1, [r7, #16]
 8006210:	4618      	mov	r0, r3
 8006212:	f7ff fe29 	bl	8005e68 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f7ff fd34 	bl	8005c88 <_PreparePacket>
 8006220:	4602      	mov	r2, r0
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	611a      	str	r2, [r3, #16]
  }
}
 8006236:	bf00      	nop
 8006238:	3728      	adds	r7, #40	; 0x28
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006240:	b580      	push	{r7, lr}
 8006242:	b08a      	sub	sp, #40	; 0x28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006252:	2301      	movs	r3, #1
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006256:	2301      	movs	r3, #1
 8006258:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800625a:	e007      	b.n	800626c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800625c:	6a3a      	ldr	r2, [r7, #32]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	623b      	str	r3, [r7, #32]
    Width++;
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	3301      	adds	r3, #1
 800626a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800626c:	6a3a      	ldr	r2, [r7, #32]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	429a      	cmp	r2, r3
 8006272:	d2f3      	bcs.n	800625c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	429a      	cmp	r2, r3
 800627a:	d901      	bls.n	8006280 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d11f      	bne.n	80062ca <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01c      	beq.n	80062ca <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d005      	beq.n	80062a6 <_PrintUnsigned+0x66>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d102      	bne.n	80062a6 <_PrintUnsigned+0x66>
        c = '0';
 80062a0:	2330      	movs	r3, #48	; 0x30
 80062a2:	76fb      	strb	r3, [r7, #27]
 80062a4:	e001      	b.n	80062aa <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80062a6:	2320      	movs	r3, #32
 80062a8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062aa:	e007      	b.n	80062bc <_PrintUnsigned+0x7c>
        FieldWidth--;
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	3b01      	subs	r3, #1
 80062b0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80062b2:	7efb      	ldrb	r3, [r7, #27]
 80062b4:	4619      	mov	r1, r3
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7ff ff46 	bl	8006148 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <_PrintUnsigned+0x8a>
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d3f0      	bcc.n	80062ac <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d903      	bls.n	80062d8 <_PrintUnsigned+0x98>
      NumDigits--;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	603b      	str	r3, [r7, #0]
 80062d6:	e009      	b.n	80062ec <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e0:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d200      	bcs.n	80062ec <_PrintUnsigned+0xac>
        break;
 80062ea:	e005      	b.n	80062f8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	fb02 f303 	mul.w	r3, r2, r3
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80062f6:	e7e8      	b.n	80062ca <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006300:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006306:	fb02 f303 	mul.w	r3, r2, r3
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006310:	4a15      	ldr	r2, [pc, #84]	; (8006368 <_PrintUnsigned+0x128>)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	4413      	add	r3, r2
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	4619      	mov	r1, r3
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7ff ff14 	bl	8006148 <_StoreChar>
    Digit /= Base;
 8006320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	fbb2 f3f3 	udiv	r3, r2, r3
 8006328:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e3      	bne.n	80062f8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d011      	beq.n	800635e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00e      	beq.n	800635e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006340:	e006      	b.n	8006350 <_PrintUnsigned+0x110>
        FieldWidth--;
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	3b01      	subs	r3, #1
 8006346:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006348:	2120      	movs	r1, #32
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7ff fefc 	bl	8006148 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <_PrintUnsigned+0x11e>
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	429a      	cmp	r2, r3
 800635c:	d3f1      	bcc.n	8006342 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800635e:	bf00      	nop
 8006360:	3728      	adds	r7, #40	; 0x28
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	08007c14 	.word	0x08007c14

0800636c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	bfb8      	it	lt
 8006380:	425b      	neglt	r3, r3
 8006382:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006384:	2301      	movs	r3, #1
 8006386:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006388:	e007      	b.n	800639a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006392:	613b      	str	r3, [r7, #16]
    Width++;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	3301      	adds	r3, #1
 8006398:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	429a      	cmp	r2, r3
 80063a0:	daf3      	bge.n	800638a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d901      	bls.n	80063ae <_PrintInt+0x42>
    Width = NumDigits;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00a      	beq.n	80063ca <_PrintInt+0x5e>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	db04      	blt.n	80063c4 <_PrintInt+0x58>
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <_PrintInt+0x5e>
    FieldWidth--;
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <_PrintInt+0x6e>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d016      	beq.n	8006408 <_PrintInt+0x9c>
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d111      	bne.n	8006408 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00e      	beq.n	8006408 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80063ea:	e006      	b.n	80063fa <_PrintInt+0x8e>
        FieldWidth--;
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80063f2:	2120      	movs	r1, #32
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f7ff fea7 	bl	8006148 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <_PrintInt+0x9c>
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	429a      	cmp	r2, r3
 8006406:	d3f1      	bcc.n	80063ec <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	da07      	bge.n	800641e <_PrintInt+0xb2>
    v = -v;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	425b      	negs	r3, r3
 8006412:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006414:	212d      	movs	r1, #45	; 0x2d
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff fe96 	bl	8006148 <_StoreChar>
 800641c:	e008      	b.n	8006430 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006428:	212b      	movs	r1, #43	; 0x2b
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f7ff fe8c 	bl	8006148 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d019      	beq.n	800646e <_PrintInt+0x102>
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d114      	bne.n	800646e <_PrintInt+0x102>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d111      	bne.n	800646e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00e      	beq.n	800646e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006450:	e006      	b.n	8006460 <_PrintInt+0xf4>
        FieldWidth--;
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	3b01      	subs	r3, #1
 8006456:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006458:	2130      	movs	r1, #48	; 0x30
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7ff fe74 	bl	8006148 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <_PrintInt+0x102>
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	429a      	cmp	r2, r3
 800646c:	d3f1      	bcc.n	8006452 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800646e:	68b9      	ldr	r1, [r7, #8]
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff fedf 	bl	8006240 <_PrintUnsigned>
}
 8006482:	bf00      	nop
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800648c:	b580      	push	{r7, lr}
 800648e:	b098      	sub	sp, #96	; 0x60
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006498:	f3ef 8311 	mrs	r3, BASEPRI
 800649c:	f04f 0120 	mov.w	r1, #32
 80064a0:	f381 8811 	msr	BASEPRI, r1
 80064a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a6:	48b7      	ldr	r0, [pc, #732]	; (8006784 <_VPrintTarget+0x2f8>)
 80064a8:	f7ff fbee 	bl	8005c88 <_PreparePacket>
 80064ac:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80064ae:	4bb5      	ldr	r3, [pc, #724]	; (8006784 <_VPrintTarget+0x2f8>)
 80064b0:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80064b2:	2300      	movs	r3, #0
 80064b4:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	3301      	adds	r3, #1
 80064be:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3301      	adds	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80064d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 81a8 	beq.w	800682c <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80064dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064e0:	2b25      	cmp	r3, #37	; 0x25
 80064e2:	f040 8195 	bne.w	8006810 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80064e6:	2300      	movs	r3, #0
 80064e8:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80064ea:	2301      	movs	r3, #1
 80064ec:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80064f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064fa:	3b23      	subs	r3, #35	; 0x23
 80064fc:	2b0d      	cmp	r3, #13
 80064fe:	d83f      	bhi.n	8006580 <_VPrintTarget+0xf4>
 8006500:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <_VPrintTarget+0x7c>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	08006571 	.word	0x08006571
 800650c:	08006581 	.word	0x08006581
 8006510:	08006581 	.word	0x08006581
 8006514:	08006581 	.word	0x08006581
 8006518:	08006581 	.word	0x08006581
 800651c:	08006581 	.word	0x08006581
 8006520:	08006581 	.word	0x08006581
 8006524:	08006581 	.word	0x08006581
 8006528:	08006561 	.word	0x08006561
 800652c:	08006581 	.word	0x08006581
 8006530:	08006541 	.word	0x08006541
 8006534:	08006581 	.word	0x08006581
 8006538:	08006581 	.word	0x08006581
 800653c:	08006551 	.word	0x08006551
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	64bb      	str	r3, [r7, #72]	; 0x48
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	e01a      	b.n	8006586 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006552:	f043 0302 	orr.w	r3, r3, #2
 8006556:	64bb      	str	r3, [r7, #72]	; 0x48
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3301      	adds	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	e012      	b.n	8006586 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006562:	f043 0304 	orr.w	r3, r3, #4
 8006566:	64bb      	str	r3, [r7, #72]	; 0x48
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3301      	adds	r3, #1
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	e00a      	b.n	8006586 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006572:	f043 0308 	orr.w	r3, r3, #8
 8006576:	64bb      	str	r3, [r7, #72]	; 0x48
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3301      	adds	r3, #1
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	e002      	b.n	8006586 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006580:	2300      	movs	r3, #0
 8006582:	653b      	str	r3, [r7, #80]	; 0x50
 8006584:	bf00      	nop
        }
      } while (v);
 8006586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1b0      	bne.n	80064ee <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800658c:	2300      	movs	r3, #0
 800658e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006598:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800659c:	2b2f      	cmp	r3, #47	; 0x2f
 800659e:	d912      	bls.n	80065c6 <_VPrintTarget+0x13a>
 80065a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065a4:	2b39      	cmp	r3, #57	; 0x39
 80065a6:	d80e      	bhi.n	80065c6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3301      	adds	r3, #1
 80065ac:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80065ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065b0:	4613      	mov	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	461a      	mov	r2, r3
 80065ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065be:	4413      	add	r3, r2
 80065c0:	3b30      	subs	r3, #48	; 0x30
 80065c2:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80065c4:	e7e4      	b.n	8006590 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80065c6:	2300      	movs	r3, #0
 80065c8:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80065d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065d6:	2b2e      	cmp	r3, #46	; 0x2e
 80065d8:	d11d      	bne.n	8006616 <_VPrintTarget+0x18a>
        sFormat++;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3301      	adds	r3, #1
 80065de:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80065e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065ec:	2b2f      	cmp	r3, #47	; 0x2f
 80065ee:	d912      	bls.n	8006616 <_VPrintTarget+0x18a>
 80065f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065f4:	2b39      	cmp	r3, #57	; 0x39
 80065f6:	d80e      	bhi.n	8006616 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3301      	adds	r3, #1
 80065fc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80065fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	461a      	mov	r2, r3
 800660a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800660e:	4413      	add	r3, r2
 8006610:	3b30      	subs	r3, #48	; 0x30
 8006612:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006614:	e7e4      	b.n	80065e0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800661e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006622:	2b6c      	cmp	r3, #108	; 0x6c
 8006624:	d003      	beq.n	800662e <_VPrintTarget+0x1a2>
 8006626:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800662a:	2b68      	cmp	r3, #104	; 0x68
 800662c:	d107      	bne.n	800663e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3301      	adds	r3, #1
 800663a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800663c:	e7ef      	b.n	800661e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800663e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006642:	2b25      	cmp	r3, #37	; 0x25
 8006644:	f000 80d8 	beq.w	80067f8 <_VPrintTarget+0x36c>
 8006648:	2b25      	cmp	r3, #37	; 0x25
 800664a:	f2c0 80dc 	blt.w	8006806 <_VPrintTarget+0x37a>
 800664e:	2b78      	cmp	r3, #120	; 0x78
 8006650:	f300 80d9 	bgt.w	8006806 <_VPrintTarget+0x37a>
 8006654:	2b58      	cmp	r3, #88	; 0x58
 8006656:	f2c0 80d6 	blt.w	8006806 <_VPrintTarget+0x37a>
 800665a:	3b58      	subs	r3, #88	; 0x58
 800665c:	2b20      	cmp	r3, #32
 800665e:	f200 80d2 	bhi.w	8006806 <_VPrintTarget+0x37a>
 8006662:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <_VPrintTarget+0x1dc>)
 8006664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006668:	0800675f 	.word	0x0800675f
 800666c:	08006807 	.word	0x08006807
 8006670:	08006807 	.word	0x08006807
 8006674:	08006807 	.word	0x08006807
 8006678:	08006807 	.word	0x08006807
 800667c:	08006807 	.word	0x08006807
 8006680:	08006807 	.word	0x08006807
 8006684:	08006807 	.word	0x08006807
 8006688:	08006807 	.word	0x08006807
 800668c:	08006807 	.word	0x08006807
 8006690:	08006807 	.word	0x08006807
 8006694:	080066ed 	.word	0x080066ed
 8006698:	08006713 	.word	0x08006713
 800669c:	08006807 	.word	0x08006807
 80066a0:	08006807 	.word	0x08006807
 80066a4:	08006807 	.word	0x08006807
 80066a8:	08006807 	.word	0x08006807
 80066ac:	08006807 	.word	0x08006807
 80066b0:	08006807 	.word	0x08006807
 80066b4:	08006807 	.word	0x08006807
 80066b8:	08006807 	.word	0x08006807
 80066bc:	08006807 	.word	0x08006807
 80066c0:	08006807 	.word	0x08006807
 80066c4:	08006807 	.word	0x08006807
 80066c8:	080067d3 	.word	0x080067d3
 80066cc:	08006807 	.word	0x08006807
 80066d0:	08006807 	.word	0x08006807
 80066d4:	08006789 	.word	0x08006789
 80066d8:	08006807 	.word	0x08006807
 80066dc:	08006739 	.word	0x08006739
 80066e0:	08006807 	.word	0x08006807
 80066e4:	08006807 	.word	0x08006807
 80066e8:	0800675f 	.word	0x0800675f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	1d19      	adds	r1, r3, #4
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6011      	str	r1, [r2, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80066fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8006700:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006704:	f107 0310 	add.w	r3, r7, #16
 8006708:	4611      	mov	r1, r2
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff fd1c 	bl	8006148 <_StoreChar>
        break;
 8006710:	e07a      	b.n	8006808 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	1d19      	adds	r1, r3, #4
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6011      	str	r1, [r2, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006720:	f107 0010 	add.w	r0, r7, #16
 8006724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672e:	220a      	movs	r2, #10
 8006730:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006732:	f7ff fe1b 	bl	800636c <_PrintInt>
        break;
 8006736:	e067      	b.n	8006808 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	1d19      	adds	r1, r3, #4
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6011      	str	r1, [r2, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006746:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006748:	f107 0010 	add.w	r0, r7, #16
 800674c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006756:	220a      	movs	r2, #10
 8006758:	f7ff fd72 	bl	8006240 <_PrintUnsigned>
        break;
 800675c:	e054      	b.n	8006808 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	1d19      	adds	r1, r3, #4
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6011      	str	r1, [r2, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800676c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800676e:	f107 0010 	add.w	r0, r7, #16
 8006772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677c:	2210      	movs	r2, #16
 800677e:	f7ff fd5f 	bl	8006240 <_PrintUnsigned>
        break;
 8006782:	e041      	b.n	8006808 <_VPrintTarget+0x37c>
 8006784:	200143d8 	.word	0x200143d8
      case 's':
        s = va_arg(*pParamList, const char*);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	1d19      	adds	r1, r3, #4
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6011      	str	r1, [r2, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8006796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <_VPrintTarget+0x314>
          s = "(null)";
 800679c:	4b4a      	ldr	r3, [pc, #296]	; (80068c8 <_VPrintTarget+0x43c>)
 800679e:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 80067a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 80067a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067aa:	3301      	adds	r3, #1
 80067ac:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 80067ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00b      	beq.n	80067ce <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80067b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80067ba:	f107 0310 	add.w	r3, r7, #16
 80067be:	4611      	mov	r1, r2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff fcc1 	bl	8006148 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	2b7f      	cmp	r3, #127	; 0x7f
 80067ca:	d9e9      	bls.n	80067a0 <_VPrintTarget+0x314>
        break;
 80067cc:	e01c      	b.n	8006808 <_VPrintTarget+0x37c>
            break;
 80067ce:	bf00      	nop
        break;
 80067d0:	e01a      	b.n	8006808 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	1d19      	adds	r1, r3, #4
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	6011      	str	r1, [r2, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80067e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067e2:	f107 0010 	add.w	r0, r7, #16
 80067e6:	2300      	movs	r3, #0
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	2308      	movs	r3, #8
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	2308      	movs	r3, #8
 80067f0:	2210      	movs	r2, #16
 80067f2:	f7ff fd25 	bl	8006240 <_PrintUnsigned>
        break;
 80067f6:	e007      	b.n	8006808 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80067f8:	f107 0310 	add.w	r3, r7, #16
 80067fc:	2125      	movs	r1, #37	; 0x25
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fca2 	bl	8006148 <_StoreChar>
        break;
 8006804:	e000      	b.n	8006808 <_VPrintTarget+0x37c>
      default:
        break;
 8006806:	bf00      	nop
      }
      sFormat++;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3301      	adds	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e007      	b.n	8006820 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006810:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006814:	f107 0310 	add.w	r3, r7, #16
 8006818:	4611      	mov	r1, r2
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff fc94 	bl	8006148 <_StoreChar>
    }
  } while (*sFormat);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	f47f ae4d 	bne.w	80064c4 <_VPrintTarget+0x38>
 800682a:	e000      	b.n	800682e <_VPrintTarget+0x3a2>
      break;
 800682c:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d041      	beq.n	80068b8 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006834:	6a3a      	ldr	r2, [r7, #32]
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	63bb      	str	r3, [r7, #56]	; 0x38
 8006844:	e00b      	b.n	800685e <_VPrintTarget+0x3d2>
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	b2da      	uxtb	r2, r3
 800684a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684c:	1c59      	adds	r1, r3, #1
 800684e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006850:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685a:	09db      	lsrs	r3, r3, #7
 800685c:	63bb      	str	r3, [r7, #56]	; 0x38
 800685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006860:	2b7f      	cmp	r3, #127	; 0x7f
 8006862:	d8f0      	bhi.n	8006846 <_VPrintTarget+0x3ba>
 8006864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	63fa      	str	r2, [r7, #60]	; 0x3c
 800686a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006872:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	637b      	str	r3, [r7, #52]	; 0x34
 8006878:	2300      	movs	r3, #0
 800687a:	633b      	str	r3, [r7, #48]	; 0x30
 800687c:	e00b      	b.n	8006896 <_VPrintTarget+0x40a>
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	b2da      	uxtb	r2, r3
 8006882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006884:	1c59      	adds	r1, r3, #1
 8006886:	6379      	str	r1, [r7, #52]	; 0x34
 8006888:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	09db      	lsrs	r3, r3, #7
 8006894:	633b      	str	r3, [r7, #48]	; 0x30
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	2b7f      	cmp	r3, #127	; 0x7f
 800689a:	d8f0      	bhi.n	800687e <_VPrintTarget+0x3f2>
 800689c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	637a      	str	r2, [r7, #52]	; 0x34
 80068a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068aa:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	6979      	ldr	r1, [r7, #20]
 80068b0:	221a      	movs	r2, #26
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff fad8 	bl	8005e68 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80068b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ba:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80068be:	bf00      	nop
 80068c0:	3758      	adds	r7, #88	; 0x58
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	08007bc0 	.word	0x08007bc0

080068cc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80068da:	2300      	movs	r3, #0
 80068dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068e0:	4917      	ldr	r1, [pc, #92]	; (8006940 <SEGGER_SYSVIEW_Init+0x74>)
 80068e2:	4818      	ldr	r0, [pc, #96]	; (8006944 <SEGGER_SYSVIEW_Init+0x78>)
 80068e4:	f7ff f8d0 	bl	8005a88 <SEGGER_RTT_AllocUpBuffer>
 80068e8:	4603      	mov	r3, r0
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	4b16      	ldr	r3, [pc, #88]	; (8006948 <SEGGER_SYSVIEW_Init+0x7c>)
 80068ee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80068f0:	4b15      	ldr	r3, [pc, #84]	; (8006948 <SEGGER_SYSVIEW_Init+0x7c>)
 80068f2:	785a      	ldrb	r2, [r3, #1]
 80068f4:	4b14      	ldr	r3, [pc, #80]	; (8006948 <SEGGER_SYSVIEW_Init+0x7c>)
 80068f6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80068f8:	4b13      	ldr	r3, [pc, #76]	; (8006948 <SEGGER_SYSVIEW_Init+0x7c>)
 80068fa:	7e1b      	ldrb	r3, [r3, #24]
 80068fc:	4618      	mov	r0, r3
 80068fe:	2300      	movs	r3, #0
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	2308      	movs	r3, #8
 8006904:	4a11      	ldr	r2, [pc, #68]	; (800694c <SEGGER_SYSVIEW_Init+0x80>)
 8006906:	490f      	ldr	r1, [pc, #60]	; (8006944 <SEGGER_SYSVIEW_Init+0x78>)
 8006908:	f7ff f942 	bl	8005b90 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800690c:	4b0e      	ldr	r3, [pc, #56]	; (8006948 <SEGGER_SYSVIEW_Init+0x7c>)
 800690e:	2200      	movs	r2, #0
 8006910:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006912:	4b0f      	ldr	r3, [pc, #60]	; (8006950 <SEGGER_SYSVIEW_Init+0x84>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a0c      	ldr	r2, [pc, #48]	; (8006948 <SEGGER_SYSVIEW_Init+0x7c>)
 8006918:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800691a:	4a0b      	ldr	r2, [pc, #44]	; (8006948 <SEGGER_SYSVIEW_Init+0x7c>)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006920:	4a09      	ldr	r2, [pc, #36]	; (8006948 <SEGGER_SYSVIEW_Init+0x7c>)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006926:	4a08      	ldr	r2, [pc, #32]	; (8006948 <SEGGER_SYSVIEW_Init+0x7c>)
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800692c:	4a06      	ldr	r2, [pc, #24]	; (8006948 <SEGGER_SYSVIEW_Init+0x7c>)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006932:	4b05      	ldr	r3, [pc, #20]	; (8006948 <SEGGER_SYSVIEW_Init+0x7c>)
 8006934:	2200      	movs	r2, #0
 8006936:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006938:	bf00      	nop
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	200133a0 	.word	0x200133a0
 8006944:	08007bc8 	.word	0x08007bc8
 8006948:	200143a8 	.word	0x200143a8
 800694c:	200143a0 	.word	0x200143a0
 8006950:	e0001004 	.word	0xe0001004

08006954 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800695c:	4a04      	ldr	r2, [pc, #16]	; (8006970 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6113      	str	r3, [r2, #16]
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	200143a8 	.word	0x200143a8

08006974 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800697c:	f3ef 8311 	mrs	r3, BASEPRI
 8006980:	f04f 0120 	mov.w	r1, #32
 8006984:	f381 8811 	msr	BASEPRI, r1
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	4808      	ldr	r0, [pc, #32]	; (80069ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800698c:	f7ff f97c 	bl	8005c88 <_PreparePacket>
 8006990:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	68b9      	ldr	r1, [r7, #8]
 8006996:	68b8      	ldr	r0, [r7, #8]
 8006998:	f7ff fa66 	bl	8005e68 <_SendPacket>
  RECORD_END();
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f383 8811 	msr	BASEPRI, r3
}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	200143d8 	.word	0x200143d8

080069b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069ba:	f3ef 8311 	mrs	r3, BASEPRI
 80069be:	f04f 0120 	mov.w	r1, #32
 80069c2:	f381 8811 	msr	BASEPRI, r1
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	4816      	ldr	r0, [pc, #88]	; (8006a24 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80069ca:	f7ff f95d 	bl	8005c88 <_PreparePacket>
 80069ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	61fb      	str	r3, [r7, #28]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	61bb      	str	r3, [r7, #24]
 80069dc:	e00b      	b.n	80069f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	1c59      	adds	r1, r3, #1
 80069e6:	61f9      	str	r1, [r7, #28]
 80069e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	09db      	lsrs	r3, r3, #7
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b7f      	cmp	r3, #127	; 0x7f
 80069fa:	d8f0      	bhi.n	80069de <SEGGER_SYSVIEW_RecordU32+0x2e>
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	61fa      	str	r2, [r7, #28]
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	68f9      	ldr	r1, [r7, #12]
 8006a10:	6938      	ldr	r0, [r7, #16]
 8006a12:	f7ff fa29 	bl	8005e68 <_SendPacket>
  RECORD_END();
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f383 8811 	msr	BASEPRI, r3
}
 8006a1c:	bf00      	nop
 8006a1e:	3720      	adds	r7, #32
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	200143d8 	.word	0x200143d8

08006a28 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08c      	sub	sp, #48	; 0x30
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a34:	f3ef 8311 	mrs	r3, BASEPRI
 8006a38:	f04f 0120 	mov.w	r1, #32
 8006a3c:	f381 8811 	msr	BASEPRI, r1
 8006a40:	61fb      	str	r3, [r7, #28]
 8006a42:	4825      	ldr	r0, [pc, #148]	; (8006ad8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006a44:	f7ff f920 	bl	8005c88 <_PreparePacket>
 8006a48:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a56:	e00b      	b.n	8006a70 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	1c59      	adds	r1, r3, #1
 8006a60:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	701a      	strb	r2, [r3, #0]
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	09db      	lsrs	r3, r3, #7
 8006a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	2b7f      	cmp	r3, #127	; 0x7f
 8006a74:	d8f0      	bhi.n	8006a58 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a84:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	623b      	str	r3, [r7, #32]
 8006a8e:	e00b      	b.n	8006aa8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	1c59      	adds	r1, r3, #1
 8006a98:	6279      	str	r1, [r7, #36]	; 0x24
 8006a9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a9e:	b2d2      	uxtb	r2, r2
 8006aa0:	701a      	strb	r2, [r3, #0]
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	09db      	lsrs	r3, r3, #7
 8006aa6:	623b      	str	r3, [r7, #32]
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8006aac:	d8f0      	bhi.n	8006a90 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	1c5a      	adds	r2, r3, #1
 8006ab2:	627a      	str	r2, [r7, #36]	; 0x24
 8006ab4:	6a3a      	ldr	r2, [r7, #32]
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	6979      	ldr	r1, [r7, #20]
 8006ac2:	69b8      	ldr	r0, [r7, #24]
 8006ac4:	f7ff f9d0 	bl	8005e68 <_SendPacket>
  RECORD_END();
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	f383 8811 	msr	BASEPRI, r3
}
 8006ace:	bf00      	nop
 8006ad0:	3730      	adds	r7, #48	; 0x30
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	200143d8 	.word	0x200143d8

08006adc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08e      	sub	sp, #56	; 0x38
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006aea:	f3ef 8311 	mrs	r3, BASEPRI
 8006aee:	f04f 0120 	mov.w	r1, #32
 8006af2:	f381 8811 	msr	BASEPRI, r1
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	4832      	ldr	r0, [pc, #200]	; (8006bc4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006afa:	f7ff f8c5 	bl	8005c88 <_PreparePacket>
 8006afe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	637b      	str	r3, [r7, #52]	; 0x34
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	633b      	str	r3, [r7, #48]	; 0x30
 8006b0c:	e00b      	b.n	8006b26 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b14:	1c59      	adds	r1, r3, #1
 8006b16:	6379      	str	r1, [r7, #52]	; 0x34
 8006b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	09db      	lsrs	r3, r3, #7
 8006b24:	633b      	str	r3, [r7, #48]	; 0x30
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	2b7f      	cmp	r3, #127	; 0x7f
 8006b2a:	d8f0      	bhi.n	8006b0e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	637a      	str	r2, [r7, #52]	; 0x34
 8006b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	701a      	strb	r2, [r3, #0]
 8006b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b44:	e00b      	b.n	8006b5e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	1c59      	adds	r1, r3, #1
 8006b4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	09db      	lsrs	r3, r3, #7
 8006b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b60:	2b7f      	cmp	r3, #127	; 0x7f
 8006b62:	d8f0      	bhi.n	8006b46 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	623b      	str	r3, [r7, #32]
 8006b7c:	e00b      	b.n	8006b96 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	1c59      	adds	r1, r3, #1
 8006b86:	6279      	str	r1, [r7, #36]	; 0x24
 8006b88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	09db      	lsrs	r3, r3, #7
 8006b94:	623b      	str	r3, [r7, #32]
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	2b7f      	cmp	r3, #127	; 0x7f
 8006b9a:	d8f0      	bhi.n	8006b7e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	627a      	str	r2, [r7, #36]	; 0x24
 8006ba2:	6a3a      	ldr	r2, [r7, #32]
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	6979      	ldr	r1, [r7, #20]
 8006bb0:	69b8      	ldr	r0, [r7, #24]
 8006bb2:	f7ff f959 	bl	8005e68 <_SendPacket>
  RECORD_END();
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	f383 8811 	msr	BASEPRI, r3
}
 8006bbc:	bf00      	nop
 8006bbe:	3738      	adds	r7, #56	; 0x38
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	200143d8 	.word	0x200143d8

08006bc8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b090      	sub	sp, #64	; 0x40
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bda:	f04f 0120 	mov.w	r1, #32
 8006bde:	f381 8811 	msr	BASEPRI, r1
 8006be2:	61fb      	str	r3, [r7, #28]
 8006be4:	4840      	ldr	r0, [pc, #256]	; (8006ce8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006be6:	f7ff f84f 	bl	8005c88 <_PreparePacket>
 8006bea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bf8:	e00b      	b.n	8006c12 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c00:	1c59      	adds	r1, r3, #1
 8006c02:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006c04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0e:	09db      	lsrs	r3, r3, #7
 8006c10:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c14:	2b7f      	cmp	r3, #127	; 0x7f
 8006c16:	d8f0      	bhi.n	8006bfa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8006c30:	e00b      	b.n	8006c4a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c38:	1c59      	adds	r1, r3, #1
 8006c3a:	6379      	str	r1, [r7, #52]	; 0x34
 8006c3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c40:	b2d2      	uxtb	r2, r2
 8006c42:	701a      	strb	r2, [r3, #0]
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	09db      	lsrs	r3, r3, #7
 8006c48:	633b      	str	r3, [r7, #48]	; 0x30
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c4e:	d8f0      	bhi.n	8006c32 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	637a      	str	r2, [r7, #52]	; 0x34
 8006c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c68:	e00b      	b.n	8006c82 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	1c59      	adds	r1, r3, #1
 8006c72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c78:	b2d2      	uxtb	r2, r2
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	09db      	lsrs	r3, r3, #7
 8006c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	2b7f      	cmp	r3, #127	; 0x7f
 8006c86:	d8f0      	bhi.n	8006c6a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c9e:	623b      	str	r3, [r7, #32]
 8006ca0:	e00b      	b.n	8006cba <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	1c59      	adds	r1, r3, #1
 8006caa:	6279      	str	r1, [r7, #36]	; 0x24
 8006cac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	701a      	strb	r2, [r3, #0]
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	09db      	lsrs	r3, r3, #7
 8006cb8:	623b      	str	r3, [r7, #32]
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	2b7f      	cmp	r3, #127	; 0x7f
 8006cbe:	d8f0      	bhi.n	8006ca2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	627a      	str	r2, [r7, #36]	; 0x24
 8006cc6:	6a3a      	ldr	r2, [r7, #32]
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	6979      	ldr	r1, [r7, #20]
 8006cd4:	69b8      	ldr	r0, [r7, #24]
 8006cd6:	f7ff f8c7 	bl	8005e68 <_SendPacket>
  RECORD_END();
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	f383 8811 	msr	BASEPRI, r3
}
 8006ce0:	bf00      	nop
 8006ce2:	3740      	adds	r7, #64	; 0x40
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	200143d8 	.word	0x200143d8

08006cec <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b092      	sub	sp, #72	; 0x48
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cfa:	f3ef 8311 	mrs	r3, BASEPRI
 8006cfe:	f04f 0120 	mov.w	r1, #32
 8006d02:	f381 8811 	msr	BASEPRI, r1
 8006d06:	61fb      	str	r3, [r7, #28]
 8006d08:	484e      	ldr	r0, [pc, #312]	; (8006e44 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8006d0a:	f7fe ffbd 	bl	8005c88 <_PreparePacket>
 8006d0e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	647b      	str	r3, [r7, #68]	; 0x44
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	643b      	str	r3, [r7, #64]	; 0x40
 8006d1c:	e00b      	b.n	8006d36 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8006d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d24:	1c59      	adds	r1, r3, #1
 8006d26:	6479      	str	r1, [r7, #68]	; 0x44
 8006d28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d32:	09db      	lsrs	r3, r3, #7
 8006d34:	643b      	str	r3, [r7, #64]	; 0x40
 8006d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d38:	2b7f      	cmp	r3, #127	; 0x7f
 8006d3a:	d8f0      	bhi.n	8006d1e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	647a      	str	r2, [r7, #68]	; 0x44
 8006d42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	701a      	strb	r2, [r3, #0]
 8006d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d54:	e00b      	b.n	8006d6e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d5c:	1c59      	adds	r1, r3, #1
 8006d5e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006d60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	701a      	strb	r2, [r3, #0]
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	09db      	lsrs	r3, r3, #7
 8006d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d70:	2b7f      	cmp	r3, #127	; 0x7f
 8006d72:	d8f0      	bhi.n	8006d56 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8006d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	701a      	strb	r2, [r3, #0]
 8006d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	637b      	str	r3, [r7, #52]	; 0x34
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d8c:	e00b      	b.n	8006da6 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d94:	1c59      	adds	r1, r3, #1
 8006d96:	6379      	str	r1, [r7, #52]	; 0x34
 8006d98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d9c:	b2d2      	uxtb	r2, r2
 8006d9e:	701a      	strb	r2, [r3, #0]
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	09db      	lsrs	r3, r3, #7
 8006da4:	633b      	str	r3, [r7, #48]	; 0x30
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	2b7f      	cmp	r3, #127	; 0x7f
 8006daa:	d8f0      	bhi.n	8006d8e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8006dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	637a      	str	r2, [r7, #52]	; 0x34
 8006db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	701a      	strb	r2, [r3, #0]
 8006db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dc4:	e00b      	b.n	8006dde <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dcc:	1c59      	adds	r1, r3, #1
 8006dce:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006dd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	09db      	lsrs	r3, r3, #7
 8006ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	2b7f      	cmp	r3, #127	; 0x7f
 8006de2:	d8f0      	bhi.n	8006dc6 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8006de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	701a      	strb	r2, [r3, #0]
 8006df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
 8006df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dfa:	623b      	str	r3, [r7, #32]
 8006dfc:	e00b      	b.n	8006e16 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	1c59      	adds	r1, r3, #1
 8006e06:	6279      	str	r1, [r7, #36]	; 0x24
 8006e08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	701a      	strb	r2, [r3, #0]
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	09db      	lsrs	r3, r3, #7
 8006e14:	623b      	str	r3, [r7, #32]
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	2b7f      	cmp	r3, #127	; 0x7f
 8006e1a:	d8f0      	bhi.n	8006dfe <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	627a      	str	r2, [r7, #36]	; 0x24
 8006e22:	6a3a      	ldr	r2, [r7, #32]
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	6979      	ldr	r1, [r7, #20]
 8006e30:	69b8      	ldr	r0, [r7, #24]
 8006e32:	f7ff f819 	bl	8005e68 <_SendPacket>
  RECORD_END();
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	f383 8811 	msr	BASEPRI, r3
}
 8006e3c:	bf00      	nop
 8006e3e:	3748      	adds	r7, #72	; 0x48
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	200143d8 	.word	0x200143d8

08006e48 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08c      	sub	sp, #48	; 0x30
 8006e4c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006e4e:	4b59      	ldr	r3, [pc, #356]	; (8006fb4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006e54:	f3ef 8311 	mrs	r3, BASEPRI
 8006e58:	f04f 0120 	mov.w	r1, #32
 8006e5c:	f381 8811 	msr	BASEPRI, r1
 8006e60:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006e62:	4b54      	ldr	r3, [pc, #336]	; (8006fb4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e64:	785b      	ldrb	r3, [r3, #1]
 8006e66:	220a      	movs	r2, #10
 8006e68:	4953      	ldr	r1, [pc, #332]	; (8006fb8 <SEGGER_SYSVIEW_Start+0x170>)
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7f9 f9d0 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006e76:	f7fe fad9 	bl	800542c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006e7a:	200a      	movs	r0, #10
 8006e7c:	f7ff fd7a 	bl	8006974 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e80:	f3ef 8311 	mrs	r3, BASEPRI
 8006e84:	f04f 0120 	mov.w	r1, #32
 8006e88:	f381 8811 	msr	BASEPRI, r1
 8006e8c:	60bb      	str	r3, [r7, #8]
 8006e8e:	484b      	ldr	r0, [pc, #300]	; (8006fbc <SEGGER_SYSVIEW_Start+0x174>)
 8006e90:	f7fe fefa 	bl	8005c88 <_PreparePacket>
 8006e94:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e9e:	4b45      	ldr	r3, [pc, #276]	; (8006fb4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ea4:	e00b      	b.n	8006ebe <SEGGER_SYSVIEW_Start+0x76>
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eac:	1c59      	adds	r1, r3, #1
 8006eae:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006eb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eb4:	b2d2      	uxtb	r2, r2
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	09db      	lsrs	r3, r3, #7
 8006ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec2:	d8f0      	bhi.n	8006ea6 <SEGGER_SYSVIEW_Start+0x5e>
 8006ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed8:	4b36      	ldr	r3, [pc, #216]	; (8006fb4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	623b      	str	r3, [r7, #32]
 8006ede:	e00b      	b.n	8006ef8 <SEGGER_SYSVIEW_Start+0xb0>
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	1c59      	adds	r1, r3, #1
 8006ee8:	6279      	str	r1, [r7, #36]	; 0x24
 8006eea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	09db      	lsrs	r3, r3, #7
 8006ef6:	623b      	str	r3, [r7, #32]
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	2b7f      	cmp	r3, #127	; 0x7f
 8006efc:	d8f0      	bhi.n	8006ee0 <SEGGER_SYSVIEW_Start+0x98>
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	627a      	str	r2, [r7, #36]	; 0x24
 8006f04:	6a3a      	ldr	r2, [r7, #32]
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	61fb      	str	r3, [r7, #28]
 8006f12:	4b28      	ldr	r3, [pc, #160]	; (8006fb4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	61bb      	str	r3, [r7, #24]
 8006f18:	e00b      	b.n	8006f32 <SEGGER_SYSVIEW_Start+0xea>
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	1c59      	adds	r1, r3, #1
 8006f22:	61f9      	str	r1, [r7, #28]
 8006f24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	701a      	strb	r2, [r3, #0]
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	09db      	lsrs	r3, r3, #7
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	2b7f      	cmp	r3, #127	; 0x7f
 8006f36:	d8f0      	bhi.n	8006f1a <SEGGER_SYSVIEW_Start+0xd2>
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	61fa      	str	r2, [r7, #28]
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	701a      	strb	r2, [r3, #0]
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	617b      	str	r3, [r7, #20]
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	613b      	str	r3, [r7, #16]
 8006f50:	e00b      	b.n	8006f6a <SEGGER_SYSVIEW_Start+0x122>
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	1c59      	adds	r1, r3, #1
 8006f5a:	6179      	str	r1, [r7, #20]
 8006f5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f60:	b2d2      	uxtb	r2, r2
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	09db      	lsrs	r3, r3, #7
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f6e:	d8f0      	bhi.n	8006f52 <SEGGER_SYSVIEW_Start+0x10a>
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	617a      	str	r2, [r7, #20]
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006f80:	2218      	movs	r2, #24
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7fe ff6f 	bl	8005e68 <_SendPacket>
      RECORD_END();
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006f90:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006f98:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006f9e:	f000 f9eb 	bl	8007378 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006fa2:	f000 f9b1 	bl	8007308 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006fa6:	f000 fc2d 	bl	8007804 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006faa:	bf00      	nop
 8006fac:	3730      	adds	r7, #48	; 0x30
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	200143a8 	.word	0x200143a8
 8006fb8:	08007c08 	.word	0x08007c08
 8006fbc:	200143d8 	.word	0x200143d8

08006fc0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fc6:	f3ef 8311 	mrs	r3, BASEPRI
 8006fca:	f04f 0120 	mov.w	r1, #32
 8006fce:	f381 8811 	msr	BASEPRI, r1
 8006fd2:	607b      	str	r3, [r7, #4]
 8006fd4:	480b      	ldr	r0, [pc, #44]	; (8007004 <SEGGER_SYSVIEW_Stop+0x44>)
 8006fd6:	f7fe fe57 	bl	8005c88 <_PreparePacket>
 8006fda:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <SEGGER_SYSVIEW_Stop+0x48>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d007      	beq.n	8006ff4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006fe4:	220b      	movs	r2, #11
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6838      	ldr	r0, [r7, #0]
 8006fea:	f7fe ff3d 	bl	8005e68 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006fee:	4b06      	ldr	r3, [pc, #24]	; (8007008 <SEGGER_SYSVIEW_Stop+0x48>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f383 8811 	msr	BASEPRI, r3
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	200143d8 	.word	0x200143d8
 8007008:	200143a8 	.word	0x200143a8

0800700c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800700c:	b580      	push	{r7, lr}
 800700e:	b08c      	sub	sp, #48	; 0x30
 8007010:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007012:	f3ef 8311 	mrs	r3, BASEPRI
 8007016:	f04f 0120 	mov.w	r1, #32
 800701a:	f381 8811 	msr	BASEPRI, r1
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	4845      	ldr	r0, [pc, #276]	; (8007138 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007022:	f7fe fe31 	bl	8005c88 <_PreparePacket>
 8007026:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007030:	4b42      	ldr	r3, [pc, #264]	; (800713c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	62bb      	str	r3, [r7, #40]	; 0x28
 8007036:	e00b      	b.n	8007050 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	b2da      	uxtb	r2, r3
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	1c59      	adds	r1, r3, #1
 8007040:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007042:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	09db      	lsrs	r3, r3, #7
 800704e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	2b7f      	cmp	r3, #127	; 0x7f
 8007054:	d8f0      	bhi.n	8007038 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800705c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007064:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	627b      	str	r3, [r7, #36]	; 0x24
 800706a:	4b34      	ldr	r3, [pc, #208]	; (800713c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	623b      	str	r3, [r7, #32]
 8007070:	e00b      	b.n	800708a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	b2da      	uxtb	r2, r3
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	1c59      	adds	r1, r3, #1
 800707a:	6279      	str	r1, [r7, #36]	; 0x24
 800707c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007080:	b2d2      	uxtb	r2, r2
 8007082:	701a      	strb	r2, [r3, #0]
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	09db      	lsrs	r3, r3, #7
 8007088:	623b      	str	r3, [r7, #32]
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	2b7f      	cmp	r3, #127	; 0x7f
 800708e:	d8f0      	bhi.n	8007072 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	627a      	str	r2, [r7, #36]	; 0x24
 8007096:	6a3a      	ldr	r2, [r7, #32]
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	61fb      	str	r3, [r7, #28]
 80070a4:	4b25      	ldr	r3, [pc, #148]	; (800713c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	61bb      	str	r3, [r7, #24]
 80070aa:	e00b      	b.n	80070c4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	1c59      	adds	r1, r3, #1
 80070b4:	61f9      	str	r1, [r7, #28]
 80070b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	09db      	lsrs	r3, r3, #7
 80070c2:	61bb      	str	r3, [r7, #24]
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	2b7f      	cmp	r3, #127	; 0x7f
 80070c8:	d8f0      	bhi.n	80070ac <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	61fa      	str	r2, [r7, #28]
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	2300      	movs	r3, #0
 80070e0:	613b      	str	r3, [r7, #16]
 80070e2:	e00b      	b.n	80070fc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	1c59      	adds	r1, r3, #1
 80070ec:	6179      	str	r1, [r7, #20]
 80070ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070f2:	b2d2      	uxtb	r2, r2
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	09db      	lsrs	r3, r3, #7
 80070fa:	613b      	str	r3, [r7, #16]
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007100:	d8f0      	bhi.n	80070e4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	617a      	str	r2, [r7, #20]
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007112:	2218      	movs	r2, #24
 8007114:	6879      	ldr	r1, [r7, #4]
 8007116:	68b8      	ldr	r0, [r7, #8]
 8007118:	f7fe fea6 	bl	8005e68 <_SendPacket>
  RECORD_END();
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007122:	4b06      	ldr	r3, [pc, #24]	; (800713c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800712a:	4b04      	ldr	r3, [pc, #16]	; (800713c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	4798      	blx	r3
  }
}
 8007130:	bf00      	nop
 8007132:	3730      	adds	r7, #48	; 0x30
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	200143d8 	.word	0x200143d8
 800713c:	200143a8 	.word	0x200143a8

08007140 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007140:	b580      	push	{r7, lr}
 8007142:	b092      	sub	sp, #72	; 0x48
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007148:	f3ef 8311 	mrs	r3, BASEPRI
 800714c:	f04f 0120 	mov.w	r1, #32
 8007150:	f381 8811 	msr	BASEPRI, r1
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	486a      	ldr	r0, [pc, #424]	; (8007300 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007158:	f7fe fd96 	bl	8005c88 <_PreparePacket>
 800715c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	647b      	str	r3, [r7, #68]	; 0x44
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	4b66      	ldr	r3, [pc, #408]	; (8007304 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	643b      	str	r3, [r7, #64]	; 0x40
 8007172:	e00b      	b.n	800718c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007176:	b2da      	uxtb	r2, r3
 8007178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800717a:	1c59      	adds	r1, r3, #1
 800717c:	6479      	str	r1, [r7, #68]	; 0x44
 800717e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007188:	09db      	lsrs	r3, r3, #7
 800718a:	643b      	str	r3, [r7, #64]	; 0x40
 800718c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800718e:	2b7f      	cmp	r3, #127	; 0x7f
 8007190:	d8f0      	bhi.n	8007174 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	647a      	str	r2, [r7, #68]	; 0x44
 8007198:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	701a      	strb	r2, [r3, #0]
 800719e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80071ac:	e00b      	b.n	80071c6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b4:	1c59      	adds	r1, r3, #1
 80071b6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80071b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	701a      	strb	r2, [r3, #0]
 80071c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c2:	09db      	lsrs	r3, r3, #7
 80071c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	2b7f      	cmp	r3, #127	; 0x7f
 80071ca:	d8f0      	bhi.n	80071ae <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80071cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80071d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071da:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	4619      	mov	r1, r3
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f7fe fd1f 	bl	8005c28 <_EncodeStr>
 80071ea:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80071ec:	2209      	movs	r2, #9
 80071ee:	68f9      	ldr	r1, [r7, #12]
 80071f0:	6938      	ldr	r0, [r7, #16]
 80071f2:	f7fe fe39 	bl	8005e68 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	637b      	str	r3, [r7, #52]	; 0x34
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	4b40      	ldr	r3, [pc, #256]	; (8007304 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	633b      	str	r3, [r7, #48]	; 0x30
 800720a:	e00b      	b.n	8007224 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720e:	b2da      	uxtb	r2, r3
 8007210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007212:	1c59      	adds	r1, r3, #1
 8007214:	6379      	str	r1, [r7, #52]	; 0x34
 8007216:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	09db      	lsrs	r3, r3, #7
 8007222:	633b      	str	r3, [r7, #48]	; 0x30
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	2b7f      	cmp	r3, #127	; 0x7f
 8007228:	d8f0      	bhi.n	800720c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800722a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	637a      	str	r2, [r7, #52]	; 0x34
 8007230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007232:	b2d2      	uxtb	r2, r2
 8007234:	701a      	strb	r2, [r3, #0]
 8007236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007238:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	62bb      	str	r3, [r7, #40]	; 0x28
 8007244:	e00b      	b.n	800725e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	b2da      	uxtb	r2, r3
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724c:	1c59      	adds	r1, r3, #1
 800724e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007250:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	09db      	lsrs	r3, r3, #7
 800725c:	62bb      	str	r3, [r7, #40]	; 0x28
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	2b7f      	cmp	r3, #127	; 0x7f
 8007262:	d8f0      	bhi.n	8007246 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	62fa      	str	r2, [r7, #44]	; 0x2c
 800726a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007272:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	627b      	str	r3, [r7, #36]	; 0x24
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	623b      	str	r3, [r7, #32]
 800727e:	e00b      	b.n	8007298 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	b2da      	uxtb	r2, r3
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	1c59      	adds	r1, r3, #1
 8007288:	6279      	str	r1, [r7, #36]	; 0x24
 800728a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	09db      	lsrs	r3, r3, #7
 8007296:	623b      	str	r3, [r7, #32]
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	2b7f      	cmp	r3, #127	; 0x7f
 800729c:	d8f0      	bhi.n	8007280 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	627a      	str	r2, [r7, #36]	; 0x24
 80072a4:	6a3a      	ldr	r2, [r7, #32]
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	e00b      	b.n	80072d0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	1c59      	adds	r1, r3, #1
 80072c0:	61f9      	str	r1, [r7, #28]
 80072c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072c6:	b2d2      	uxtb	r2, r2
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	09db      	lsrs	r3, r3, #7
 80072ce:	61bb      	str	r3, [r7, #24]
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	2b7f      	cmp	r3, #127	; 0x7f
 80072d4:	d8f0      	bhi.n	80072b8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	61fa      	str	r2, [r7, #28]
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	701a      	strb	r2, [r3, #0]
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80072e6:	2215      	movs	r2, #21
 80072e8:	68f9      	ldr	r1, [r7, #12]
 80072ea:	6938      	ldr	r0, [r7, #16]
 80072ec:	f7fe fdbc 	bl	8005e68 <_SendPacket>
  RECORD_END();
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f383 8811 	msr	BASEPRI, r3
}
 80072f6:	bf00      	nop
 80072f8:	3748      	adds	r7, #72	; 0x48
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	200143d8 	.word	0x200143d8
 8007304:	200143a8 	.word	0x200143a8

08007308 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800730c:	4b07      	ldr	r3, [pc, #28]	; (800732c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d008      	beq.n	8007326 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007314:	4b05      	ldr	r3, [pc, #20]	; (800732c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800731e:	4b03      	ldr	r3, [pc, #12]	; (800732c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	4798      	blx	r3
  }
}
 8007326:	bf00      	nop
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	200143a8 	.word	0x200143a8

08007330 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007338:	f3ef 8311 	mrs	r3, BASEPRI
 800733c:	f04f 0120 	mov.w	r1, #32
 8007340:	f381 8811 	msr	BASEPRI, r1
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	480b      	ldr	r0, [pc, #44]	; (8007374 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007348:	f7fe fc9e 	bl	8005c88 <_PreparePacket>
 800734c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800734e:	2280      	movs	r2, #128	; 0x80
 8007350:	6879      	ldr	r1, [r7, #4]
 8007352:	6938      	ldr	r0, [r7, #16]
 8007354:	f7fe fc68 	bl	8005c28 <_EncodeStr>
 8007358:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800735a:	220e      	movs	r2, #14
 800735c:	68f9      	ldr	r1, [r7, #12]
 800735e:	6938      	ldr	r0, [r7, #16]
 8007360:	f7fe fd82 	bl	8005e68 <_SendPacket>
  RECORD_END();
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f383 8811 	msr	BASEPRI, r3
}
 800736a:	bf00      	nop
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	200143d8 	.word	0x200143d8

08007378 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007378:	b590      	push	{r4, r7, lr}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800737e:	4b15      	ldr	r3, [pc, #84]	; (80073d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d01a      	beq.n	80073bc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007386:	4b13      	ldr	r3, [pc, #76]	; (80073d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d015      	beq.n	80073bc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007390:	4b10      	ldr	r3, [pc, #64]	; (80073d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4798      	blx	r3
 8007398:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800739c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800739e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073a2:	f04f 0200 	mov.w	r2, #0
 80073a6:	f04f 0300 	mov.w	r3, #0
 80073aa:	000a      	movs	r2, r1
 80073ac:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80073ae:	4613      	mov	r3, r2
 80073b0:	461a      	mov	r2, r3
 80073b2:	4621      	mov	r1, r4
 80073b4:	200d      	movs	r0, #13
 80073b6:	f7ff fb37 	bl	8006a28 <SEGGER_SYSVIEW_RecordU32x2>
 80073ba:	e006      	b.n	80073ca <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80073bc:	4b06      	ldr	r3, [pc, #24]	; (80073d8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4619      	mov	r1, r3
 80073c2:	200c      	movs	r0, #12
 80073c4:	f7ff faf4 	bl	80069b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80073c8:	bf00      	nop
 80073ca:	bf00      	nop
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd90      	pop	{r4, r7, pc}
 80073d2:	bf00      	nop
 80073d4:	200143a8 	.word	0x200143a8
 80073d8:	e0001004 	.word	0xe0001004

080073dc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80073e2:	f3ef 8311 	mrs	r3, BASEPRI
 80073e6:	f04f 0120 	mov.w	r1, #32
 80073ea:	f381 8811 	msr	BASEPRI, r1
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	4819      	ldr	r0, [pc, #100]	; (8007458 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80073f2:	f7fe fc49 	bl	8005c88 <_PreparePacket>
 80073f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80073fc:	4b17      	ldr	r3, [pc, #92]	; (800745c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007404:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	613b      	str	r3, [r7, #16]
 800740e:	e00b      	b.n	8007428 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	b2da      	uxtb	r2, r3
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	1c59      	adds	r1, r3, #1
 8007418:	6179      	str	r1, [r7, #20]
 800741a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	09db      	lsrs	r3, r3, #7
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b7f      	cmp	r3, #127	; 0x7f
 800742c:	d8f0      	bhi.n	8007410 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	617a      	str	r2, [r7, #20]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	701a      	strb	r2, [r3, #0]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800743e:	2202      	movs	r2, #2
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	68b8      	ldr	r0, [r7, #8]
 8007444:	f7fe fd10 	bl	8005e68 <_SendPacket>
  RECORD_END();
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f383 8811 	msr	BASEPRI, r3
}
 800744e:	bf00      	nop
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	200143d8 	.word	0x200143d8
 800745c:	e000ed04 	.word	0xe000ed04

08007460 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007466:	f3ef 8311 	mrs	r3, BASEPRI
 800746a:	f04f 0120 	mov.w	r1, #32
 800746e:	f381 8811 	msr	BASEPRI, r1
 8007472:	607b      	str	r3, [r7, #4]
 8007474:	4807      	ldr	r0, [pc, #28]	; (8007494 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007476:	f7fe fc07 	bl	8005c88 <_PreparePacket>
 800747a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800747c:	2203      	movs	r2, #3
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6838      	ldr	r0, [r7, #0]
 8007482:	f7fe fcf1 	bl	8005e68 <_SendPacket>
  RECORD_END();
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f383 8811 	msr	BASEPRI, r3
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	200143d8 	.word	0x200143d8

08007498 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800749e:	f3ef 8311 	mrs	r3, BASEPRI
 80074a2:	f04f 0120 	mov.w	r1, #32
 80074a6:	f381 8811 	msr	BASEPRI, r1
 80074aa:	607b      	str	r3, [r7, #4]
 80074ac:	4807      	ldr	r0, [pc, #28]	; (80074cc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80074ae:	f7fe fbeb 	bl	8005c88 <_PreparePacket>
 80074b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80074b4:	2212      	movs	r2, #18
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6838      	ldr	r0, [r7, #0]
 80074ba:	f7fe fcd5 	bl	8005e68 <_SendPacket>
  RECORD_END();
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f383 8811 	msr	BASEPRI, r3
}
 80074c4:	bf00      	nop
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	200143d8 	.word	0x200143d8

080074d0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074d6:	f3ef 8311 	mrs	r3, BASEPRI
 80074da:	f04f 0120 	mov.w	r1, #32
 80074de:	f381 8811 	msr	BASEPRI, r1
 80074e2:	607b      	str	r3, [r7, #4]
 80074e4:	4807      	ldr	r0, [pc, #28]	; (8007504 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80074e6:	f7fe fbcf 	bl	8005c88 <_PreparePacket>
 80074ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80074ec:	2211      	movs	r2, #17
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6838      	ldr	r0, [r7, #0]
 80074f2:	f7fe fcb9 	bl	8005e68 <_SendPacket>
  RECORD_END();
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f383 8811 	msr	BASEPRI, r3
}
 80074fc:	bf00      	nop
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	200143d8 	.word	0x200143d8

08007508 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b088      	sub	sp, #32
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007510:	f3ef 8311 	mrs	r3, BASEPRI
 8007514:	f04f 0120 	mov.w	r1, #32
 8007518:	f381 8811 	msr	BASEPRI, r1
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	4819      	ldr	r0, [pc, #100]	; (8007584 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007520:	f7fe fbb2 	bl	8005c88 <_PreparePacket>
 8007524:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800752a:	4b17      	ldr	r3, [pc, #92]	; (8007588 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	61bb      	str	r3, [r7, #24]
 800753c:	e00b      	b.n	8007556 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	b2da      	uxtb	r2, r3
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	1c59      	adds	r1, r3, #1
 8007546:	61f9      	str	r1, [r7, #28]
 8007548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800754c:	b2d2      	uxtb	r2, r2
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	09db      	lsrs	r3, r3, #7
 8007554:	61bb      	str	r3, [r7, #24]
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	2b7f      	cmp	r3, #127	; 0x7f
 800755a:	d8f0      	bhi.n	800753e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	61fa      	str	r2, [r7, #28]
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	b2d2      	uxtb	r2, r2
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800756c:	2208      	movs	r2, #8
 800756e:	68f9      	ldr	r1, [r7, #12]
 8007570:	6938      	ldr	r0, [r7, #16]
 8007572:	f7fe fc79 	bl	8005e68 <_SendPacket>
  RECORD_END();
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f383 8811 	msr	BASEPRI, r3
}
 800757c:	bf00      	nop
 800757e:	3720      	adds	r7, #32
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	200143d8 	.word	0x200143d8
 8007588:	200143a8 	.word	0x200143a8

0800758c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007594:	f3ef 8311 	mrs	r3, BASEPRI
 8007598:	f04f 0120 	mov.w	r1, #32
 800759c:	f381 8811 	msr	BASEPRI, r1
 80075a0:	617b      	str	r3, [r7, #20]
 80075a2:	4819      	ldr	r0, [pc, #100]	; (8007608 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80075a4:	f7fe fb70 	bl	8005c88 <_PreparePacket>
 80075a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80075ae:	4b17      	ldr	r3, [pc, #92]	; (800760c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	61fb      	str	r3, [r7, #28]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	61bb      	str	r3, [r7, #24]
 80075c0:	e00b      	b.n	80075da <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	1c59      	adds	r1, r3, #1
 80075ca:	61f9      	str	r1, [r7, #28]
 80075cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075d0:	b2d2      	uxtb	r2, r2
 80075d2:	701a      	strb	r2, [r3, #0]
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	09db      	lsrs	r3, r3, #7
 80075d8:	61bb      	str	r3, [r7, #24]
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b7f      	cmp	r3, #127	; 0x7f
 80075de:	d8f0      	bhi.n	80075c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	61fa      	str	r2, [r7, #28]
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	b2d2      	uxtb	r2, r2
 80075ea:	701a      	strb	r2, [r3, #0]
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80075f0:	2204      	movs	r2, #4
 80075f2:	68f9      	ldr	r1, [r7, #12]
 80075f4:	6938      	ldr	r0, [r7, #16]
 80075f6:	f7fe fc37 	bl	8005e68 <_SendPacket>
  RECORD_END();
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f383 8811 	msr	BASEPRI, r3
}
 8007600:	bf00      	nop
 8007602:	3720      	adds	r7, #32
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	200143d8 	.word	0x200143d8
 800760c:	200143a8 	.word	0x200143a8

08007610 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007618:	f3ef 8311 	mrs	r3, BASEPRI
 800761c:	f04f 0120 	mov.w	r1, #32
 8007620:	f381 8811 	msr	BASEPRI, r1
 8007624:	617b      	str	r3, [r7, #20]
 8007626:	4819      	ldr	r0, [pc, #100]	; (800768c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007628:	f7fe fb2e 	bl	8005c88 <_PreparePacket>
 800762c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007632:	4b17      	ldr	r3, [pc, #92]	; (8007690 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	61fb      	str	r3, [r7, #28]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	61bb      	str	r3, [r7, #24]
 8007644:	e00b      	b.n	800765e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	b2da      	uxtb	r2, r3
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	1c59      	adds	r1, r3, #1
 800764e:	61f9      	str	r1, [r7, #28]
 8007650:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	09db      	lsrs	r3, r3, #7
 800765c:	61bb      	str	r3, [r7, #24]
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2b7f      	cmp	r3, #127	; 0x7f
 8007662:	d8f0      	bhi.n	8007646 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	61fa      	str	r2, [r7, #28]
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	b2d2      	uxtb	r2, r2
 800766e:	701a      	strb	r2, [r3, #0]
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007674:	2206      	movs	r2, #6
 8007676:	68f9      	ldr	r1, [r7, #12]
 8007678:	6938      	ldr	r0, [r7, #16]
 800767a:	f7fe fbf5 	bl	8005e68 <_SendPacket>
  RECORD_END();
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f383 8811 	msr	BASEPRI, r3
}
 8007684:	bf00      	nop
 8007686:	3720      	adds	r7, #32
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	200143d8 	.word	0x200143d8
 8007690:	200143a8 	.word	0x200143a8

08007694 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800769c:	4b04      	ldr	r3, [pc, #16]	; (80076b0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	1ad3      	subs	r3, r2, r3
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	200143a8 	.word	0x200143a8

080076b4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08c      	sub	sp, #48	; 0x30
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80076be:	4b40      	ldr	r3, [pc, #256]	; (80077c0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d077      	beq.n	80077b6 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80076c6:	4b3e      	ldr	r3, [pc, #248]	; (80077c0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80076cc:	2300      	movs	r3, #0
 80076ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80076d0:	e008      	b.n	80076e4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80076d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80076d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d007      	beq.n	80076ee <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	3301      	adds	r3, #1
 80076e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d3f2      	bcc.n	80076d2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80076ec:	e000      	b.n	80076f0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80076ee:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80076f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d055      	beq.n	80077a2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80076f6:	f3ef 8311 	mrs	r3, BASEPRI
 80076fa:	f04f 0120 	mov.w	r1, #32
 80076fe:	f381 8811 	msr	BASEPRI, r1
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	482f      	ldr	r0, [pc, #188]	; (80077c4 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007706:	f7fe fabf 	bl	8005c88 <_PreparePacket>
 800770a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	623b      	str	r3, [r7, #32]
 8007718:	e00b      	b.n	8007732 <SEGGER_SYSVIEW_SendModule+0x7e>
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	b2da      	uxtb	r2, r3
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	1c59      	adds	r1, r3, #1
 8007722:	6279      	str	r1, [r7, #36]	; 0x24
 8007724:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007728:	b2d2      	uxtb	r2, r2
 800772a:	701a      	strb	r2, [r3, #0]
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	09db      	lsrs	r3, r3, #7
 8007730:	623b      	str	r3, [r7, #32]
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	2b7f      	cmp	r3, #127	; 0x7f
 8007736:	d8f0      	bhi.n	800771a <SEGGER_SYSVIEW_SendModule+0x66>
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	627a      	str	r2, [r7, #36]	; 0x24
 800773e:	6a3a      	ldr	r2, [r7, #32]
 8007740:	b2d2      	uxtb	r2, r2
 8007742:	701a      	strb	r2, [r3, #0]
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	61fb      	str	r3, [r7, #28]
 800774c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	61bb      	str	r3, [r7, #24]
 8007752:	e00b      	b.n	800776c <SEGGER_SYSVIEW_SendModule+0xb8>
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	b2da      	uxtb	r2, r3
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	1c59      	adds	r1, r3, #1
 800775c:	61f9      	str	r1, [r7, #28]
 800775e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007762:	b2d2      	uxtb	r2, r2
 8007764:	701a      	strb	r2, [r3, #0]
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	09db      	lsrs	r3, r3, #7
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	2b7f      	cmp	r3, #127	; 0x7f
 8007770:	d8f0      	bhi.n	8007754 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	61fa      	str	r2, [r7, #28]
 8007778:	69ba      	ldr	r2, [r7, #24]
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	701a      	strb	r2, [r3, #0]
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2280      	movs	r2, #128	; 0x80
 8007788:	4619      	mov	r1, r3
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f7fe fa4c 	bl	8005c28 <_EncodeStr>
 8007790:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007792:	2216      	movs	r2, #22
 8007794:	68f9      	ldr	r1, [r7, #12]
 8007796:	6938      	ldr	r0, [r7, #16]
 8007798:	f7fe fb66 	bl	8005e68 <_SendPacket>
      RECORD_END();
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d006      	beq.n	80077b6 <SEGGER_SYSVIEW_SendModule+0x102>
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80077b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	4798      	blx	r3
    }
  }
}
 80077b6:	bf00      	nop
 80077b8:	3730      	adds	r7, #48	; 0x30
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	200143d0 	.word	0x200143d0
 80077c4:	200143d8 	.word	0x200143d8

080077c8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80077ce:	4b0c      	ldr	r3, [pc, #48]	; (8007800 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00f      	beq.n	80077f6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80077d6:	4b0a      	ldr	r3, [pc, #40]	; (8007800 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f2      	bne.n	80077dc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80077f6:	bf00      	nop
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	200143d0 	.word	0x200143d0

08007804 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800780a:	f3ef 8311 	mrs	r3, BASEPRI
 800780e:	f04f 0120 	mov.w	r1, #32
 8007812:	f381 8811 	msr	BASEPRI, r1
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	4817      	ldr	r0, [pc, #92]	; (8007878 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800781a:	f7fe fa35 	bl	8005c88 <_PreparePacket>
 800781e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	4b14      	ldr	r3, [pc, #80]	; (800787c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	613b      	str	r3, [r7, #16]
 800782e:	e00b      	b.n	8007848 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	b2da      	uxtb	r2, r3
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	1c59      	adds	r1, r3, #1
 8007838:	6179      	str	r1, [r7, #20]
 800783a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800783e:	b2d2      	uxtb	r2, r2
 8007840:	701a      	strb	r2, [r3, #0]
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	09db      	lsrs	r3, r3, #7
 8007846:	613b      	str	r3, [r7, #16]
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	2b7f      	cmp	r3, #127	; 0x7f
 800784c:	d8f0      	bhi.n	8007830 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	617a      	str	r2, [r7, #20]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	b2d2      	uxtb	r2, r2
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800785e:	221b      	movs	r2, #27
 8007860:	6879      	ldr	r1, [r7, #4]
 8007862:	68b8      	ldr	r0, [r7, #8]
 8007864:	f7fe fb00 	bl	8005e68 <_SendPacket>
  RECORD_END();
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f383 8811 	msr	BASEPRI, r3
}
 800786e:	bf00      	nop
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	200143d8 	.word	0x200143d8
 800787c:	200143d4 	.word	0x200143d4

08007880 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007880:	b40f      	push	{r0, r1, r2, r3}
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007888:	f107 0314 	add.w	r3, r7, #20
 800788c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800788e:	1d3b      	adds	r3, r7, #4
 8007890:	461a      	mov	r2, r3
 8007892:	2100      	movs	r1, #0
 8007894:	6938      	ldr	r0, [r7, #16]
 8007896:	f7fe fdf9 	bl	800648c <_VPrintTarget>
  va_end(ParamList);
}
 800789a:	bf00      	nop
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078a4:	b004      	add	sp, #16
 80078a6:	4770      	bx	lr

080078a8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08a      	sub	sp, #40	; 0x28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80078b0:	f3ef 8311 	mrs	r3, BASEPRI
 80078b4:	f04f 0120 	mov.w	r1, #32
 80078b8:	f381 8811 	msr	BASEPRI, r1
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	4827      	ldr	r0, [pc, #156]	; (800795c <SEGGER_SYSVIEW_Warn+0xb4>)
 80078c0:	f7fe f9e2 	bl	8005c88 <_PreparePacket>
 80078c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80078c6:	2280      	movs	r2, #128	; 0x80
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	6938      	ldr	r0, [r7, #16]
 80078cc:	f7fe f9ac 	bl	8005c28 <_EncodeStr>
 80078d0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	627b      	str	r3, [r7, #36]	; 0x24
 80078d6:	2301      	movs	r3, #1
 80078d8:	623b      	str	r3, [r7, #32]
 80078da:	e00b      	b.n	80078f4 <SEGGER_SYSVIEW_Warn+0x4c>
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	1c59      	adds	r1, r3, #1
 80078e4:	6279      	str	r1, [r7, #36]	; 0x24
 80078e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	701a      	strb	r2, [r3, #0]
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	09db      	lsrs	r3, r3, #7
 80078f2:	623b      	str	r3, [r7, #32]
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	2b7f      	cmp	r3, #127	; 0x7f
 80078f8:	d8f0      	bhi.n	80078dc <SEGGER_SYSVIEW_Warn+0x34>
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	627a      	str	r2, [r7, #36]	; 0x24
 8007900:	6a3a      	ldr	r2, [r7, #32]
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	61fb      	str	r3, [r7, #28]
 800790e:	2300      	movs	r3, #0
 8007910:	61bb      	str	r3, [r7, #24]
 8007912:	e00b      	b.n	800792c <SEGGER_SYSVIEW_Warn+0x84>
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	b2da      	uxtb	r2, r3
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	1c59      	adds	r1, r3, #1
 800791c:	61f9      	str	r1, [r7, #28]
 800791e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	701a      	strb	r2, [r3, #0]
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	09db      	lsrs	r3, r3, #7
 800792a:	61bb      	str	r3, [r7, #24]
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	2b7f      	cmp	r3, #127	; 0x7f
 8007930:	d8f0      	bhi.n	8007914 <SEGGER_SYSVIEW_Warn+0x6c>
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	61fa      	str	r2, [r7, #28]
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007942:	221a      	movs	r2, #26
 8007944:	68f9      	ldr	r1, [r7, #12]
 8007946:	6938      	ldr	r0, [r7, #16]
 8007948:	f7fe fa8e 	bl	8005e68 <_SendPacket>
  RECORD_END();
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f383 8811 	msr	BASEPRI, r3
}
 8007952:	bf00      	nop
 8007954:	3728      	adds	r7, #40	; 0x28
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	200143d8 	.word	0x200143d8

08007960 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007964:	4b13      	ldr	r3, [pc, #76]	; (80079b4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007966:	7e1b      	ldrb	r3, [r3, #24]
 8007968:	4619      	mov	r1, r3
 800796a:	4a13      	ldr	r2, [pc, #76]	; (80079b8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800796c:	460b      	mov	r3, r1
 800796e:	005b      	lsls	r3, r3, #1
 8007970:	440b      	add	r3, r1
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	4413      	add	r3, r2
 8007976:	336c      	adds	r3, #108	; 0x6c
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	4b0e      	ldr	r3, [pc, #56]	; (80079b4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800797c:	7e1b      	ldrb	r3, [r3, #24]
 800797e:	4618      	mov	r0, r3
 8007980:	490d      	ldr	r1, [pc, #52]	; (80079b8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007982:	4603      	mov	r3, r0
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	4403      	add	r3, r0
 8007988:	00db      	lsls	r3, r3, #3
 800798a:	440b      	add	r3, r1
 800798c:	3370      	adds	r3, #112	; 0x70
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d00b      	beq.n	80079ac <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007994:	4b07      	ldr	r3, [pc, #28]	; (80079b4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007996:	789b      	ldrb	r3, [r3, #2]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d107      	bne.n	80079ac <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800799c:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800799e:	2201      	movs	r2, #1
 80079a0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80079a2:	f7fe f97d 	bl	8005ca0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80079a6:	4b03      	ldr	r3, [pc, #12]	; (80079b4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80079ac:	4b01      	ldr	r3, [pc, #4]	; (80079b4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	200143a8 	.word	0x200143a8
 80079b8:	20012ee8 	.word	0x20012ee8

080079bc <__libc_init_array>:
 80079bc:	b570      	push	{r4, r5, r6, lr}
 80079be:	4d0d      	ldr	r5, [pc, #52]	; (80079f4 <__libc_init_array+0x38>)
 80079c0:	4c0d      	ldr	r4, [pc, #52]	; (80079f8 <__libc_init_array+0x3c>)
 80079c2:	1b64      	subs	r4, r4, r5
 80079c4:	10a4      	asrs	r4, r4, #2
 80079c6:	2600      	movs	r6, #0
 80079c8:	42a6      	cmp	r6, r4
 80079ca:	d109      	bne.n	80079e0 <__libc_init_array+0x24>
 80079cc:	4d0b      	ldr	r5, [pc, #44]	; (80079fc <__libc_init_array+0x40>)
 80079ce:	4c0c      	ldr	r4, [pc, #48]	; (8007a00 <__libc_init_array+0x44>)
 80079d0:	f000 f83e 	bl	8007a50 <_init>
 80079d4:	1b64      	subs	r4, r4, r5
 80079d6:	10a4      	asrs	r4, r4, #2
 80079d8:	2600      	movs	r6, #0
 80079da:	42a6      	cmp	r6, r4
 80079dc:	d105      	bne.n	80079ea <__libc_init_array+0x2e>
 80079de:	bd70      	pop	{r4, r5, r6, pc}
 80079e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079e4:	4798      	blx	r3
 80079e6:	3601      	adds	r6, #1
 80079e8:	e7ee      	b.n	80079c8 <__libc_init_array+0xc>
 80079ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ee:	4798      	blx	r3
 80079f0:	3601      	adds	r6, #1
 80079f2:	e7f2      	b.n	80079da <__libc_init_array+0x1e>
 80079f4:	08007c2c 	.word	0x08007c2c
 80079f8:	08007c2c 	.word	0x08007c2c
 80079fc:	08007c2c 	.word	0x08007c2c
 8007a00:	08007c30 	.word	0x08007c30

08007a04 <memcmp>:
 8007a04:	b510      	push	{r4, lr}
 8007a06:	3901      	subs	r1, #1
 8007a08:	4402      	add	r2, r0
 8007a0a:	4290      	cmp	r0, r2
 8007a0c:	d101      	bne.n	8007a12 <memcmp+0xe>
 8007a0e:	2000      	movs	r0, #0
 8007a10:	e005      	b.n	8007a1e <memcmp+0x1a>
 8007a12:	7803      	ldrb	r3, [r0, #0]
 8007a14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	d001      	beq.n	8007a20 <memcmp+0x1c>
 8007a1c:	1b18      	subs	r0, r3, r4
 8007a1e:	bd10      	pop	{r4, pc}
 8007a20:	3001      	adds	r0, #1
 8007a22:	e7f2      	b.n	8007a0a <memcmp+0x6>

08007a24 <memcpy>:
 8007a24:	440a      	add	r2, r1
 8007a26:	4291      	cmp	r1, r2
 8007a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a2c:	d100      	bne.n	8007a30 <memcpy+0xc>
 8007a2e:	4770      	bx	lr
 8007a30:	b510      	push	{r4, lr}
 8007a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a3a:	4291      	cmp	r1, r2
 8007a3c:	d1f9      	bne.n	8007a32 <memcpy+0xe>
 8007a3e:	bd10      	pop	{r4, pc}

08007a40 <memset>:
 8007a40:	4402      	add	r2, r0
 8007a42:	4603      	mov	r3, r0
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d100      	bne.n	8007a4a <memset+0xa>
 8007a48:	4770      	bx	lr
 8007a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a4e:	e7f9      	b.n	8007a44 <memset+0x4>

08007a50 <_init>:
 8007a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a52:	bf00      	nop
 8007a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a56:	bc08      	pop	{r3}
 8007a58:	469e      	mov	lr, r3
 8007a5a:	4770      	bx	lr

08007a5c <_fini>:
 8007a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5e:	bf00      	nop
 8007a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a62:	bc08      	pop	{r3}
 8007a64:	469e      	mov	lr, r3
 8007a66:	4770      	bx	lr
