
FreeRTOS_Exc1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dc8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08007f98  08007f98  00017f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008144  08008144  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008144  08008144  00018144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800814c  0800814c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800814c  0800814c  0001814c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008150  08008150  00018150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144e4  20000080  080081d4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014564  080081d4  00024564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e5a  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003619  00000000  00000000  00039f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0003d528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  0003eb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024396  00000000  00000000  00040030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000199d9  00000000  00000000  000643c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df74d  00000000  00000000  0007dd9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d4ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061bc  00000000  00000000  0015d53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007f80 	.word	0x08007f80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08007f80 	.word	0x08007f80

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012f7c 	.word	0x20012f7c
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b974 	b.w	8000650 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468e      	mov	lr, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d14d      	bne.n	800042a <__udivmoddi4+0xaa>
 800038e:	428a      	cmp	r2, r1
 8000390:	4694      	mov	ip, r2
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0xe8>
 8000394:	fab2 f282 	clz	r2, r2
 8000398:	b152      	cbz	r2, 80003b0 <__udivmoddi4+0x30>
 800039a:	fa01 f302 	lsl.w	r3, r1, r2
 800039e:	f1c2 0120 	rsb	r1, r2, #32
 80003a2:	fa20 f101 	lsr.w	r1, r0, r1
 80003a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003aa:	ea41 0e03 	orr.w	lr, r1, r3
 80003ae:	4094      	lsls	r4, r2
 80003b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003b4:	0c21      	lsrs	r1, r4, #16
 80003b6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ba:	fa1f f78c 	uxth.w	r7, ip
 80003be:	fb08 e316 	mls	r3, r8, r6, lr
 80003c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003c6:	fb06 f107 	mul.w	r1, r6, r7
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003d6:	f080 811f 	bcs.w	8000618 <__udivmoddi4+0x298>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 811c 	bls.w	8000618 <__udivmoddi4+0x298>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f4:	fb00 f707 	mul.w	r7, r0, r7
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x92>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	f080 810a 	bcs.w	800061c <__udivmoddi4+0x29c>
 8000408:	42a7      	cmp	r7, r4
 800040a:	f240 8107 	bls.w	800061c <__udivmoddi4+0x29c>
 800040e:	4464      	add	r4, ip
 8000410:	3802      	subs	r0, #2
 8000412:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	2600      	movs	r6, #0
 800041a:	b11d      	cbz	r5, 8000424 <__udivmoddi4+0xa4>
 800041c:	40d4      	lsrs	r4, r2
 800041e:	2300      	movs	r3, #0
 8000420:	e9c5 4300 	strd	r4, r3, [r5]
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0xc2>
 800042e:	2d00      	cmp	r5, #0
 8000430:	f000 80ef 	beq.w	8000612 <__udivmoddi4+0x292>
 8000434:	2600      	movs	r6, #0
 8000436:	e9c5 0100 	strd	r0, r1, [r5]
 800043a:	4630      	mov	r0, r6
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	fab3 f683 	clz	r6, r3
 8000446:	2e00      	cmp	r6, #0
 8000448:	d14a      	bne.n	80004e0 <__udivmoddi4+0x160>
 800044a:	428b      	cmp	r3, r1
 800044c:	d302      	bcc.n	8000454 <__udivmoddi4+0xd4>
 800044e:	4282      	cmp	r2, r0
 8000450:	f200 80f9 	bhi.w	8000646 <__udivmoddi4+0x2c6>
 8000454:	1a84      	subs	r4, r0, r2
 8000456:	eb61 0303 	sbc.w	r3, r1, r3
 800045a:	2001      	movs	r0, #1
 800045c:	469e      	mov	lr, r3
 800045e:	2d00      	cmp	r5, #0
 8000460:	d0e0      	beq.n	8000424 <__udivmoddi4+0xa4>
 8000462:	e9c5 4e00 	strd	r4, lr, [r5]
 8000466:	e7dd      	b.n	8000424 <__udivmoddi4+0xa4>
 8000468:	b902      	cbnz	r2, 800046c <__udivmoddi4+0xec>
 800046a:	deff      	udf	#255	; 0xff
 800046c:	fab2 f282 	clz	r2, r2
 8000470:	2a00      	cmp	r2, #0
 8000472:	f040 8092 	bne.w	800059a <__udivmoddi4+0x21a>
 8000476:	eba1 010c 	sub.w	r1, r1, ip
 800047a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	2601      	movs	r6, #1
 8000484:	0c20      	lsrs	r0, r4, #16
 8000486:	fbb1 f3f7 	udiv	r3, r1, r7
 800048a:	fb07 1113 	mls	r1, r7, r3, r1
 800048e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000492:	fb0e f003 	mul.w	r0, lr, r3
 8000496:	4288      	cmp	r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x12c>
 800049a:	eb1c 0101 	adds.w	r1, ip, r1
 800049e:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x12a>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f200 80cb 	bhi.w	8000640 <__udivmoddi4+0x2c0>
 80004aa:	4643      	mov	r3, r8
 80004ac:	1a09      	subs	r1, r1, r0
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b4:	fb07 1110 	mls	r1, r7, r0, r1
 80004b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004bc:	fb0e fe00 	mul.w	lr, lr, r0
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x156>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004cc:	d202      	bcs.n	80004d4 <__udivmoddi4+0x154>
 80004ce:	45a6      	cmp	lr, r4
 80004d0:	f200 80bb 	bhi.w	800064a <__udivmoddi4+0x2ca>
 80004d4:	4608      	mov	r0, r1
 80004d6:	eba4 040e 	sub.w	r4, r4, lr
 80004da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x9a>
 80004e0:	f1c6 0720 	rsb	r7, r6, #32
 80004e4:	40b3      	lsls	r3, r6
 80004e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ee:	fa20 f407 	lsr.w	r4, r0, r7
 80004f2:	fa01 f306 	lsl.w	r3, r1, r6
 80004f6:	431c      	orrs	r4, r3
 80004f8:	40f9      	lsrs	r1, r7
 80004fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000502:	fbb1 f8f9 	udiv	r8, r1, r9
 8000506:	0c20      	lsrs	r0, r4, #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fb09 1118 	mls	r1, r9, r8, r1
 8000510:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000514:	fb08 f00e 	mul.w	r0, r8, lr
 8000518:	4288      	cmp	r0, r1
 800051a:	fa02 f206 	lsl.w	r2, r2, r6
 800051e:	d90b      	bls.n	8000538 <__udivmoddi4+0x1b8>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f108 3aff 	add.w	sl, r8, #4294967295
 8000528:	f080 8088 	bcs.w	800063c <__udivmoddi4+0x2bc>
 800052c:	4288      	cmp	r0, r1
 800052e:	f240 8085 	bls.w	800063c <__udivmoddi4+0x2bc>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	1a09      	subs	r1, r1, r0
 800053a:	b2a4      	uxth	r4, r4
 800053c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000540:	fb09 1110 	mls	r1, r9, r0, r1
 8000544:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	458e      	cmp	lr, r1
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x1e2>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f100 34ff 	add.w	r4, r0, #4294967295
 8000558:	d26c      	bcs.n	8000634 <__udivmoddi4+0x2b4>
 800055a:	458e      	cmp	lr, r1
 800055c:	d96a      	bls.n	8000634 <__udivmoddi4+0x2b4>
 800055e:	3802      	subs	r0, #2
 8000560:	4461      	add	r1, ip
 8000562:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000566:	fba0 9402 	umull	r9, r4, r0, r2
 800056a:	eba1 010e 	sub.w	r1, r1, lr
 800056e:	42a1      	cmp	r1, r4
 8000570:	46c8      	mov	r8, r9
 8000572:	46a6      	mov	lr, r4
 8000574:	d356      	bcc.n	8000624 <__udivmoddi4+0x2a4>
 8000576:	d053      	beq.n	8000620 <__udivmoddi4+0x2a0>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x212>
 800057a:	ebb3 0208 	subs.w	r2, r3, r8
 800057e:	eb61 010e 	sbc.w	r1, r1, lr
 8000582:	fa01 f707 	lsl.w	r7, r1, r7
 8000586:	fa22 f306 	lsr.w	r3, r2, r6
 800058a:	40f1      	lsrs	r1, r6
 800058c:	431f      	orrs	r7, r3
 800058e:	e9c5 7100 	strd	r7, r1, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	40d8      	lsrs	r0, r3
 80005a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a4:	fa21 f303 	lsr.w	r3, r1, r3
 80005a8:	4091      	lsls	r1, r2
 80005aa:	4301      	orrs	r1, r0
 80005ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b0:	fa1f fe8c 	uxth.w	lr, ip
 80005b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005b8:	fb07 3610 	mls	r6, r7, r0, r3
 80005bc:	0c0b      	lsrs	r3, r1, #16
 80005be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005c2:	fb00 f60e 	mul.w	r6, r0, lr
 80005c6:	429e      	cmp	r6, r3
 80005c8:	fa04 f402 	lsl.w	r4, r4, r2
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x260>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005d6:	d22f      	bcs.n	8000638 <__udivmoddi4+0x2b8>
 80005d8:	429e      	cmp	r6, r3
 80005da:	d92d      	bls.n	8000638 <__udivmoddi4+0x2b8>
 80005dc:	3802      	subs	r0, #2
 80005de:	4463      	add	r3, ip
 80005e0:	1b9b      	subs	r3, r3, r6
 80005e2:	b289      	uxth	r1, r1
 80005e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005e8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f0:	fb06 f30e 	mul.w	r3, r6, lr
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d908      	bls.n	800060a <__udivmoddi4+0x28a>
 80005f8:	eb1c 0101 	adds.w	r1, ip, r1
 80005fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000600:	d216      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 8000602:	428b      	cmp	r3, r1
 8000604:	d914      	bls.n	8000630 <__udivmoddi4+0x2b0>
 8000606:	3e02      	subs	r6, #2
 8000608:	4461      	add	r1, ip
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000610:	e738      	b.n	8000484 <__udivmoddi4+0x104>
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e705      	b.n	8000424 <__udivmoddi4+0xa4>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e3      	b.n	80003e4 <__udivmoddi4+0x64>
 800061c:	4618      	mov	r0, r3
 800061e:	e6f8      	b.n	8000412 <__udivmoddi4+0x92>
 8000620:	454b      	cmp	r3, r9
 8000622:	d2a9      	bcs.n	8000578 <__udivmoddi4+0x1f8>
 8000624:	ebb9 0802 	subs.w	r8, r9, r2
 8000628:	eb64 0e0c 	sbc.w	lr, r4, ip
 800062c:	3801      	subs	r0, #1
 800062e:	e7a3      	b.n	8000578 <__udivmoddi4+0x1f8>
 8000630:	4646      	mov	r6, r8
 8000632:	e7ea      	b.n	800060a <__udivmoddi4+0x28a>
 8000634:	4620      	mov	r0, r4
 8000636:	e794      	b.n	8000562 <__udivmoddi4+0x1e2>
 8000638:	4640      	mov	r0, r8
 800063a:	e7d1      	b.n	80005e0 <__udivmoddi4+0x260>
 800063c:	46d0      	mov	r8, sl
 800063e:	e77b      	b.n	8000538 <__udivmoddi4+0x1b8>
 8000640:	3b02      	subs	r3, #2
 8000642:	4461      	add	r1, ip
 8000644:	e732      	b.n	80004ac <__udivmoddi4+0x12c>
 8000646:	4630      	mov	r0, r6
 8000648:	e709      	b.n	800045e <__udivmoddi4+0xde>
 800064a:	4464      	add	r4, ip
 800064c:	3802      	subs	r0, #2
 800064e:	e742      	b.n	80004d6 <__udivmoddi4+0x156>

08000650 <__aeabi_idiv0>:
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fae3 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f855 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f8e9 	bl	8000838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000666:	f000 f8bd 	bl	80007e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /*Enable CYCLE COUNT REG OF CPU*/

  DWT_CTRL |=1 ;
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <main+0x98>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <main+0x98>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6013      	str	r3, [r2, #0]


  /*For SEGGER SYSVIEW TRACE*/

  SEGGER_UART_init(500000);
 8000676:	481e      	ldr	r0, [pc, #120]	; (80006f0 <main+0x9c>)
 8000678:	f004 fd40 	bl	80050fc <SEGGER_UART_init>

  /*CONFIG SYSVIEW */
  SEGGER_SYSVIEW_Conf();
 800067c:	f004 fb68 	bl	8004d50 <SEGGER_SYSVIEW_Conf>
//SEGGER_SYSVIEW_Start();

  Local_Statue= xTaskCreate(Task1Handler, "Task-1", 200, "Hello world From Task-1 ", 2, &Task1Handle);
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2302      	movs	r3, #2
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <main+0xa0>)
 800068c:	22c8      	movs	r2, #200	; 0xc8
 800068e:	491a      	ldr	r1, [pc, #104]	; (80006f8 <main+0xa4>)
 8000690:	481a      	ldr	r0, [pc, #104]	; (80006fc <main+0xa8>)
 8000692:	f002 fce3 	bl	800305c <xTaskCreate>
 8000696:	6178      	str	r0, [r7, #20]

  configASSERT(Local_Statue == pdPASS);
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d00a      	beq.n	80006b4 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800069e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a2:	f383 8811 	msr	BASEPRI, r3
 80006a6:	f3bf 8f6f 	isb	sy
 80006aa:	f3bf 8f4f 	dsb	sy
 80006ae:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006b0:	bf00      	nop
 80006b2:	e7fe      	b.n	80006b2 <main+0x5e>

  Local_Statue= xTaskCreate(Task2Handler, "Task-2", 200, "Hello world From Task-2", 2, &Task2Handle);
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2302      	movs	r3, #2
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <main+0xac>)
 80006be:	22c8      	movs	r2, #200	; 0xc8
 80006c0:	4910      	ldr	r1, [pc, #64]	; (8000704 <main+0xb0>)
 80006c2:	4811      	ldr	r0, [pc, #68]	; (8000708 <main+0xb4>)
 80006c4:	f002 fcca 	bl	800305c <xTaskCreate>
 80006c8:	6178      	str	r0, [r7, #20]

   configASSERT(Local_Statue == pdPASS);
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d00a      	beq.n	80006e6 <main+0x92>
        __asm volatile
 80006d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d4:	f383 8811 	msr	BASEPRI, r3
 80006d8:	f3bf 8f6f 	isb	sy
 80006dc:	f3bf 8f4f 	dsb	sy
 80006e0:	60fb      	str	r3, [r7, #12]
    }
 80006e2:	bf00      	nop
 80006e4:	e7fe      	b.n	80006e4 <main+0x90>

   vTaskStartScheduler();
 80006e6:	f002 fe41 	bl	800336c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <main+0x96>
 80006ec:	e0001000 	.word	0xe0001000
 80006f0:	0007a120 	.word	0x0007a120
 80006f4:	08007f98 	.word	0x08007f98
 80006f8:	08007fb4 	.word	0x08007fb4
 80006fc:	08000915 	.word	0x08000915
 8000700:	08007fbc 	.word	0x08007fbc
 8000704:	08007fd4 	.word	0x08007fd4
 8000708:	0800093d 	.word	0x0800093d

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2234      	movs	r2, #52	; 0x34
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f006 ffa6 	bl	800766c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b29      	ldr	r3, [pc, #164]	; (80007dc <SystemClock_Config+0xd0>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a28      	ldr	r2, [pc, #160]	; (80007dc <SystemClock_Config+0xd0>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <SystemClock_Config+0xd0>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074c:	2300      	movs	r3, #0
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <SystemClock_Config+0xd4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a22      	ldr	r2, [pc, #136]	; (80007e0 <SystemClock_Config+0xd4>)
 8000756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <SystemClock_Config+0xd4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2310      	movs	r3, #16
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800077c:	2308      	movs	r3, #8
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000780:	23a8      	movs	r3, #168	; 0xa8
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000788:	2302      	movs	r3, #2
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4618      	mov	r0, r3
 8000796:	f001 f893 	bl	80018c0 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007a0:	f000 f8f2 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2302      	movs	r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2105      	movs	r1, #5
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fd00 	bl	80011c8 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ce:	f000 f8db 	bl	8000988 <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3750      	adds	r7, #80	; 0x50
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_USART2_UART_Init+0x50>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 800081c:	f001 fd9c 	bl	8002358 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000826:	f000 f8af 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000009c 	.word	0x2000009c
 8000834:	40004400 	.word	0x40004400

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a2c      	ldr	r2, [pc, #176]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a25      	ldr	r2, [pc, #148]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a1e      	ldr	r2, [pc, #120]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <MX_GPIO_Init+0xd0>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2120      	movs	r1, #32
 80008c2:	4812      	ldr	r0, [pc, #72]	; (800090c <MX_GPIO_Init+0xd4>)
 80008c4:	f000 fc66 	bl	8001194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	480c      	ldr	r0, [pc, #48]	; (8000910 <MX_GPIO_Init+0xd8>)
 80008e0:	f000 fac4 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008e4:	2320      	movs	r3, #32
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_GPIO_Init+0xd4>)
 80008fc:	f000 fab6 	bl	8000e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	; 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40020000 	.word	0x40020000
 8000910:	40020800 	.word	0x40020800

08000914 <Task1Handler>:

/* USER CODE BEGIN 4 */
void Task1Handler(void* parameters)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09c      	sub	sp, #112	; 0x70
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	char FSting[100];


	while(1)
	{
		snprintf(FSting , 100 , "%s\n",(char*)parameters);
 800091c:	f107 000c 	add.w	r0, r7, #12
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <Task1Handler+0x24>)
 8000924:	2164      	movs	r1, #100	; 0x64
 8000926:	f006 fea9 	bl	800767c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(FSting);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4618      	mov	r0, r3
 8000930:	f006 fdbc 	bl	80074ac <SEGGER_SYSVIEW_PrintfTarget>
	{
 8000934:	e7f2      	b.n	800091c <Task1Handler+0x8>
 8000936:	bf00      	nop
 8000938:	08007fdc 	.word	0x08007fdc

0800093c <Task2Handler>:

	}

}
void Task2Handler(void* parameters)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b09c      	sub	sp, #112	; 0x70
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	char FSting[100];


	while(1)
	{
		snprintf(FSting , 100 , "%s\n",(char*)parameters);
 8000944:	f107 000c 	add.w	r0, r7, #12
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <Task2Handler+0x24>)
 800094c:	2164      	movs	r1, #100	; 0x64
 800094e:	f006 fe95 	bl	800767c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(FSting);
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	4618      	mov	r0, r3
 8000958:	f006 fda8 	bl	80074ac <SEGGER_SYSVIEW_PrintfTarget>
	{
 800095c:	e7f2      	b.n	8000944 <Task2Handler+0x8>
 800095e:	bf00      	nop
 8000960:	08007fdc 	.word	0x08007fdc

08000964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d101      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000976:	f000 f977 	bl	8000c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40001000 	.word	0x40001000

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_UART_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12b      	bne.n	8000a5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a3e:	230c      	movs	r3, #12
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <HAL_UART_MspInit+0x8c>)
 8000a5a:	f000 fa07 	bl	8000e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	; 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000

08000a74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <HAL_InitTick+0xe4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a32      	ldr	r2, [pc, #200]	; (8000b58 <HAL_InitTick+0xe4>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b30      	ldr	r3, [pc, #192]	; (8000b58 <HAL_InitTick+0xe4>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 0310 	and.w	r3, r3, #16
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa0:	f107 0210 	add.w	r2, r7, #16
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 fca6 	bl	80013fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d103      	bne.n	8000ac2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aba:	f000 fc77 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8000abe:	6378      	str	r0, [r7, #52]	; 0x34
 8000ac0:	e004      	b.n	8000acc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ac2:	f000 fc73 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ace:	4a23      	ldr	r2, [pc, #140]	; (8000b5c <HAL_InitTick+0xe8>)
 8000ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad4:	0c9b      	lsrs	r3, r3, #18
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ada:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <HAL_InitTick+0xec>)
 8000adc:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <HAL_InitTick+0xf0>)
 8000ade:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <HAL_InitTick+0xec>)
 8000ae2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ae6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <HAL_InitTick+0xec>)
 8000aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <HAL_InitTick+0xec>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <HAL_InitTick+0xec>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_InitTick+0xec>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b00:	4817      	ldr	r0, [pc, #92]	; (8000b60 <HAL_InitTick+0xec>)
 8000b02:	f001 f97b 	bl	8001dfc <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d11b      	bne.n	8000b4c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b14:	4812      	ldr	r0, [pc, #72]	; (8000b60 <HAL_InitTick+0xec>)
 8000b16:	f001 f9cb 	bl	8001eb0 <HAL_TIM_Base_Start_IT>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d111      	bne.n	8000b4c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b28:	2036      	movs	r0, #54	; 0x36
 8000b2a:	f000 f991 	bl	8000e50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d808      	bhi.n	8000b46 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	2036      	movs	r0, #54	; 0x36
 8000b3a:	f000 f96d 	bl	8000e18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <HAL_InitTick+0xf4>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	e002      	b.n	8000b4c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	431bde83 	.word	0x431bde83
 8000b60:	200000e0 	.word	0x200000e0
 8000b64:	40001000 	.word	0x40001000
 8000b68:	20000004 	.word	0x20000004

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <TIM6_DAC_IRQHandler+0x10>)
 8000b9e:	f001 f9f7 	bl	8001f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200000e0 	.word	0x200000e0

08000bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd6:	490e      	ldr	r1, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bec:	4c0b      	ldr	r4, [pc, #44]	; (8000c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bfa:	f7ff ffd7 	bl	8000bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f006 fcf3 	bl	80075e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c02:	f7ff fd27 	bl	8000654 <main>
  bx  lr    
 8000c06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000c14:	08008154 	.word	0x08008154
  ldr r2, =_sbss
 8000c18:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000c1c:	20014564 	.word	0x20014564

08000c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <HAL_Init+0x40>)
 8000c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_Init+0x40>)
 8000c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_Init+0x40>)
 8000c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f8d8 	bl	8000e02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	200f      	movs	r0, #15
 8000c54:	f7ff ff0e 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fe9c 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023c00 	.word	0x40023c00

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000128 	.word	0x20000128

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000128 	.word	0x20000128

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <__NVIC_EnableIRQ+0x38>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ff4c 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2a:	f7ff ff61 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	6978      	ldr	r0, [r7, #20]
 8000e36:	f7ff ffb1 	bl	8000d9c <NVIC_EncodePriority>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff80 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e48:	bf00      	nop
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff54 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	e165      	b.n	8001154 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	f040 8154 	bne.w	800114e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d005      	beq.n	8000ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d130      	bne.n	8000f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	f003 0201 	and.w	r2, r3, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d017      	beq.n	8000f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d123      	bne.n	8000fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	08da      	lsrs	r2, r3, #3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3208      	adds	r2, #8
 8000f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	220f      	movs	r2, #15
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	69b9      	ldr	r1, [r7, #24]
 8000fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0203 	and.w	r2, r3, #3
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 80ae 	beq.w	800114e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b5d      	ldr	r3, [pc, #372]	; (800116c <HAL_GPIO_Init+0x300>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a5c      	ldr	r2, [pc, #368]	; (800116c <HAL_GPIO_Init+0x300>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b5a      	ldr	r3, [pc, #360]	; (800116c <HAL_GPIO_Init+0x300>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100e:	4a58      	ldr	r2, [pc, #352]	; (8001170 <HAL_GPIO_Init+0x304>)
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	220f      	movs	r2, #15
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4f      	ldr	r2, [pc, #316]	; (8001174 <HAL_GPIO_Init+0x308>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d025      	beq.n	8001086 <HAL_GPIO_Init+0x21a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4e      	ldr	r2, [pc, #312]	; (8001178 <HAL_GPIO_Init+0x30c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d01f      	beq.n	8001082 <HAL_GPIO_Init+0x216>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4d      	ldr	r2, [pc, #308]	; (800117c <HAL_GPIO_Init+0x310>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d019      	beq.n	800107e <HAL_GPIO_Init+0x212>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4c      	ldr	r2, [pc, #304]	; (8001180 <HAL_GPIO_Init+0x314>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x20e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4b      	ldr	r2, [pc, #300]	; (8001184 <HAL_GPIO_Init+0x318>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x20a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4a      	ldr	r2, [pc, #296]	; (8001188 <HAL_GPIO_Init+0x31c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x206>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a49      	ldr	r2, [pc, #292]	; (800118c <HAL_GPIO_Init+0x320>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x202>
 800106a:	2306      	movs	r3, #6
 800106c:	e00c      	b.n	8001088 <HAL_GPIO_Init+0x21c>
 800106e:	2307      	movs	r3, #7
 8001070:	e00a      	b.n	8001088 <HAL_GPIO_Init+0x21c>
 8001072:	2305      	movs	r3, #5
 8001074:	e008      	b.n	8001088 <HAL_GPIO_Init+0x21c>
 8001076:	2304      	movs	r3, #4
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x21c>
 800107a:	2303      	movs	r3, #3
 800107c:	e004      	b.n	8001088 <HAL_GPIO_Init+0x21c>
 800107e:	2302      	movs	r3, #2
 8001080:	e002      	b.n	8001088 <HAL_GPIO_Init+0x21c>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x21c>
 8001086:	2300      	movs	r3, #0
 8001088:	69fa      	ldr	r2, [r7, #28]
 800108a:	f002 0203 	and.w	r2, r2, #3
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	4093      	lsls	r3, r2
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001098:	4935      	ldr	r1, [pc, #212]	; (8001170 <HAL_GPIO_Init+0x304>)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a6:	4b3a      	ldr	r3, [pc, #232]	; (8001190 <HAL_GPIO_Init+0x324>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ca:	4a31      	ldr	r2, [pc, #196]	; (8001190 <HAL_GPIO_Init+0x324>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_GPIO_Init+0x324>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f4:	4a26      	ldr	r2, [pc, #152]	; (8001190 <HAL_GPIO_Init+0x324>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010fa:	4b25      	ldr	r3, [pc, #148]	; (8001190 <HAL_GPIO_Init+0x324>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800111e:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <HAL_GPIO_Init+0x324>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <HAL_GPIO_Init+0x324>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001148:	4a11      	ldr	r2, [pc, #68]	; (8001190 <HAL_GPIO_Init+0x324>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3301      	adds	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	f67f ae96 	bls.w	8000e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40013800 	.word	0x40013800
 8001174:	40020000 	.word	0x40020000
 8001178:	40020400 	.word	0x40020400
 800117c:	40020800 	.word	0x40020800
 8001180:	40020c00 	.word	0x40020c00
 8001184:	40021000 	.word	0x40021000
 8001188:	40021400 	.word	0x40021400
 800118c:	40021800 	.word	0x40021800
 8001190:	40013c00 	.word	0x40013c00

08001194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]
 80011a0:	4613      	mov	r3, r2
 80011a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a4:	787b      	ldrb	r3, [r7, #1]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b0:	e003      	b.n	80011ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	041a      	lsls	r2, r3, #16
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	619a      	str	r2, [r3, #24]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0cc      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011dc:	4b68      	ldr	r3, [pc, #416]	; (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 030f 	and.w	r3, r3, #15
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d90c      	bls.n	8001204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b65      	ldr	r3, [pc, #404]	; (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f2:	4b63      	ldr	r3, [pc, #396]	; (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e0b8      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d020      	beq.n	8001252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800121c:	4b59      	ldr	r3, [pc, #356]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	4a58      	ldr	r2, [pc, #352]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001226:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001234:	4b53      	ldr	r3, [pc, #332]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4a52      	ldr	r2, [pc, #328]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800123e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001240:	4b50      	ldr	r3, [pc, #320]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	494d      	ldr	r1, [pc, #308]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	4313      	orrs	r3, r2
 8001250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d044      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d107      	bne.n	8001276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	4b47      	ldr	r3, [pc, #284]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d119      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e07f      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d003      	beq.n	8001286 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001282:	2b03      	cmp	r3, #3
 8001284:	d107      	bne.n	8001296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d109      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e06f      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001296:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e067      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a6:	4b37      	ldr	r3, [pc, #220]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f023 0203 	bic.w	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4934      	ldr	r1, [pc, #208]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b8:	f7ff fcea 	bl	8000c90 <HAL_GetTick>
 80012bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c0:	f7ff fce6 	bl	8000c90 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e04f      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 020c 	and.w	r2, r3, #12
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d1eb      	bne.n	80012c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012e8:	4b25      	ldr	r3, [pc, #148]	; (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d20c      	bcs.n	8001310 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f6:	4b22      	ldr	r3, [pc, #136]	; (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d001      	beq.n	8001310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e032      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	4916      	ldr	r1, [pc, #88]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	4313      	orrs	r3, r2
 800132c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d009      	beq.n	800134e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	490e      	ldr	r1, [pc, #56]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800134a:	4313      	orrs	r3, r2
 800134c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800134e:	f000 f887 	bl	8001460 <HAL_RCC_GetSysClockFreq>
 8001352:	4602      	mov	r2, r0
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	490a      	ldr	r1, [pc, #40]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 8001360:	5ccb      	ldrb	r3, [r1, r3]
 8001362:	fa22 f303 	lsr.w	r3, r2, r3
 8001366:	4a09      	ldr	r2, [pc, #36]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_RCC_ClockConfig+0x1c8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fb80 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023c00 	.word	0x40023c00
 8001384:	40023800 	.word	0x40023800
 8001388:	080080bc 	.word	0x080080bc
 800138c:	20000000 	.word	0x20000000
 8001390:	20000004 	.word	0x20000004

08001394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000000 	.word	0x20000000

080013ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013b0:	f7ff fff0 	bl	8001394 <HAL_RCC_GetHCLKFreq>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	0a9b      	lsrs	r3, r3, #10
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	4903      	ldr	r1, [pc, #12]	; (80013d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013c2:	5ccb      	ldrb	r3, [r1, r3]
 80013c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	080080cc 	.word	0x080080cc

080013d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013d8:	f7ff ffdc 	bl	8001394 <HAL_RCC_GetHCLKFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	0b5b      	lsrs	r3, r3, #13
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	4903      	ldr	r1, [pc, #12]	; (80013f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	080080cc 	.word	0x080080cc

080013fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	220f      	movs	r2, #15
 800140a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 0203 	and.w	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <HAL_RCC_GetClockConfig+0x60>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 020f 	and.w	r2, r3, #15
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	601a      	str	r2, [r3, #0]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40023c00 	.word	0x40023c00

08001460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001464:	b0ae      	sub	sp, #184	; 0xb8
 8001466:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001486:	4bcb      	ldr	r3, [pc, #812]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b0c      	cmp	r3, #12
 8001490:	f200 8206 	bhi.w	80018a0 <HAL_RCC_GetSysClockFreq+0x440>
 8001494:	a201      	add	r2, pc, #4	; (adr r2, 800149c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149a:	bf00      	nop
 800149c:	080014d1 	.word	0x080014d1
 80014a0:	080018a1 	.word	0x080018a1
 80014a4:	080018a1 	.word	0x080018a1
 80014a8:	080018a1 	.word	0x080018a1
 80014ac:	080014d9 	.word	0x080014d9
 80014b0:	080018a1 	.word	0x080018a1
 80014b4:	080018a1 	.word	0x080018a1
 80014b8:	080018a1 	.word	0x080018a1
 80014bc:	080014e1 	.word	0x080014e1
 80014c0:	080018a1 	.word	0x080018a1
 80014c4:	080018a1 	.word	0x080018a1
 80014c8:	080018a1 	.word	0x080018a1
 80014cc:	080016d1 	.word	0x080016d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014d0:	4bb9      	ldr	r3, [pc, #740]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80014d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80014d6:	e1e7      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014d8:	4bb8      	ldr	r3, [pc, #736]	; (80017bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80014da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014de:	e1e3      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014e0:	4bb4      	ldr	r3, [pc, #720]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014ec:	4bb1      	ldr	r3, [pc, #708]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d071      	beq.n	80015dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f8:	4bae      	ldr	r3, [pc, #696]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	099b      	lsrs	r3, r3, #6
 80014fe:	2200      	movs	r2, #0
 8001500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001504:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800150c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001510:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800151a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800151e:	4622      	mov	r2, r4
 8001520:	462b      	mov	r3, r5
 8001522:	f04f 0000 	mov.w	r0, #0
 8001526:	f04f 0100 	mov.w	r1, #0
 800152a:	0159      	lsls	r1, r3, #5
 800152c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001530:	0150      	lsls	r0, r2, #5
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4621      	mov	r1, r4
 8001538:	1a51      	subs	r1, r2, r1
 800153a:	6439      	str	r1, [r7, #64]	; 0x40
 800153c:	4629      	mov	r1, r5
 800153e:	eb63 0301 	sbc.w	r3, r3, r1
 8001542:	647b      	str	r3, [r7, #68]	; 0x44
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001550:	4649      	mov	r1, r9
 8001552:	018b      	lsls	r3, r1, #6
 8001554:	4641      	mov	r1, r8
 8001556:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800155a:	4641      	mov	r1, r8
 800155c:	018a      	lsls	r2, r1, #6
 800155e:	4641      	mov	r1, r8
 8001560:	1a51      	subs	r1, r2, r1
 8001562:	63b9      	str	r1, [r7, #56]	; 0x38
 8001564:	4649      	mov	r1, r9
 8001566:	eb63 0301 	sbc.w	r3, r3, r1
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001578:	4649      	mov	r1, r9
 800157a:	00cb      	lsls	r3, r1, #3
 800157c:	4641      	mov	r1, r8
 800157e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001582:	4641      	mov	r1, r8
 8001584:	00ca      	lsls	r2, r1, #3
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	4603      	mov	r3, r0
 800158c:	4622      	mov	r2, r4
 800158e:	189b      	adds	r3, r3, r2
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
 8001592:	462b      	mov	r3, r5
 8001594:	460a      	mov	r2, r1
 8001596:	eb42 0303 	adc.w	r3, r2, r3
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80015a8:	4629      	mov	r1, r5
 80015aa:	024b      	lsls	r3, r1, #9
 80015ac:	4621      	mov	r1, r4
 80015ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015b2:	4621      	mov	r1, r4
 80015b4:	024a      	lsls	r2, r1, #9
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015be:	2200      	movs	r2, #0
 80015c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80015cc:	f7fe fec0 	bl	8000350 <__aeabi_uldivmod>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4613      	mov	r3, r2
 80015d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015da:	e067      	b.n	80016ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015dc:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	099b      	lsrs	r3, r3, #6
 80015e2:	2200      	movs	r2, #0
 80015e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015e8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80015f6:	2300      	movs	r3, #0
 80015f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80015fe:	4622      	mov	r2, r4
 8001600:	462b      	mov	r3, r5
 8001602:	f04f 0000 	mov.w	r0, #0
 8001606:	f04f 0100 	mov.w	r1, #0
 800160a:	0159      	lsls	r1, r3, #5
 800160c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001610:	0150      	lsls	r0, r2, #5
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4621      	mov	r1, r4
 8001618:	1a51      	subs	r1, r2, r1
 800161a:	62b9      	str	r1, [r7, #40]	; 0x28
 800161c:	4629      	mov	r1, r5
 800161e:	eb63 0301 	sbc.w	r3, r3, r1
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001630:	4649      	mov	r1, r9
 8001632:	018b      	lsls	r3, r1, #6
 8001634:	4641      	mov	r1, r8
 8001636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800163a:	4641      	mov	r1, r8
 800163c:	018a      	lsls	r2, r1, #6
 800163e:	4641      	mov	r1, r8
 8001640:	ebb2 0a01 	subs.w	sl, r2, r1
 8001644:	4649      	mov	r1, r9
 8001646:	eb63 0b01 	sbc.w	fp, r3, r1
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001656:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800165a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800165e:	4692      	mov	sl, r2
 8001660:	469b      	mov	fp, r3
 8001662:	4623      	mov	r3, r4
 8001664:	eb1a 0303 	adds.w	r3, sl, r3
 8001668:	623b      	str	r3, [r7, #32]
 800166a:	462b      	mov	r3, r5
 800166c:	eb4b 0303 	adc.w	r3, fp, r3
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800167e:	4629      	mov	r1, r5
 8001680:	028b      	lsls	r3, r1, #10
 8001682:	4621      	mov	r1, r4
 8001684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001688:	4621      	mov	r1, r4
 800168a:	028a      	lsls	r2, r1, #10
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001694:	2200      	movs	r2, #0
 8001696:	673b      	str	r3, [r7, #112]	; 0x70
 8001698:	677a      	str	r2, [r7, #116]	; 0x74
 800169a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800169e:	f7fe fe57 	bl	8000350 <__aeabi_uldivmod>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4613      	mov	r3, r2
 80016a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016ac:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	0c1b      	lsrs	r3, r3, #16
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	3301      	adds	r3, #1
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80016be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016ce:	e0eb      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d0:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016dc:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d06b      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e8:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	099b      	lsrs	r3, r3, #6
 80016ee:	2200      	movs	r2, #0
 80016f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80016f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016fa:	663b      	str	r3, [r7, #96]	; 0x60
 80016fc:	2300      	movs	r3, #0
 80016fe:	667b      	str	r3, [r7, #100]	; 0x64
 8001700:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001704:	4622      	mov	r2, r4
 8001706:	462b      	mov	r3, r5
 8001708:	f04f 0000 	mov.w	r0, #0
 800170c:	f04f 0100 	mov.w	r1, #0
 8001710:	0159      	lsls	r1, r3, #5
 8001712:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001716:	0150      	lsls	r0, r2, #5
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4621      	mov	r1, r4
 800171e:	1a51      	subs	r1, r2, r1
 8001720:	61b9      	str	r1, [r7, #24]
 8001722:	4629      	mov	r1, r5
 8001724:	eb63 0301 	sbc.w	r3, r3, r1
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001736:	4659      	mov	r1, fp
 8001738:	018b      	lsls	r3, r1, #6
 800173a:	4651      	mov	r1, sl
 800173c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001740:	4651      	mov	r1, sl
 8001742:	018a      	lsls	r2, r1, #6
 8001744:	4651      	mov	r1, sl
 8001746:	ebb2 0801 	subs.w	r8, r2, r1
 800174a:	4659      	mov	r1, fp
 800174c:	eb63 0901 	sbc.w	r9, r3, r1
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800175c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001760:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001764:	4690      	mov	r8, r2
 8001766:	4699      	mov	r9, r3
 8001768:	4623      	mov	r3, r4
 800176a:	eb18 0303 	adds.w	r3, r8, r3
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	462b      	mov	r3, r5
 8001772:	eb49 0303 	adc.w	r3, r9, r3
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001784:	4629      	mov	r1, r5
 8001786:	024b      	lsls	r3, r1, #9
 8001788:	4621      	mov	r1, r4
 800178a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800178e:	4621      	mov	r1, r4
 8001790:	024a      	lsls	r2, r1, #9
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800179a:	2200      	movs	r2, #0
 800179c:	65bb      	str	r3, [r7, #88]	; 0x58
 800179e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80017a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017a4:	f7fe fdd4 	bl	8000350 <__aeabi_uldivmod>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4613      	mov	r3, r2
 80017ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017b2:	e065      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0x420>
 80017b4:	40023800 	.word	0x40023800
 80017b8:	00f42400 	.word	0x00f42400
 80017bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c0:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	099b      	lsrs	r3, r3, #6
 80017c6:	2200      	movs	r2, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	4611      	mov	r1, r2
 80017cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017d0:	653b      	str	r3, [r7, #80]	; 0x50
 80017d2:	2300      	movs	r3, #0
 80017d4:	657b      	str	r3, [r7, #84]	; 0x54
 80017d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80017da:	4642      	mov	r2, r8
 80017dc:	464b      	mov	r3, r9
 80017de:	f04f 0000 	mov.w	r0, #0
 80017e2:	f04f 0100 	mov.w	r1, #0
 80017e6:	0159      	lsls	r1, r3, #5
 80017e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ec:	0150      	lsls	r0, r2, #5
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4641      	mov	r1, r8
 80017f4:	1a51      	subs	r1, r2, r1
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	4649      	mov	r1, r9
 80017fa:	eb63 0301 	sbc.w	r3, r3, r1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800180c:	4659      	mov	r1, fp
 800180e:	018b      	lsls	r3, r1, #6
 8001810:	4651      	mov	r1, sl
 8001812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001816:	4651      	mov	r1, sl
 8001818:	018a      	lsls	r2, r1, #6
 800181a:	4651      	mov	r1, sl
 800181c:	1a54      	subs	r4, r2, r1
 800181e:	4659      	mov	r1, fp
 8001820:	eb63 0501 	sbc.w	r5, r3, r1
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	00eb      	lsls	r3, r5, #3
 800182e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001832:	00e2      	lsls	r2, r4, #3
 8001834:	4614      	mov	r4, r2
 8001836:	461d      	mov	r5, r3
 8001838:	4643      	mov	r3, r8
 800183a:	18e3      	adds	r3, r4, r3
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	464b      	mov	r3, r9
 8001840:	eb45 0303 	adc.w	r3, r5, r3
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001852:	4629      	mov	r1, r5
 8001854:	028b      	lsls	r3, r1, #10
 8001856:	4621      	mov	r1, r4
 8001858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800185c:	4621      	mov	r1, r4
 800185e:	028a      	lsls	r2, r1, #10
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001868:	2200      	movs	r2, #0
 800186a:	64bb      	str	r3, [r7, #72]	; 0x48
 800186c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800186e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001872:	f7fe fd6d 	bl	8000350 <__aeabi_uldivmod>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4613      	mov	r3, r2
 800187c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	0f1b      	lsrs	r3, r3, #28
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800188e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001892:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800189e:	e003      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80018a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	37b8      	adds	r7, #184	; 0xb8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	00f42400 	.word	0x00f42400

080018c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e28d      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 8083 	beq.w	80019e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018e0:	4b94      	ldr	r3, [pc, #592]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 030c 	and.w	r3, r3, #12
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d019      	beq.n	8001920 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018ec:	4b91      	ldr	r3, [pc, #580]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018f8:	4b8e      	ldr	r3, [pc, #568]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001904:	d00c      	beq.n	8001920 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001906:	4b8b      	ldr	r3, [pc, #556]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d112      	bne.n	8001938 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001912:	4b88      	ldr	r3, [pc, #544]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800191e:	d10b      	bne.n	8001938 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	4b84      	ldr	r3, [pc, #528]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d05b      	beq.n	80019e4 <HAL_RCC_OscConfig+0x124>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d157      	bne.n	80019e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e25a      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001940:	d106      	bne.n	8001950 <HAL_RCC_OscConfig+0x90>
 8001942:	4b7c      	ldr	r3, [pc, #496]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a7b      	ldr	r2, [pc, #492]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e01d      	b.n	800198c <HAL_RCC_OscConfig+0xcc>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0xb4>
 800195a:	4b76      	ldr	r3, [pc, #472]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a75      	ldr	r2, [pc, #468]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a72      	ldr	r2, [pc, #456]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 800196c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0xcc>
 8001974:	4b6f      	ldr	r3, [pc, #444]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a6e      	ldr	r2, [pc, #440]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 800197a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b6c      	ldr	r3, [pc, #432]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a6b      	ldr	r2, [pc, #428]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d013      	beq.n	80019bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff f97c 	bl	8000c90 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff f978 	bl	8000c90 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e21f      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b61      	ldr	r3, [pc, #388]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0xdc>
 80019ba:	e014      	b.n	80019e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff f968 	bl	8000c90 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff f964 	bl	8000c90 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e20b      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d6:	4b57      	ldr	r3, [pc, #348]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x104>
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d06f      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019f2:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d017      	beq.n	8001a2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019fe:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d105      	bne.n	8001a16 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a0a:	4b4a      	ldr	r3, [pc, #296]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00b      	beq.n	8001a2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a16:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a1e:	2b0c      	cmp	r3, #12
 8001a20:	d11c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a22:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d116      	bne.n	8001a5c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2e:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d005      	beq.n	8001a46 <HAL_RCC_OscConfig+0x186>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d001      	beq.n	8001a46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e1d3      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a46:	4b3b      	ldr	r3, [pc, #236]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4937      	ldr	r1, [pc, #220]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5a:	e03a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d020      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a64:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <HAL_RCC_OscConfig+0x278>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6a:	f7ff f911 	bl	8000c90 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a72:	f7ff f90d 	bl	8000c90 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e1b4      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4925      	ldr	r1, [pc, #148]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
 8001aa4:	e015      	b.n	8001ad2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa6:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <HAL_RCC_OscConfig+0x278>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff f8f0 	bl	8000c90 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab4:	f7ff f8ec 	bl	8000c90 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e193      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d036      	beq.n	8001b4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d016      	beq.n	8001b14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_RCC_OscConfig+0x27c>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aec:	f7ff f8d0 	bl	8000c90 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af4:	f7ff f8cc 	bl	8000c90 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e173      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x234>
 8001b12:	e01b      	b.n	8001b4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_RCC_OscConfig+0x27c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1a:	f7ff f8b9 	bl	8000c90 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b20:	e00e      	b.n	8001b40 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b22:	f7ff f8b5 	bl	8000c90 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d907      	bls.n	8001b40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e15c      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
 8001b34:	40023800 	.word	0x40023800
 8001b38:	42470000 	.word	0x42470000
 8001b3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b40:	4b8a      	ldr	r3, [pc, #552]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1ea      	bne.n	8001b22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 8097 	beq.w	8001c88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5e:	4b83      	ldr	r3, [pc, #524]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10f      	bne.n	8001b8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	4b7f      	ldr	r3, [pc, #508]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a7e      	ldr	r2, [pc, #504]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b7c      	ldr	r3, [pc, #496]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b86:	2301      	movs	r3, #1
 8001b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8a:	4b79      	ldr	r3, [pc, #484]	; (8001d70 <HAL_RCC_OscConfig+0x4b0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d118      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b96:	4b76      	ldr	r3, [pc, #472]	; (8001d70 <HAL_RCC_OscConfig+0x4b0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a75      	ldr	r2, [pc, #468]	; (8001d70 <HAL_RCC_OscConfig+0x4b0>)
 8001b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff f875 	bl	8000c90 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001baa:	f7ff f871 	bl	8000c90 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e118      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	4b6c      	ldr	r3, [pc, #432]	; (8001d70 <HAL_RCC_OscConfig+0x4b0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_OscConfig+0x31e>
 8001bd0:	4b66      	ldr	r3, [pc, #408]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	4a65      	ldr	r2, [pc, #404]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
 8001bdc:	e01c      	b.n	8001c18 <HAL_RCC_OscConfig+0x358>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x340>
 8001be6:	4b61      	ldr	r3, [pc, #388]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bea:	4a60      	ldr	r2, [pc, #384]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf2:	4b5e      	ldr	r3, [pc, #376]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf6:	4a5d      	ldr	r2, [pc, #372]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_OscConfig+0x358>
 8001c00:	4b5a      	ldr	r3, [pc, #360]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c04:	4a59      	ldr	r2, [pc, #356]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	f023 0301 	bic.w	r3, r3, #1
 8001c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c0c:	4b57      	ldr	r3, [pc, #348]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c10:	4a56      	ldr	r2, [pc, #344]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001c12:	f023 0304 	bic.w	r3, r3, #4
 8001c16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d015      	beq.n	8001c4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff f836 	bl	8000c90 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7ff f832 	bl	8000c90 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e0d7      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3e:	4b4b      	ldr	r3, [pc, #300]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0ee      	beq.n	8001c28 <HAL_RCC_OscConfig+0x368>
 8001c4a:	e014      	b.n	8001c76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4c:	f7ff f820 	bl	8000c90 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c54:	f7ff f81c 	bl	8000c90 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e0c1      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6a:	4b40      	ldr	r3, [pc, #256]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1ee      	bne.n	8001c54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c76:	7dfb      	ldrb	r3, [r7, #23]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d105      	bne.n	8001c88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c7c:	4b3b      	ldr	r3, [pc, #236]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	4a3a      	ldr	r2, [pc, #232]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80ad 	beq.w	8001dec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c92:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d060      	beq.n	8001d60 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d145      	bne.n	8001d32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca6:	4b33      	ldr	r3, [pc, #204]	; (8001d74 <HAL_RCC_OscConfig+0x4b4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7fe fff0 	bl	8000c90 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7fe ffec 	bl	8000c90 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e093      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc6:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69da      	ldr	r2, [r3, #28]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	019b      	lsls	r3, r3, #6
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	085b      	lsrs	r3, r3, #1
 8001cea:	3b01      	subs	r3, #1
 8001cec:	041b      	lsls	r3, r3, #16
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	061b      	lsls	r3, r3, #24
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	071b      	lsls	r3, r3, #28
 8001cfe:	491b      	ldr	r1, [pc, #108]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x4b4>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0a:	f7fe ffc1 	bl	8000c90 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d12:	f7fe ffbd 	bl	8000c90 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e064      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x452>
 8001d30:	e05c      	b.n	8001dec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_RCC_OscConfig+0x4b4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7fe ffaa 	bl	8000c90 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d40:	f7fe ffa6 	bl	8000c90 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e04d      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x480>
 8001d5e:	e045      	b.n	8001dec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e040      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40007000 	.word	0x40007000
 8001d74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d78:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <HAL_RCC_OscConfig+0x538>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d030      	beq.n	8001de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d129      	bne.n	8001de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d122      	bne.n	8001de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001da8:	4013      	ands	r3, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d119      	bne.n	8001de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	085b      	lsrs	r3, r3, #1
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d10f      	bne.n	8001de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d107      	bne.n	8001de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800

08001dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e041      	b.n	8001e92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f839 	bl	8001e9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3304      	adds	r3, #4
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	f000 f9d8 	bl	80021f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d001      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e04e      	b.n	8001f66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a23      	ldr	r2, [pc, #140]	; (8001f74 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d022      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef2:	d01d      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1f      	ldr	r2, [pc, #124]	; (8001f78 <HAL_TIM_Base_Start_IT+0xc8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d018      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1e      	ldr	r2, [pc, #120]	; (8001f7c <HAL_TIM_Base_Start_IT+0xcc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00e      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1b      	ldr	r2, [pc, #108]	; (8001f84 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d009      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a19      	ldr	r2, [pc, #100]	; (8001f88 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <HAL_TIM_Base_Start_IT+0xdc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d111      	bne.n	8001f54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d010      	beq.n	8001f64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f52:	e007      	b.n	8001f64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40010000 	.word	0x40010000
 8001f78:	40000400 	.word	0x40000400
 8001f7c:	40000800 	.word	0x40000800
 8001f80:	40000c00 	.word	0x40000c00
 8001f84:	40010400 	.word	0x40010400
 8001f88:	40014000 	.word	0x40014000
 8001f8c:	40001800 	.word	0x40001800

08001f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d122      	bne.n	8001fec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d11b      	bne.n	8001fec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0202 	mvn.w	r2, #2
 8001fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8ee 	bl	80021b4 <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8e0 	bl	80021a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f8f1 	bl	80021c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d122      	bne.n	8002040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b04      	cmp	r3, #4
 8002006:	d11b      	bne.n	8002040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0204 	mvn.w	r2, #4
 8002010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2202      	movs	r2, #2
 8002016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f8c4 	bl	80021b4 <HAL_TIM_IC_CaptureCallback>
 800202c:	e005      	b.n	800203a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f8b6 	bl	80021a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f8c7 	bl	80021c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b08      	cmp	r3, #8
 800204c:	d122      	bne.n	8002094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b08      	cmp	r3, #8
 800205a:	d11b      	bne.n	8002094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0208 	mvn.w	r2, #8
 8002064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2204      	movs	r2, #4
 800206a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f89a 	bl	80021b4 <HAL_TIM_IC_CaptureCallback>
 8002080:	e005      	b.n	800208e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f88c 	bl	80021a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f89d 	bl	80021c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d122      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d11b      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0210 	mvn.w	r2, #16
 80020b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2208      	movs	r2, #8
 80020be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f870 	bl	80021b4 <HAL_TIM_IC_CaptureCallback>
 80020d4:	e005      	b.n	80020e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f862 	bl	80021a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f873 	bl	80021c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d10e      	bne.n	8002114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d107      	bne.n	8002114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0201 	mvn.w	r2, #1
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe fc28 	bl	8000964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	2b80      	cmp	r3, #128	; 0x80
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212c:	2b80      	cmp	r3, #128	; 0x80
 800212e:	d107      	bne.n	8002140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f902 	bl	8002344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214a:	2b40      	cmp	r3, #64	; 0x40
 800214c:	d10e      	bne.n	800216c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002158:	2b40      	cmp	r3, #64	; 0x40
 800215a:	d107      	bne.n	800216c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f838 	bl	80021dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	2b20      	cmp	r3, #32
 8002178:	d10e      	bne.n	8002198 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b20      	cmp	r3, #32
 8002186:	d107      	bne.n	8002198 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0220 	mvn.w	r2, #32
 8002190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f8cc 	bl	8002330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a40      	ldr	r2, [pc, #256]	; (8002304 <TIM_Base_SetConfig+0x114>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d013      	beq.n	8002230 <TIM_Base_SetConfig+0x40>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220e:	d00f      	beq.n	8002230 <TIM_Base_SetConfig+0x40>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a3d      	ldr	r2, [pc, #244]	; (8002308 <TIM_Base_SetConfig+0x118>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00b      	beq.n	8002230 <TIM_Base_SetConfig+0x40>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3c      	ldr	r2, [pc, #240]	; (800230c <TIM_Base_SetConfig+0x11c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d007      	beq.n	8002230 <TIM_Base_SetConfig+0x40>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a3b      	ldr	r2, [pc, #236]	; (8002310 <TIM_Base_SetConfig+0x120>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d003      	beq.n	8002230 <TIM_Base_SetConfig+0x40>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3a      	ldr	r2, [pc, #232]	; (8002314 <TIM_Base_SetConfig+0x124>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d108      	bne.n	8002242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a2f      	ldr	r2, [pc, #188]	; (8002304 <TIM_Base_SetConfig+0x114>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d02b      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002250:	d027      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a2c      	ldr	r2, [pc, #176]	; (8002308 <TIM_Base_SetConfig+0x118>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d023      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a2b      	ldr	r2, [pc, #172]	; (800230c <TIM_Base_SetConfig+0x11c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01f      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a2a      	ldr	r2, [pc, #168]	; (8002310 <TIM_Base_SetConfig+0x120>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01b      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a29      	ldr	r2, [pc, #164]	; (8002314 <TIM_Base_SetConfig+0x124>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d017      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a28      	ldr	r2, [pc, #160]	; (8002318 <TIM_Base_SetConfig+0x128>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a27      	ldr	r2, [pc, #156]	; (800231c <TIM_Base_SetConfig+0x12c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00f      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a26      	ldr	r2, [pc, #152]	; (8002320 <TIM_Base_SetConfig+0x130>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00b      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a25      	ldr	r2, [pc, #148]	; (8002324 <TIM_Base_SetConfig+0x134>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a24      	ldr	r2, [pc, #144]	; (8002328 <TIM_Base_SetConfig+0x138>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d003      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a23      	ldr	r2, [pc, #140]	; (800232c <TIM_Base_SetConfig+0x13c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d108      	bne.n	80022b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <TIM_Base_SetConfig+0x114>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d003      	beq.n	80022e8 <TIM_Base_SetConfig+0xf8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a0c      	ldr	r2, [pc, #48]	; (8002314 <TIM_Base_SetConfig+0x124>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d103      	bne.n	80022f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	615a      	str	r2, [r3, #20]
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40010000 	.word	0x40010000
 8002308:	40000400 	.word	0x40000400
 800230c:	40000800 	.word	0x40000800
 8002310:	40000c00 	.word	0x40000c00
 8002314:	40010400 	.word	0x40010400
 8002318:	40014000 	.word	0x40014000
 800231c:	40014400 	.word	0x40014400
 8002320:	40014800 	.word	0x40014800
 8002324:	40001800 	.word	0x40001800
 8002328:	40001c00 	.word	0x40001c00
 800232c:	40002000 	.word	0x40002000

08002330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e03f      	b.n	80023ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7fe fb30 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2224      	movs	r2, #36	; 0x24
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800239a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f829 	bl	80023f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f8:	b0c0      	sub	sp, #256	; 0x100
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800240c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002410:	68d9      	ldr	r1, [r3, #12]
 8002412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	ea40 0301 	orr.w	r3, r0, r1
 800241c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800241e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	431a      	orrs	r2, r3
 800242c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	431a      	orrs	r2, r3
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800244c:	f021 010c 	bic.w	r1, r1, #12
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800245a:	430b      	orrs	r3, r1
 800245c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800245e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800246a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246e:	6999      	ldr	r1, [r3, #24]
 8002470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	ea40 0301 	orr.w	r3, r0, r1
 800247a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800247c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b8f      	ldr	r3, [pc, #572]	; (80026c0 <UART_SetConfig+0x2cc>)
 8002484:	429a      	cmp	r2, r3
 8002486:	d005      	beq.n	8002494 <UART_SetConfig+0xa0>
 8002488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4b8d      	ldr	r3, [pc, #564]	; (80026c4 <UART_SetConfig+0x2d0>)
 8002490:	429a      	cmp	r2, r3
 8002492:	d104      	bne.n	800249e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002494:	f7fe ff9e 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8002498:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800249c:	e003      	b.n	80024a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800249e:	f7fe ff85 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 80024a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b0:	f040 810c 	bne.w	80026cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024b8:	2200      	movs	r2, #0
 80024ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024c6:	4622      	mov	r2, r4
 80024c8:	462b      	mov	r3, r5
 80024ca:	1891      	adds	r1, r2, r2
 80024cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80024ce:	415b      	adcs	r3, r3
 80024d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024d6:	4621      	mov	r1, r4
 80024d8:	eb12 0801 	adds.w	r8, r2, r1
 80024dc:	4629      	mov	r1, r5
 80024de:	eb43 0901 	adc.w	r9, r3, r1
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024f6:	4690      	mov	r8, r2
 80024f8:	4699      	mov	r9, r3
 80024fa:	4623      	mov	r3, r4
 80024fc:	eb18 0303 	adds.w	r3, r8, r3
 8002500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002504:	462b      	mov	r3, r5
 8002506:	eb49 0303 	adc.w	r3, r9, r3
 800250a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800250e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800251a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800251e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002522:	460b      	mov	r3, r1
 8002524:	18db      	adds	r3, r3, r3
 8002526:	653b      	str	r3, [r7, #80]	; 0x50
 8002528:	4613      	mov	r3, r2
 800252a:	eb42 0303 	adc.w	r3, r2, r3
 800252e:	657b      	str	r3, [r7, #84]	; 0x54
 8002530:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002534:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002538:	f7fd ff0a 	bl	8000350 <__aeabi_uldivmod>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <UART_SetConfig+0x2d4>)
 8002542:	fba3 2302 	umull	r2, r3, r3, r2
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	011c      	lsls	r4, r3, #4
 800254a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800254e:	2200      	movs	r2, #0
 8002550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002554:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002558:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800255c:	4642      	mov	r2, r8
 800255e:	464b      	mov	r3, r9
 8002560:	1891      	adds	r1, r2, r2
 8002562:	64b9      	str	r1, [r7, #72]	; 0x48
 8002564:	415b      	adcs	r3, r3
 8002566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002568:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800256c:	4641      	mov	r1, r8
 800256e:	eb12 0a01 	adds.w	sl, r2, r1
 8002572:	4649      	mov	r1, r9
 8002574:	eb43 0b01 	adc.w	fp, r3, r1
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002584:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002588:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800258c:	4692      	mov	sl, r2
 800258e:	469b      	mov	fp, r3
 8002590:	4643      	mov	r3, r8
 8002592:	eb1a 0303 	adds.w	r3, sl, r3
 8002596:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800259a:	464b      	mov	r3, r9
 800259c:	eb4b 0303 	adc.w	r3, fp, r3
 80025a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80025b8:	460b      	mov	r3, r1
 80025ba:	18db      	adds	r3, r3, r3
 80025bc:	643b      	str	r3, [r7, #64]	; 0x40
 80025be:	4613      	mov	r3, r2
 80025c0:	eb42 0303 	adc.w	r3, r2, r3
 80025c4:	647b      	str	r3, [r7, #68]	; 0x44
 80025c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80025ce:	f7fd febf 	bl	8000350 <__aeabi_uldivmod>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <UART_SetConfig+0x2d4>)
 80025da:	fba3 2301 	umull	r2, r3, r3, r1
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	2264      	movs	r2, #100	; 0x64
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	1acb      	subs	r3, r1, r3
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025ee:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <UART_SetConfig+0x2d4>)
 80025f0:	fba3 2302 	umull	r2, r3, r3, r2
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025fc:	441c      	add	r4, r3
 80025fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002602:	2200      	movs	r2, #0
 8002604:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002608:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800260c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002610:	4642      	mov	r2, r8
 8002612:	464b      	mov	r3, r9
 8002614:	1891      	adds	r1, r2, r2
 8002616:	63b9      	str	r1, [r7, #56]	; 0x38
 8002618:	415b      	adcs	r3, r3
 800261a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800261c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002620:	4641      	mov	r1, r8
 8002622:	1851      	adds	r1, r2, r1
 8002624:	6339      	str	r1, [r7, #48]	; 0x30
 8002626:	4649      	mov	r1, r9
 8002628:	414b      	adcs	r3, r1
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002638:	4659      	mov	r1, fp
 800263a:	00cb      	lsls	r3, r1, #3
 800263c:	4651      	mov	r1, sl
 800263e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002642:	4651      	mov	r1, sl
 8002644:	00ca      	lsls	r2, r1, #3
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	4603      	mov	r3, r0
 800264c:	4642      	mov	r2, r8
 800264e:	189b      	adds	r3, r3, r2
 8002650:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002654:	464b      	mov	r3, r9
 8002656:	460a      	mov	r2, r1
 8002658:	eb42 0303 	adc.w	r3, r2, r3
 800265c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800266c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002670:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002674:	460b      	mov	r3, r1
 8002676:	18db      	adds	r3, r3, r3
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
 800267a:	4613      	mov	r3, r2
 800267c:	eb42 0303 	adc.w	r3, r2, r3
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002682:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002686:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800268a:	f7fd fe61 	bl	8000350 <__aeabi_uldivmod>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <UART_SetConfig+0x2d4>)
 8002694:	fba3 1302 	umull	r1, r3, r3, r2
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	2164      	movs	r1, #100	; 0x64
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	3332      	adds	r3, #50	; 0x32
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <UART_SetConfig+0x2d4>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	f003 0207 	and.w	r2, r3, #7
 80026b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4422      	add	r2, r4
 80026ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026bc:	e105      	b.n	80028ca <UART_SetConfig+0x4d6>
 80026be:	bf00      	nop
 80026c0:	40011000 	.word	0x40011000
 80026c4:	40011400 	.word	0x40011400
 80026c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026d0:	2200      	movs	r2, #0
 80026d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026de:	4642      	mov	r2, r8
 80026e0:	464b      	mov	r3, r9
 80026e2:	1891      	adds	r1, r2, r2
 80026e4:	6239      	str	r1, [r7, #32]
 80026e6:	415b      	adcs	r3, r3
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ee:	4641      	mov	r1, r8
 80026f0:	1854      	adds	r4, r2, r1
 80026f2:	4649      	mov	r1, r9
 80026f4:	eb43 0501 	adc.w	r5, r3, r1
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	00eb      	lsls	r3, r5, #3
 8002702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002706:	00e2      	lsls	r2, r4, #3
 8002708:	4614      	mov	r4, r2
 800270a:	461d      	mov	r5, r3
 800270c:	4643      	mov	r3, r8
 800270e:	18e3      	adds	r3, r4, r3
 8002710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002714:	464b      	mov	r3, r9
 8002716:	eb45 0303 	adc.w	r3, r5, r3
 800271a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800271e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800272a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800273a:	4629      	mov	r1, r5
 800273c:	008b      	lsls	r3, r1, #2
 800273e:	4621      	mov	r1, r4
 8002740:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002744:	4621      	mov	r1, r4
 8002746:	008a      	lsls	r2, r1, #2
 8002748:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800274c:	f7fd fe00 	bl	8000350 <__aeabi_uldivmod>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4b60      	ldr	r3, [pc, #384]	; (80028d8 <UART_SetConfig+0x4e4>)
 8002756:	fba3 2302 	umull	r2, r3, r3, r2
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	011c      	lsls	r4, r3, #4
 800275e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002762:	2200      	movs	r2, #0
 8002764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002768:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800276c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002770:	4642      	mov	r2, r8
 8002772:	464b      	mov	r3, r9
 8002774:	1891      	adds	r1, r2, r2
 8002776:	61b9      	str	r1, [r7, #24]
 8002778:	415b      	adcs	r3, r3
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002780:	4641      	mov	r1, r8
 8002782:	1851      	adds	r1, r2, r1
 8002784:	6139      	str	r1, [r7, #16]
 8002786:	4649      	mov	r1, r9
 8002788:	414b      	adcs	r3, r1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002798:	4659      	mov	r1, fp
 800279a:	00cb      	lsls	r3, r1, #3
 800279c:	4651      	mov	r1, sl
 800279e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027a2:	4651      	mov	r1, sl
 80027a4:	00ca      	lsls	r2, r1, #3
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	4642      	mov	r2, r8
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027b4:	464b      	mov	r3, r9
 80027b6:	460a      	mov	r2, r1
 80027b8:	eb42 0303 	adc.w	r3, r2, r3
 80027bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80027ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027d8:	4649      	mov	r1, r9
 80027da:	008b      	lsls	r3, r1, #2
 80027dc:	4641      	mov	r1, r8
 80027de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027e2:	4641      	mov	r1, r8
 80027e4:	008a      	lsls	r2, r1, #2
 80027e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027ea:	f7fd fdb1 	bl	8000350 <__aeabi_uldivmod>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <UART_SetConfig+0x4e4>)
 80027f4:	fba3 1302 	umull	r1, r3, r3, r2
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	2164      	movs	r1, #100	; 0x64
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	3332      	adds	r3, #50	; 0x32
 8002806:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <UART_SetConfig+0x4e4>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002812:	441c      	add	r4, r3
 8002814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002818:	2200      	movs	r2, #0
 800281a:	673b      	str	r3, [r7, #112]	; 0x70
 800281c:	677a      	str	r2, [r7, #116]	; 0x74
 800281e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002822:	4642      	mov	r2, r8
 8002824:	464b      	mov	r3, r9
 8002826:	1891      	adds	r1, r2, r2
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	415b      	adcs	r3, r3
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002832:	4641      	mov	r1, r8
 8002834:	1851      	adds	r1, r2, r1
 8002836:	6039      	str	r1, [r7, #0]
 8002838:	4649      	mov	r1, r9
 800283a:	414b      	adcs	r3, r1
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800284a:	4659      	mov	r1, fp
 800284c:	00cb      	lsls	r3, r1, #3
 800284e:	4651      	mov	r1, sl
 8002850:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002854:	4651      	mov	r1, sl
 8002856:	00ca      	lsls	r2, r1, #3
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	4603      	mov	r3, r0
 800285e:	4642      	mov	r2, r8
 8002860:	189b      	adds	r3, r3, r2
 8002862:	66bb      	str	r3, [r7, #104]	; 0x68
 8002864:	464b      	mov	r3, r9
 8002866:	460a      	mov	r2, r1
 8002868:	eb42 0303 	adc.w	r3, r2, r3
 800286c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800286e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	663b      	str	r3, [r7, #96]	; 0x60
 8002878:	667a      	str	r2, [r7, #100]	; 0x64
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002886:	4649      	mov	r1, r9
 8002888:	008b      	lsls	r3, r1, #2
 800288a:	4641      	mov	r1, r8
 800288c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002890:	4641      	mov	r1, r8
 8002892:	008a      	lsls	r2, r1, #2
 8002894:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002898:	f7fd fd5a 	bl	8000350 <__aeabi_uldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <UART_SetConfig+0x4e4>)
 80028a2:	fba3 1302 	umull	r1, r3, r3, r2
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	2164      	movs	r1, #100	; 0x64
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	3332      	adds	r3, #50	; 0x32
 80028b4:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <UART_SetConfig+0x4e4>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	f003 020f 	and.w	r2, r3, #15
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4422      	add	r2, r4
 80028c8:	609a      	str	r2, [r3, #8]
}
 80028ca:	bf00      	nop
 80028cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028d0:	46bd      	mov	sp, r7
 80028d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d6:	bf00      	nop
 80028d8:	51eb851f 	.word	0x51eb851f

080028dc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f103 0208 	add.w	r2, r3, #8
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f103 0208 	add.w	r2, r3, #8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f103 0208 	add.w	r2, r3, #8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d103      	bne.n	8002956 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	e00c      	b.n	8002970 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3308      	adds	r3, #8
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	e002      	b.n	8002964 <vListInsert+0x2e>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	429a      	cmp	r2, r3
 800296e:	d2f6      	bcs.n	800295e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	601a      	str	r2, [r3, #0]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6892      	ldr	r2, [r2, #8]
 80029be:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6852      	ldr	r2, [r2, #4]
 80029c8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d103      	bne.n	80029dc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	1e5a      	subs	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002a06:	2301      	movs	r3, #1
 8002a08:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <xQueueGenericReset+0x2e>
        __asm volatile
 8002a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a18:	f383 8811 	msr	BASEPRI, r3
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	60fb      	str	r3, [r7, #12]
    }
 8002a26:	bf00      	nop
 8002a28:	e7fe      	b.n	8002a28 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d05d      	beq.n	8002aec <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d059      	beq.n	8002aec <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	2100      	movs	r1, #0
 8002a42:	fba3 2302 	umull	r2, r3, r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d000      	beq.n	8002a4c <xQueueGenericReset+0x50>
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d14c      	bne.n	8002aec <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002a52:	f001 fe79 	bl	8004748 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	6939      	ldr	r1, [r7, #16]
 8002a60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	441a      	add	r2, r3
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a82:	3b01      	subs	r3, #1
 8002a84:	6939      	ldr	r1, [r7, #16]
 8002a86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	441a      	add	r2, r3
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	22ff      	movs	r2, #255	; 0xff
 8002a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	22ff      	movs	r2, #255	; 0xff
 8002a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d114      	bne.n	8002ad2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01a      	beq.n	8002ae6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	3310      	adds	r3, #16
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 ffe3 	bl	8003a80 <xTaskRemoveFromEventList>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d012      	beq.n	8002ae6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002ac0:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <xQueueGenericReset+0x11c>)
 8002ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	e009      	b.n	8002ae6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	3310      	adds	r3, #16
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff00 	bl	80028dc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	3324      	adds	r3, #36	; 0x24
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fefb 	bl	80028dc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002ae6:	f001 fe5f 	bl	80047a8 <vPortExitCritical>
 8002aea:	e001      	b.n	8002af0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <xQueueGenericReset+0x110>
        __asm volatile
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	60bb      	str	r3, [r7, #8]
    }
 8002b08:	bf00      	nop
 8002b0a:	e7fe      	b.n	8002b0a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002b0c:	697b      	ldr	r3, [r7, #20]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	e000ed04 	.word	0xe000ed04

08002b1c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	; 0x28
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	4613      	mov	r3, r2
 8002b28:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d02e      	beq.n	8002b92 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002b34:	2100      	movs	r1, #0
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d000      	beq.n	8002b44 <xQueueGenericCreate+0x28>
 8002b42:	2101      	movs	r1, #1
 8002b44:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d123      	bne.n	8002b92 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002b52:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002b56:	d81c      	bhi.n	8002b92 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	fb02 f303 	mul.w	r3, r2, r3
 8002b60:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	3350      	adds	r3, #80	; 0x50
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 ff18 	bl	800499c <pvPortMalloc>
 8002b6c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01c      	beq.n	8002bae <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3350      	adds	r3, #80	; 0x50
 8002b7c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b7e:	79fa      	ldrb	r2, [r7, #7]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	4613      	mov	r3, r2
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f814 	bl	8002bb8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002b90:	e00d      	b.n	8002bae <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <xQueueGenericCreate+0x92>
        __asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	613b      	str	r3, [r7, #16]
    }
 8002baa:	bf00      	nop
 8002bac:	e7fe      	b.n	8002bac <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002bae:	69fb      	ldr	r3, [r7, #28]
    }
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3720      	adds	r7, #32
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d103      	bne.n	8002bd4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e002      	b.n	8002bda <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002be6:	2101      	movs	r1, #1
 8002be8:	69b8      	ldr	r0, [r7, #24]
 8002bea:	f7ff ff07 	bl	80029fc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	68f9      	ldr	r1, [r7, #12]
 8002bfc:	2073      	movs	r0, #115	; 0x73
 8002bfe:	f003 fe31 	bl	8006864 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b08f      	sub	sp, #60	; 0x3c
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <xQueueReceive+0x30>
        __asm volatile
 8002c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	623b      	str	r3, [r7, #32]
    }
 8002c38:	bf00      	nop
 8002c3a:	e7fe      	b.n	8002c3a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d103      	bne.n	8002c4a <xQueueReceive+0x3e>
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <xQueueReceive+0x42>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <xQueueReceive+0x44>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <xQueueReceive+0x5e>
        __asm volatile
 8002c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	61fb      	str	r3, [r7, #28]
    }
 8002c66:	bf00      	nop
 8002c68:	e7fe      	b.n	8002c68 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c6a:	f001 f91b 	bl	8003ea4 <xTaskGetSchedulerState>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <xQueueReceive+0x6e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <xQueueReceive+0x72>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <xQueueReceive+0x74>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <xQueueReceive+0x8e>
        __asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	61bb      	str	r3, [r7, #24]
    }
 8002c96:	bf00      	nop
 8002c98:	e7fe      	b.n	8002c98 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c9a:	f001 fd55 	bl	8004748 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d02f      	beq.n	8002d0a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cae:	f000 f8bd 	bl	8002e2c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f004 fb03 	bl	80072c0 <SEGGER_SYSVIEW_ShrinkId>
 8002cba:	4604      	mov	r4, r0
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f004 faff 	bl	80072c0 <SEGGER_SYSVIEW_ShrinkId>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	9100      	str	r1, [sp, #0]
 8002cca:	4621      	mov	r1, r4
 8002ccc:	205c      	movs	r0, #92	; 0x5c
 8002cce:	f003 fe3f 	bl	8006950 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	1e5a      	subs	r2, r3, #1
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00f      	beq.n	8002d02 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	3310      	adds	r3, #16
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 feca 	bl	8003a80 <xTaskRemoveFromEventList>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d007      	beq.n	8002d02 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002cf2:	4b4d      	ldr	r3, [pc, #308]	; (8002e28 <xQueueReceive+0x21c>)
 8002cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002d02:	f001 fd51 	bl	80047a8 <vPortExitCritical>
                return pdPASS;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e08a      	b.n	8002e20 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d113      	bne.n	8002d38 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002d10:	f001 fd4a 	bl	80047a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	4618      	mov	r0, r3
 8002d18:	f004 fad2 	bl	80072c0 <SEGGER_SYSVIEW_ShrinkId>
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f004 face 	bl	80072c0 <SEGGER_SYSVIEW_ShrinkId>
 8002d24:	4602      	mov	r2, r0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2101      	movs	r1, #1
 8002d2a:	9100      	str	r1, [sp, #0]
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	205c      	movs	r0, #92	; 0x5c
 8002d30:	f003 fe0e 	bl	8006950 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e073      	b.n	8002e20 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002d3e:	f107 0310 	add.w	r3, r7, #16
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 ff74 	bl	8003c30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002d4c:	f001 fd2c 	bl	80047a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002d50:	f000 fb72 	bl	8003438 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002d54:	f001 fcf8 	bl	8004748 <vPortEnterCritical>
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d5e:	b25b      	sxtb	r3, r3
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d103      	bne.n	8002d6e <xQueueReceive+0x162>
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d74:	b25b      	sxtb	r3, r3
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7a:	d103      	bne.n	8002d84 <xQueueReceive+0x178>
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d84:	f001 fd10 	bl	80047a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d88:	1d3a      	adds	r2, r7, #4
 8002d8a:	f107 0310 	add.w	r3, r7, #16
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 ff63 	bl	8003c5c <xTaskCheckForTimeOut>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d124      	bne.n	8002de6 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d9e:	f000 f8bd 	bl	8002f1c <prvIsQueueEmpty>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d018      	beq.n	8002dda <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	3324      	adds	r3, #36	; 0x24
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fdf9 	bl	80039a8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002db8:	f000 f85e 	bl	8002e78 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002dbc:	f000 fb4a 	bl	8003454 <xTaskResumeAll>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f47f af69 	bne.w	8002c9a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002dc8:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <xQueueReceive+0x21c>)
 8002dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	e75f      	b.n	8002c9a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ddc:	f000 f84c 	bl	8002e78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002de0:	f000 fb38 	bl	8003454 <xTaskResumeAll>
 8002de4:	e759      	b.n	8002c9a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002de8:	f000 f846 	bl	8002e78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002dec:	f000 fb32 	bl	8003454 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df2:	f000 f893 	bl	8002f1c <prvIsQueueEmpty>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f43f af4e 	beq.w	8002c9a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	4618      	mov	r0, r3
 8002e02:	f004 fa5d 	bl	80072c0 <SEGGER_SYSVIEW_ShrinkId>
 8002e06:	4604      	mov	r4, r0
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f004 fa59 	bl	80072c0 <SEGGER_SYSVIEW_ShrinkId>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2101      	movs	r1, #1
 8002e14:	9100      	str	r1, [sp, #0]
 8002e16:	4621      	mov	r1, r4
 8002e18:	205c      	movs	r0, #92	; 0x5c
 8002e1a:	f003 fd99 	bl	8006950 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002e1e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3734      	adds	r7, #52	; 0x34
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd90      	pop	{r4, r7, pc}
 8002e28:	e000ed04 	.word	0xe000ed04

08002e2c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d018      	beq.n	8002e70 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	441a      	add	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d303      	bcc.n	8002e60 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68d9      	ldr	r1, [r3, #12]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6838      	ldr	r0, [r7, #0]
 8002e6c:	f004 fbf0 	bl	8007650 <memcpy>
    }
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002e80:	f001 fc62 	bl	8004748 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e8a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e8c:	e011      	b.n	8002eb2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d012      	beq.n	8002ebc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3324      	adds	r3, #36	; 0x24
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fdf0 	bl	8003a80 <xTaskRemoveFromEventList>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002ea6:	f000 ff3f 	bl	8003d28 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	dce9      	bgt.n	8002e8e <prvUnlockQueue+0x16>
 8002eba:	e000      	b.n	8002ebe <prvUnlockQueue+0x46>
                    break;
 8002ebc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	22ff      	movs	r2, #255	; 0xff
 8002ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002ec6:	f001 fc6f 	bl	80047a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002eca:	f001 fc3d 	bl	8004748 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ed4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ed6:	e011      	b.n	8002efc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d012      	beq.n	8002f06 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3310      	adds	r3, #16
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 fdcb 	bl	8003a80 <xTaskRemoveFromEventList>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002ef0:	f000 ff1a 	bl	8003d28 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002ef4:	7bbb      	ldrb	r3, [r7, #14]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	dce9      	bgt.n	8002ed8 <prvUnlockQueue+0x60>
 8002f04:	e000      	b.n	8002f08 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002f06:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	22ff      	movs	r2, #255	; 0xff
 8002f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002f10:	f001 fc4a 	bl	80047a8 <vPortExitCritical>
}
 8002f14:	bf00      	nop
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f24:	f001 fc10 	bl	8004748 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002f30:	2301      	movs	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	e001      	b.n	8002f3a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f3a:	f001 fc35 	bl	80047a8 <vPortExitCritical>

    return xReturn;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	60fb      	str	r3, [r7, #12]
    }
 8002f6e:	bf00      	nop
 8002f70:	e7fe      	b.n	8002f70 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d024      	beq.n	8002fc2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	e01e      	b.n	8002fbc <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002f7e:	4a1c      	ldr	r2, [pc, #112]	; (8002ff0 <vQueueAddToRegistry+0xa8>)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d105      	bne.n	8002f9a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4a17      	ldr	r2, [pc, #92]	; (8002ff0 <vQueueAddToRegistry+0xa8>)
 8002f94:	4413      	add	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
                    break;
 8002f98:	e013      	b.n	8002fc2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10a      	bne.n	8002fb6 <vQueueAddToRegistry+0x6e>
 8002fa0:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <vQueueAddToRegistry+0xa8>)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <vQueueAddToRegistry+0xa8>)
 8002fb2:	4413      	add	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2b07      	cmp	r3, #7
 8002fc0:	d9dd      	bls.n	8002f7e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00f      	beq.n	8002fe8 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f004 f972 	bl	80072c0 <SEGGER_SYSVIEW_ShrinkId>
 8002fdc:	4601      	mov	r1, r0
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2071      	movs	r0, #113	; 0x71
 8002fe4:	f003 fbe4 	bl	80067b0 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002fe8:	bf00      	nop
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	2000012c 	.word	0x2000012c

08002ff4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003004:	f001 fba0 	bl	8004748 <vPortEnterCritical>
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800300e:	b25b      	sxtb	r3, r3
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d103      	bne.n	800301e <vQueueWaitForMessageRestricted+0x2a>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003024:	b25b      	sxtb	r3, r3
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d103      	bne.n	8003034 <vQueueWaitForMessageRestricted+0x40>
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003034:	f001 fbb8 	bl	80047a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	2b00      	cmp	r3, #0
 800303e:	d106      	bne.n	800304e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	3324      	adds	r3, #36	; 0x24
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fcd1 	bl	80039f0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800304e:	6978      	ldr	r0, [r7, #20]
 8003050:	f7ff ff12 	bl	8002e78 <prvUnlockQueue>
    }
 8003054:	bf00      	nop
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800305c:	b580      	push	{r7, lr}
 800305e:	b08c      	sub	sp, #48	; 0x30
 8003060:	af04      	add	r7, sp, #16
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4618      	mov	r0, r3
 8003072:	f001 fc93 	bl	800499c <pvPortMalloc>
 8003076:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d013      	beq.n	80030a6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800307e:	2058      	movs	r0, #88	; 0x58
 8003080:	f001 fc8c 	bl	800499c <pvPortMalloc>
 8003084:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800308c:	2258      	movs	r2, #88	; 0x58
 800308e:	2100      	movs	r1, #0
 8003090:	69f8      	ldr	r0, [r7, #28]
 8003092:	f004 faeb 	bl	800766c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
 800309c:	e005      	b.n	80030aa <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800309e:	6978      	ldr	r0, [r7, #20]
 80030a0:	f001 fd36 	bl	8004b10 <vPortFree>
 80030a4:	e001      	b.n	80030aa <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d013      	beq.n	80030d8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030b0:	88fa      	ldrh	r2, [r7, #6]
 80030b2:	2300      	movs	r3, #0
 80030b4:	9303      	str	r3, [sp, #12]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	9302      	str	r3, [sp, #8]
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f80e 	bl	80030e8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80030cc:	69f8      	ldr	r0, [r7, #28]
 80030ce:	f000 f899 	bl	8003204 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80030d2:	2301      	movs	r3, #1
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	e002      	b.n	80030de <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
 80030dc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80030de:	69bb      	ldr	r3, [r7, #24]
    }
 80030e0:	4618      	mov	r0, r3
 80030e2:	3720      	adds	r7, #32
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	461a      	mov	r2, r3
 8003100:	21a5      	movs	r1, #165	; 0xa5
 8003102:	f004 fab3 	bl	800766c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003110:	3b01      	subs	r3, #1
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	f023 0307 	bic.w	r3, r3, #7
 800311e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <prvInitialiseNewTask+0x58>
        __asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	617b      	str	r3, [r7, #20]
    }
 800313c:	bf00      	nop
 800313e:	e7fe      	b.n	800313e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01e      	beq.n	8003184 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e012      	b.n	8003172 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	4413      	add	r3, r2
 8003152:	7819      	ldrb	r1, [r3, #0]
 8003154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	4413      	add	r3, r2
 800315a:	3334      	adds	r3, #52	; 0x34
 800315c:	460a      	mov	r2, r1
 800315e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	4413      	add	r3, r2
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d006      	beq.n	800317a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	3301      	adds	r3, #1
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	2b09      	cmp	r3, #9
 8003176:	d9e9      	bls.n	800314c <prvInitialiseNewTask+0x64>
 8003178:	e000      	b.n	800317c <prvInitialiseNewTask+0x94>
            {
                break;
 800317a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	2b04      	cmp	r3, #4
 8003188:	d90a      	bls.n	80031a0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	613b      	str	r3, [r7, #16]
    }
 800319c:	bf00      	nop
 800319e:	e7fe      	b.n	800319e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d901      	bls.n	80031aa <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031a6:	2304      	movs	r3, #4
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80031aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	3304      	adds	r3, #4
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fbae 	bl	800291c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	3318      	adds	r3, #24
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fba9 	bl	800291c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ce:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d2:	f1c3 0205 	rsb	r2, r3, #5
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031de:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	69b8      	ldr	r0, [r7, #24]
 80031e6:	f001 f97f 	bl	80044e8 <pxPortInitialiseStack>
 80031ea:	4602      	mov	r2, r0
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031fc:	bf00      	nop
 80031fe:	3720      	adds	r7, #32
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003204:	b5b0      	push	{r4, r5, r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af02      	add	r7, sp, #8
 800320a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800320c:	f001 fa9c 	bl	8004748 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003210:	4b4f      	ldr	r3, [pc, #316]	; (8003350 <prvAddNewTaskToReadyList+0x14c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3301      	adds	r3, #1
 8003216:	4a4e      	ldr	r2, [pc, #312]	; (8003350 <prvAddNewTaskToReadyList+0x14c>)
 8003218:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800321a:	4b4e      	ldr	r3, [pc, #312]	; (8003354 <prvAddNewTaskToReadyList+0x150>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003222:	4a4c      	ldr	r2, [pc, #304]	; (8003354 <prvAddNewTaskToReadyList+0x150>)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003228:	4b49      	ldr	r3, [pc, #292]	; (8003350 <prvAddNewTaskToReadyList+0x14c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d110      	bne.n	8003252 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003230:	f000 fd9e 	bl	8003d70 <prvInitialiseTaskLists>
 8003234:	e00d      	b.n	8003252 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003236:	4b48      	ldr	r3, [pc, #288]	; (8003358 <prvAddNewTaskToReadyList+0x154>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800323e:	4b45      	ldr	r3, [pc, #276]	; (8003354 <prvAddNewTaskToReadyList+0x150>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	429a      	cmp	r2, r3
 800324a:	d802      	bhi.n	8003252 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800324c:	4a41      	ldr	r2, [pc, #260]	; (8003354 <prvAddNewTaskToReadyList+0x150>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003252:	4b42      	ldr	r3, [pc, #264]	; (800335c <prvAddNewTaskToReadyList+0x158>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3301      	adds	r3, #1
 8003258:	4a40      	ldr	r2, [pc, #256]	; (800335c <prvAddNewTaskToReadyList+0x158>)
 800325a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800325c:	4b3f      	ldr	r3, [pc, #252]	; (800335c <prvAddNewTaskToReadyList+0x158>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d016      	beq.n	8003298 <prvAddNewTaskToReadyList+0x94>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4618      	mov	r0, r3
 800326e:	f003 ff61 	bl	8007134 <SEGGER_SYSVIEW_OnTaskCreate>
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	461d      	mov	r5, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461c      	mov	r4, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	1ae3      	subs	r3, r4, r3
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	462b      	mov	r3, r5
 8003294:	f001 fdfe 	bl	8004e94 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4618      	mov	r0, r3
 800329c:	f003 ffce 	bl	800723c <SEGGER_SYSVIEW_OnTaskStartReady>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	2201      	movs	r2, #1
 80032a6:	409a      	lsls	r2, r3
 80032a8:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <prvAddNewTaskToReadyList+0x15c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	4a2c      	ldr	r2, [pc, #176]	; (8003360 <prvAddNewTaskToReadyList+0x15c>)
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b6:	492b      	ldr	r1, [pc, #172]	; (8003364 <prvAddNewTaskToReadyList+0x160>)
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	3304      	adds	r3, #4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	609a      	str	r2, [r3, #8]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	3204      	adds	r2, #4
 80032de:	605a      	str	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	1d1a      	adds	r2, r3, #4
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <prvAddNewTaskToReadyList+0x160>)
 80032f6:	441a      	add	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	615a      	str	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003300:	4918      	ldr	r1, [pc, #96]	; (8003364 <prvAddNewTaskToReadyList+0x160>)
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	1c59      	adds	r1, r3, #1
 8003310:	4814      	ldr	r0, [pc, #80]	; (8003364 <prvAddNewTaskToReadyList+0x160>)
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4403      	add	r3, r0
 800331c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800331e:	f001 fa43 	bl	80047a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003322:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <prvAddNewTaskToReadyList+0x154>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00e      	beq.n	8003348 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800332a:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <prvAddNewTaskToReadyList+0x150>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	429a      	cmp	r2, r3
 8003336:	d207      	bcs.n	8003348 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <prvAddNewTaskToReadyList+0x164>)
 800333a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bdb0      	pop	{r4, r5, r7, pc}
 8003350:	20000244 	.word	0x20000244
 8003354:	2000016c 	.word	0x2000016c
 8003358:	20000250 	.word	0x20000250
 800335c:	20000260 	.word	0x20000260
 8003360:	2000024c 	.word	0x2000024c
 8003364:	20000170 	.word	0x20000170
 8003368:	e000ed04 	.word	0xe000ed04

0800336c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003372:	4b29      	ldr	r3, [pc, #164]	; (8003418 <vTaskStartScheduler+0xac>)
 8003374:	9301      	str	r3, [sp, #4]
 8003376:	2300      	movs	r3, #0
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	2300      	movs	r3, #0
 800337c:	2282      	movs	r2, #130	; 0x82
 800337e:	4927      	ldr	r1, [pc, #156]	; (800341c <vTaskStartScheduler+0xb0>)
 8003380:	4827      	ldr	r0, [pc, #156]	; (8003420 <vTaskStartScheduler+0xb4>)
 8003382:	f7ff fe6b 	bl	800305c <xTaskCreate>
 8003386:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d102      	bne.n	8003394 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800338e:	f000 fe27 	bl	8003fe0 <xTimerCreateTimerTask>
 8003392:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d129      	bne.n	80033ee <vTaskStartScheduler+0x82>
        __asm volatile
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	60bb      	str	r3, [r7, #8]
    }
 80033ac:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80033ae:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <vTaskStartScheduler+0xb8>)
 80033b0:	f04f 32ff 	mov.w	r2, #4294967295
 80033b4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80033b6:	4b1c      	ldr	r3, [pc, #112]	; (8003428 <vTaskStartScheduler+0xbc>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <vTaskStartScheduler+0xc0>)
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80033c2:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <vTaskStartScheduler+0xc4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3334      	adds	r3, #52	; 0x34
 80033c8:	2205      	movs	r2, #5
 80033ca:	4914      	ldr	r1, [pc, #80]	; (800341c <vTaskStartScheduler+0xb0>)
 80033cc:	4618      	mov	r0, r3
 80033ce:	f004 f92f 	bl	8007630 <memcmp>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <vTaskStartScheduler+0x78>
 80033d8:	4b15      	ldr	r3, [pc, #84]	; (8003430 <vTaskStartScheduler+0xc4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f003 feeb 	bl	80071b8 <SEGGER_SYSVIEW_OnTaskStartExec>
 80033e2:	e001      	b.n	80033e8 <vTaskStartScheduler+0x7c>
 80033e4:	f003 fe8a 	bl	80070fc <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80033e8:	f001 f90c 	bl	8004604 <xPortStartScheduler>
 80033ec:	e00e      	b.n	800340c <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d10a      	bne.n	800340c <vTaskStartScheduler+0xa0>
        __asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	607b      	str	r3, [r7, #4]
    }
 8003408:	bf00      	nop
 800340a:	e7fe      	b.n	800340a <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800340c:	4b09      	ldr	r3, [pc, #36]	; (8003434 <vTaskStartScheduler+0xc8>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000268 	.word	0x20000268
 800341c:	08007fe0 	.word	0x08007fe0
 8003420:	08003d41 	.word	0x08003d41
 8003424:	20000264 	.word	0x20000264
 8003428:	20000250 	.word	0x20000250
 800342c:	20000248 	.word	0x20000248
 8003430:	2000016c 	.word	0x2000016c
 8003434:	2000000c 	.word	0x2000000c

08003438 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <vTaskSuspendAll+0x18>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	4a03      	ldr	r2, [pc, #12]	; (8003450 <vTaskSuspendAll+0x18>)
 8003444:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003446:	bf00      	nop
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	2000026c 	.word	0x2000026c

08003454 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003462:	4b73      	ldr	r3, [pc, #460]	; (8003630 <xTaskResumeAll+0x1dc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10a      	bne.n	8003480 <xTaskResumeAll+0x2c>
        __asm volatile
 800346a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346e:	f383 8811 	msr	BASEPRI, r3
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	607b      	str	r3, [r7, #4]
    }
 800347c:	bf00      	nop
 800347e:	e7fe      	b.n	800347e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003480:	f001 f962 	bl	8004748 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003484:	4b6a      	ldr	r3, [pc, #424]	; (8003630 <xTaskResumeAll+0x1dc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3b01      	subs	r3, #1
 800348a:	4a69      	ldr	r2, [pc, #420]	; (8003630 <xTaskResumeAll+0x1dc>)
 800348c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800348e:	4b68      	ldr	r3, [pc, #416]	; (8003630 <xTaskResumeAll+0x1dc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 80c4 	bne.w	8003620 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003498:	4b66      	ldr	r3, [pc, #408]	; (8003634 <xTaskResumeAll+0x1e0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80bf 	beq.w	8003620 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034a2:	e08e      	b.n	80035c2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a4:	4b64      	ldr	r3, [pc, #400]	; (8003638 <xTaskResumeAll+0x1e4>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	6a12      	ldr	r2, [r2, #32]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	69d2      	ldr	r2, [r2, #28]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3318      	adds	r3, #24
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d103      	bne.n	80034da <xTaskResumeAll+0x86>
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	6a1a      	ldr	r2, [r3, #32]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	2200      	movs	r2, #0
 80034de:	629a      	str	r2, [r3, #40]	; 0x28
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	1e5a      	subs	r2, r3, #1
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	68d2      	ldr	r2, [r2, #12]
 80034f8:	609a      	str	r2, [r3, #8]
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	6892      	ldr	r2, [r2, #8]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	3304      	adds	r3, #4
 800350c:	429a      	cmp	r2, r3
 800350e:	d103      	bne.n	8003518 <xTaskResumeAll+0xc4>
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	605a      	str	r2, [r3, #4]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2200      	movs	r2, #0
 800351c:	615a      	str	r2, [r3, #20]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	1e5a      	subs	r2, r3, #1
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	4618      	mov	r0, r3
 800352c:	f003 fe86 	bl	800723c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	2201      	movs	r2, #1
 8003536:	409a      	lsls	r2, r3
 8003538:	4b40      	ldr	r3, [pc, #256]	; (800363c <xTaskResumeAll+0x1e8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4313      	orrs	r3, r2
 800353e:	4a3f      	ldr	r2, [pc, #252]	; (800363c <xTaskResumeAll+0x1e8>)
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003546:	493e      	ldr	r1, [pc, #248]	; (8003640 <xTaskResumeAll+0x1ec>)
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	3304      	adds	r3, #4
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	609a      	str	r2, [r3, #8]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	3204      	adds	r2, #4
 800356e:	605a      	str	r2, [r3, #4]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	1d1a      	adds	r2, r3, #4
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4a2e      	ldr	r2, [pc, #184]	; (8003640 <xTaskResumeAll+0x1ec>)
 8003586:	441a      	add	r2, r3
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	615a      	str	r2, [r3, #20]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	492b      	ldr	r1, [pc, #172]	; (8003640 <xTaskResumeAll+0x1ec>)
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	1c59      	adds	r1, r3, #1
 80035a0:	4827      	ldr	r0, [pc, #156]	; (8003640 <xTaskResumeAll+0x1ec>)
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4403      	add	r3, r0
 80035ac:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b2:	4b24      	ldr	r3, [pc, #144]	; (8003644 <xTaskResumeAll+0x1f0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d302      	bcc.n	80035c2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80035bc:	4b22      	ldr	r3, [pc, #136]	; (8003648 <xTaskResumeAll+0x1f4>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035c2:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <xTaskResumeAll+0x1e4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f47f af6c 	bne.w	80034a4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80035d2:	f000 fc4b 	bl	8003e6c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035d6:	4b1d      	ldr	r3, [pc, #116]	; (800364c <xTaskResumeAll+0x1f8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d010      	beq.n	8003604 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80035e2:	f000 f859 	bl	8003698 <xTaskIncrementTick>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80035ec:	4b16      	ldr	r3, [pc, #88]	; (8003648 <xTaskResumeAll+0x1f4>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f1      	bne.n	80035e2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80035fe:	4b13      	ldr	r3, [pc, #76]	; (800364c <xTaskResumeAll+0x1f8>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003604:	4b10      	ldr	r3, [pc, #64]	; (8003648 <xTaskResumeAll+0x1f4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d009      	beq.n	8003620 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800360c:	2301      	movs	r3, #1
 800360e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003610:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <xTaskResumeAll+0x1fc>)
 8003612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003620:	f001 f8c2 	bl	80047a8 <vPortExitCritical>

    return xAlreadyYielded;
 8003624:	69bb      	ldr	r3, [r7, #24]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	2000026c 	.word	0x2000026c
 8003634:	20000244 	.word	0x20000244
 8003638:	20000204 	.word	0x20000204
 800363c:	2000024c 	.word	0x2000024c
 8003640:	20000170 	.word	0x20000170
 8003644:	2000016c 	.word	0x2000016c
 8003648:	20000258 	.word	0x20000258
 800364c:	20000254 	.word	0x20000254
 8003650:	e000ed04 	.word	0xe000ed04

08003654 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <xTaskGetTickCount+0x1c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003660:	687b      	ldr	r3, [r7, #4]
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000248 	.word	0x20000248

08003674 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800367a:	f001 f94f 	bl	800491c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003682:	4b04      	ldr	r3, [pc, #16]	; (8003694 <xTaskGetTickCountFromISR+0x20>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003688:	683b      	ldr	r3, [r7, #0]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000248 	.word	0x20000248

08003698 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036a2:	4b7f      	ldr	r3, [pc, #508]	; (80038a0 <xTaskIncrementTick+0x208>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 80f0 	bne.w	800388c <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036ac:	4b7d      	ldr	r3, [pc, #500]	; (80038a4 <xTaskIncrementTick+0x20c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3301      	adds	r3, #1
 80036b2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80036b4:	4a7b      	ldr	r2, [pc, #492]	; (80038a4 <xTaskIncrementTick+0x20c>)
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d120      	bne.n	8003702 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80036c0:	4b79      	ldr	r3, [pc, #484]	; (80038a8 <xTaskIncrementTick+0x210>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <xTaskIncrementTick+0x48>
        __asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	607b      	str	r3, [r7, #4]
    }
 80036dc:	bf00      	nop
 80036de:	e7fe      	b.n	80036de <xTaskIncrementTick+0x46>
 80036e0:	4b71      	ldr	r3, [pc, #452]	; (80038a8 <xTaskIncrementTick+0x210>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	4b71      	ldr	r3, [pc, #452]	; (80038ac <xTaskIncrementTick+0x214>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a6f      	ldr	r2, [pc, #444]	; (80038a8 <xTaskIncrementTick+0x210>)
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	4a6f      	ldr	r2, [pc, #444]	; (80038ac <xTaskIncrementTick+0x214>)
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	4b6e      	ldr	r3, [pc, #440]	; (80038b0 <xTaskIncrementTick+0x218>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3301      	adds	r3, #1
 80036fa:	4a6d      	ldr	r2, [pc, #436]	; (80038b0 <xTaskIncrementTick+0x218>)
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	f000 fbb5 	bl	8003e6c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003702:	4b6c      	ldr	r3, [pc, #432]	; (80038b4 <xTaskIncrementTick+0x21c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6a3a      	ldr	r2, [r7, #32]
 8003708:	429a      	cmp	r2, r3
 800370a:	f0c0 80aa 	bcc.w	8003862 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800370e:	4b66      	ldr	r3, [pc, #408]	; (80038a8 <xTaskIncrementTick+0x210>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d104      	bne.n	8003722 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003718:	4b66      	ldr	r3, [pc, #408]	; (80038b4 <xTaskIncrementTick+0x21c>)
 800371a:	f04f 32ff 	mov.w	r2, #4294967295
 800371e:	601a      	str	r2, [r3, #0]
                    break;
 8003720:	e09f      	b.n	8003862 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003722:	4b61      	ldr	r3, [pc, #388]	; (80038a8 <xTaskIncrementTick+0x210>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003732:	6a3a      	ldr	r2, [r7, #32]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	429a      	cmp	r2, r3
 8003738:	d203      	bcs.n	8003742 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800373a:	4a5e      	ldr	r2, [pc, #376]	; (80038b4 <xTaskIncrementTick+0x21c>)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003740:	e08f      	b.n	8003862 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	68d2      	ldr	r2, [r2, #12]
 8003750:	609a      	str	r2, [r3, #8]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	6892      	ldr	r2, [r2, #8]
 800375a:	605a      	str	r2, [r3, #4]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	3304      	adds	r3, #4
 8003764:	429a      	cmp	r2, r3
 8003766:	d103      	bne.n	8003770 <xTaskIncrementTick+0xd8>
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	2200      	movs	r2, #0
 8003774:	615a      	str	r2, [r3, #20]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	1e5a      	subs	r2, r3, #1
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01e      	beq.n	80037c6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	6a12      	ldr	r2, [r2, #32]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	69d2      	ldr	r2, [r2, #28]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	3318      	adds	r3, #24
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d103      	bne.n	80037b6 <xTaskIncrementTick+0x11e>
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	6a1a      	ldr	r2, [r3, #32]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	2200      	movs	r2, #0
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	1e5a      	subs	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 fd37 	bl	800723c <SEGGER_SYSVIEW_OnTaskStartReady>
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	2201      	movs	r2, #1
 80037d4:	409a      	lsls	r2, r3
 80037d6:	4b38      	ldr	r3, [pc, #224]	; (80038b8 <xTaskIncrementTick+0x220>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4313      	orrs	r3, r2
 80037dc:	4a36      	ldr	r2, [pc, #216]	; (80038b8 <xTaskIncrementTick+0x220>)
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e4:	4935      	ldr	r1, [pc, #212]	; (80038bc <xTaskIncrementTick+0x224>)
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	3304      	adds	r3, #4
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	60da      	str	r2, [r3, #12]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	3204      	adds	r2, #4
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	1d1a      	adds	r2, r3, #4
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	609a      	str	r2, [r3, #8]
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4a26      	ldr	r2, [pc, #152]	; (80038bc <xTaskIncrementTick+0x224>)
 8003824:	441a      	add	r2, r3
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	615a      	str	r2, [r3, #20]
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382e:	4923      	ldr	r1, [pc, #140]	; (80038bc <xTaskIncrementTick+0x224>)
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	1c59      	adds	r1, r3, #1
 800383e:	481f      	ldr	r0, [pc, #124]	; (80038bc <xTaskIncrementTick+0x224>)
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4403      	add	r3, r0
 800384a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <xTaskIncrementTick+0x228>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	429a      	cmp	r2, r3
 8003858:	f67f af59 	bls.w	800370e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800385c:	2301      	movs	r3, #1
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003860:	e755      	b.n	800370e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003862:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <xTaskIncrementTick+0x228>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003868:	4914      	ldr	r1, [pc, #80]	; (80038bc <xTaskIncrementTick+0x224>)
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d901      	bls.n	800387e <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800387a:	2301      	movs	r3, #1
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800387e:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <xTaskIncrementTick+0x22c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003886:	2301      	movs	r3, #1
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
 800388a:	e004      	b.n	8003896 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800388c:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <xTaskIncrementTick+0x230>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3301      	adds	r3, #1
 8003892:	4a0d      	ldr	r2, [pc, #52]	; (80038c8 <xTaskIncrementTick+0x230>)
 8003894:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003898:	4618      	mov	r0, r3
 800389a:	3728      	adds	r7, #40	; 0x28
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	2000026c 	.word	0x2000026c
 80038a4:	20000248 	.word	0x20000248
 80038a8:	200001fc 	.word	0x200001fc
 80038ac:	20000200 	.word	0x20000200
 80038b0:	2000025c 	.word	0x2000025c
 80038b4:	20000264 	.word	0x20000264
 80038b8:	2000024c 	.word	0x2000024c
 80038bc:	20000170 	.word	0x20000170
 80038c0:	2000016c 	.word	0x2000016c
 80038c4:	20000258 	.word	0x20000258
 80038c8:	20000254 	.word	0x20000254

080038cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038d2:	4b2f      	ldr	r3, [pc, #188]	; (8003990 <vTaskSwitchContext+0xc4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80038da:	4b2e      	ldr	r3, [pc, #184]	; (8003994 <vTaskSwitchContext+0xc8>)
 80038dc:	2201      	movs	r2, #1
 80038de:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80038e0:	e052      	b.n	8003988 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 80038e2:	4b2c      	ldr	r3, [pc, #176]	; (8003994 <vTaskSwitchContext+0xc8>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038e8:	4b2b      	ldr	r3, [pc, #172]	; (8003998 <vTaskSwitchContext+0xcc>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	fab3 f383 	clz	r3, r3
 80038f4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80038f6:	7afb      	ldrb	r3, [r7, #11]
 80038f8:	f1c3 031f 	rsb	r3, r3, #31
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	4927      	ldr	r1, [pc, #156]	; (800399c <vTaskSwitchContext+0xd0>)
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	607b      	str	r3, [r7, #4]
    }
 8003924:	bf00      	nop
 8003926:	e7fe      	b.n	8003926 <vTaskSwitchContext+0x5a>
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4a1a      	ldr	r2, [pc, #104]	; (800399c <vTaskSwitchContext+0xd0>)
 8003934:	4413      	add	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	3308      	adds	r3, #8
 800394a:	429a      	cmp	r2, r3
 800394c:	d104      	bne.n	8003958 <vTaskSwitchContext+0x8c>
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	4a10      	ldr	r2, [pc, #64]	; (80039a0 <vTaskSwitchContext+0xd4>)
 8003960:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003962:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <vTaskSwitchContext+0xd4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3334      	adds	r3, #52	; 0x34
 8003968:	2205      	movs	r2, #5
 800396a:	490e      	ldr	r1, [pc, #56]	; (80039a4 <vTaskSwitchContext+0xd8>)
 800396c:	4618      	mov	r0, r3
 800396e:	f003 fe5f 	bl	8007630 <memcmp>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <vTaskSwitchContext+0xb8>
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <vTaskSwitchContext+0xd4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f003 fc1b 	bl	80071b8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003982:	e001      	b.n	8003988 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8003984:	f003 fbba 	bl	80070fc <SEGGER_SYSVIEW_OnIdle>
}
 8003988:	bf00      	nop
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	2000026c 	.word	0x2000026c
 8003994:	20000258 	.word	0x20000258
 8003998:	2000024c 	.word	0x2000024c
 800399c:	20000170 	.word	0x20000170
 80039a0:	2000016c 	.word	0x2000016c
 80039a4:	08007fe0 	.word	0x08007fe0

080039a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	60fb      	str	r3, [r7, #12]
    }
 80039ca:	bf00      	nop
 80039cc:	e7fe      	b.n	80039cc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039ce:	4b07      	ldr	r3, [pc, #28]	; (80039ec <vTaskPlaceOnEventList+0x44>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3318      	adds	r3, #24
 80039d4:	4619      	mov	r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fe ffad 	bl	8002936 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039dc:	2101      	movs	r1, #1
 80039de:	6838      	ldr	r0, [r7, #0]
 80039e0:	f000 fa7e 	bl	8003ee0 <prvAddCurrentTaskToDelayedList>
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	2000016c 	.word	0x2000016c

080039f0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	613b      	str	r3, [r7, #16]
    }
 8003a14:	bf00      	nop
 8003a16:	e7fe      	b.n	8003a16 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	61da      	str	r2, [r3, #28]
 8003a26:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	6892      	ldr	r2, [r2, #8]
 8003a2e:	621a      	str	r2, [r3, #32]
 8003a30:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	3218      	adds	r2, #24
 8003a3a:	605a      	str	r2, [r3, #4]
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	; (8003a7c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f103 0218 	add.w	r2, r3, #24
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	609a      	str	r2, [r3, #8]
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003a60:	f04f 33ff 	mov.w	r3, #4294967295
 8003a64:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003a66:	2024      	movs	r0, #36	; 0x24
 8003a68:	f002 fe48 	bl	80066fc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	68b8      	ldr	r0, [r7, #8]
 8003a70:	f000 fa36 	bl	8003ee0 <prvAddCurrentTaskToDelayedList>
    }
 8003a74:	bf00      	nop
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	2000016c 	.word	0x2000016c

08003a80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	; 0x28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10a      	bne.n	8003aac <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9a:	f383 8811 	msr	BASEPRI, r3
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	60fb      	str	r3, [r7, #12]
    }
 8003aa8:	bf00      	nop
 8003aaa:	e7fe      	b.n	8003aaa <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	6a3a      	ldr	r2, [r7, #32]
 8003ab8:	6a12      	ldr	r2, [r2, #32]
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	6a3a      	ldr	r2, [r7, #32]
 8003ac2:	69d2      	ldr	r2, [r2, #28]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	3318      	adds	r3, #24
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d103      	bne.n	8003ada <xTaskRemoveFromEventList+0x5a>
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	6a1a      	ldr	r2, [r3, #32]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	2200      	movs	r2, #0
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	1e5a      	subs	r2, r3, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aea:	4b4b      	ldr	r3, [pc, #300]	; (8003c18 <xTaskRemoveFromEventList+0x198>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d162      	bne.n	8003bb8 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	6a3a      	ldr	r2, [r7, #32]
 8003afe:	68d2      	ldr	r2, [r2, #12]
 8003b00:	609a      	str	r2, [r3, #8]
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	6a3a      	ldr	r2, [r7, #32]
 8003b08:	6892      	ldr	r2, [r2, #8]
 8003b0a:	605a      	str	r2, [r3, #4]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	3304      	adds	r3, #4
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d103      	bne.n	8003b20 <xTaskRemoveFromEventList+0xa0>
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	2200      	movs	r2, #0
 8003b24:	615a      	str	r2, [r3, #20]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	1e5a      	subs	r2, r3, #1
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f003 fb82 	bl	800723c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <xTaskRemoveFromEventList+0x19c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	4a35      	ldr	r2, [pc, #212]	; (8003c1c <xTaskRemoveFromEventList+0x19c>)
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4e:	4934      	ldr	r1, [pc, #208]	; (8003c20 <xTaskRemoveFromEventList+0x1a0>)
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	60da      	str	r2, [r3, #12]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	6a3a      	ldr	r2, [r7, #32]
 8003b74:	3204      	adds	r2, #4
 8003b76:	605a      	str	r2, [r3, #4]
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	1d1a      	adds	r2, r3, #4
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4a24      	ldr	r2, [pc, #144]	; (8003c20 <xTaskRemoveFromEventList+0x1a0>)
 8003b8e:	441a      	add	r2, r3
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	615a      	str	r2, [r3, #20]
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	4921      	ldr	r1, [pc, #132]	; (8003c20 <xTaskRemoveFromEventList+0x1a0>)
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	1c59      	adds	r1, r3, #1
 8003ba8:	481d      	ldr	r0, [pc, #116]	; (8003c20 <xTaskRemoveFromEventList+0x1a0>)
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4403      	add	r3, r0
 8003bb4:	6019      	str	r1, [r3, #0]
 8003bb6:	e01b      	b.n	8003bf0 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bb8:	4b1a      	ldr	r3, [pc, #104]	; (8003c24 <xTaskRemoveFromEventList+0x1a4>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	61da      	str	r2, [r3, #28]
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	621a      	str	r2, [r3, #32]
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	6a3a      	ldr	r2, [r7, #32]
 8003bd2:	3218      	adds	r2, #24
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	f103 0218 	add.w	r2, r3, #24
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	4a10      	ldr	r2, [pc, #64]	; (8003c24 <xTaskRemoveFromEventList+0x1a4>)
 8003be4:	629a      	str	r2, [r3, #40]	; 0x28
 8003be6:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <xTaskRemoveFromEventList+0x1a4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3301      	adds	r3, #1
 8003bec:	4a0d      	ldr	r2, [pc, #52]	; (8003c24 <xTaskRemoveFromEventList+0x1a4>)
 8003bee:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <xTaskRemoveFromEventList+0x1a8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d905      	bls.n	8003c0a <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <xTaskRemoveFromEventList+0x1ac>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e001      	b.n	8003c0e <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3728      	adds	r7, #40	; 0x28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	2000026c 	.word	0x2000026c
 8003c1c:	2000024c 	.word	0x2000024c
 8003c20:	20000170 	.word	0x20000170
 8003c24:	20000204 	.word	0x20000204
 8003c28:	2000016c 	.word	0x2000016c
 8003c2c:	20000258 	.word	0x20000258

08003c30 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c38:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <vTaskInternalSetTimeOutState+0x24>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <vTaskInternalSetTimeOutState+0x28>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	605a      	str	r2, [r3, #4]
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	2000025c 	.word	0x2000025c
 8003c58:	20000248 	.word	0x20000248

08003c5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10a      	bne.n	8003c82 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	613b      	str	r3, [r7, #16]
    }
 8003c7e:	bf00      	nop
 8003c80:	e7fe      	b.n	8003c80 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	60fb      	str	r3, [r7, #12]
    }
 8003c9a:	bf00      	nop
 8003c9c:	e7fe      	b.n	8003c9c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003c9e:	f000 fd53 	bl	8004748 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003ca2:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <xTaskCheckForTimeOut+0xc4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cba:	d102      	bne.n	8003cc2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	e026      	b.n	8003d10 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4b17      	ldr	r3, [pc, #92]	; (8003d24 <xTaskCheckForTimeOut+0xc8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d00a      	beq.n	8003ce4 <xTaskCheckForTimeOut+0x88>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d305      	bcc.n	8003ce4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e015      	b.n	8003d10 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d20b      	bcs.n	8003d06 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	1ad2      	subs	r2, r2, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff ff98 	bl	8003c30 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	e004      	b.n	8003d10 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003d10:	f000 fd4a 	bl	80047a8 <vPortExitCritical>

    return xReturn;
 8003d14:	69fb      	ldr	r3, [r7, #28]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3720      	adds	r7, #32
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000248 	.word	0x20000248
 8003d24:	2000025c 	.word	0x2000025c

08003d28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <vTaskMissedYield+0x14>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
}
 8003d32:	bf00      	nop
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	20000258 	.word	0x20000258

08003d40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003d48:	f000 f852 	bl	8003df0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d4c:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <prvIdleTask+0x28>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d9f9      	bls.n	8003d48 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <prvIdleTask+0x2c>)
 8003d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003d64:	e7f0      	b.n	8003d48 <prvIdleTask+0x8>
 8003d66:	bf00      	nop
 8003d68:	20000170 	.word	0x20000170
 8003d6c:	e000ed04 	.word	0xe000ed04

08003d70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d76:	2300      	movs	r3, #0
 8003d78:	607b      	str	r3, [r7, #4]
 8003d7a:	e00c      	b.n	8003d96 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4a12      	ldr	r2, [pc, #72]	; (8003dd0 <prvInitialiseTaskLists+0x60>)
 8003d88:	4413      	add	r3, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fe fda6 	bl	80028dc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3301      	adds	r3, #1
 8003d94:	607b      	str	r3, [r7, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d9ef      	bls.n	8003d7c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003d9c:	480d      	ldr	r0, [pc, #52]	; (8003dd4 <prvInitialiseTaskLists+0x64>)
 8003d9e:	f7fe fd9d 	bl	80028dc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003da2:	480d      	ldr	r0, [pc, #52]	; (8003dd8 <prvInitialiseTaskLists+0x68>)
 8003da4:	f7fe fd9a 	bl	80028dc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003da8:	480c      	ldr	r0, [pc, #48]	; (8003ddc <prvInitialiseTaskLists+0x6c>)
 8003daa:	f7fe fd97 	bl	80028dc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003dae:	480c      	ldr	r0, [pc, #48]	; (8003de0 <prvInitialiseTaskLists+0x70>)
 8003db0:	f7fe fd94 	bl	80028dc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003db4:	480b      	ldr	r0, [pc, #44]	; (8003de4 <prvInitialiseTaskLists+0x74>)
 8003db6:	f7fe fd91 	bl	80028dc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003dba:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <prvInitialiseTaskLists+0x78>)
 8003dbc:	4a05      	ldr	r2, [pc, #20]	; (8003dd4 <prvInitialiseTaskLists+0x64>)
 8003dbe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <prvInitialiseTaskLists+0x7c>)
 8003dc2:	4a05      	ldr	r2, [pc, #20]	; (8003dd8 <prvInitialiseTaskLists+0x68>)
 8003dc4:	601a      	str	r2, [r3, #0]
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000170 	.word	0x20000170
 8003dd4:	200001d4 	.word	0x200001d4
 8003dd8:	200001e8 	.word	0x200001e8
 8003ddc:	20000204 	.word	0x20000204
 8003de0:	20000218 	.word	0x20000218
 8003de4:	20000230 	.word	0x20000230
 8003de8:	200001fc 	.word	0x200001fc
 8003dec:	20000200 	.word	0x20000200

08003df0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003df6:	e019      	b.n	8003e2c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003df8:	f000 fca6 	bl	8004748 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dfc:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <prvCheckTasksWaitingTermination+0x50>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fe fdcd 	bl	80029a8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <prvCheckTasksWaitingTermination+0x54>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	4a0b      	ldr	r2, [pc, #44]	; (8003e44 <prvCheckTasksWaitingTermination+0x54>)
 8003e16:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <prvCheckTasksWaitingTermination+0x58>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <prvCheckTasksWaitingTermination+0x58>)
 8003e20:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003e22:	f000 fcc1 	bl	80047a8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f810 	bl	8003e4c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <prvCheckTasksWaitingTermination+0x58>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e1      	bne.n	8003df8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000218 	.word	0x20000218
 8003e44:	20000244 	.word	0x20000244
 8003e48:	2000022c 	.word	0x2000022c

08003e4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fe59 	bl	8004b10 <vPortFree>
            vPortFree( pxTCB );
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fe56 	bl	8004b10 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003e64:	bf00      	nop
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <prvResetNextTaskUnblockTime+0x30>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d104      	bne.n	8003e84 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003e7a:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <prvResetNextTaskUnblockTime+0x34>)
 8003e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e80:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003e82:	e005      	b.n	8003e90 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <prvResetNextTaskUnblockTime+0x30>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <prvResetNextTaskUnblockTime+0x34>)
 8003e8e:	6013      	str	r3, [r2, #0]
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	200001fc 	.word	0x200001fc
 8003ea0:	20000264 	.word	0x20000264

08003ea4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <xTaskGetSchedulerState+0x34>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	e008      	b.n	8003eca <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <xTaskGetSchedulerState+0x38>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d102      	bne.n	8003ec6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	607b      	str	r3, [r7, #4]
 8003ec4:	e001      	b.n	8003eca <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003eca:	687b      	ldr	r3, [r7, #4]
    }
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	20000250 	.word	0x20000250
 8003edc:	2000026c 	.word	0x2000026c

08003ee0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003eea:	4b36      	ldr	r3, [pc, #216]	; (8003fc4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ef0:	4b35      	ldr	r3, [pc, #212]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fd56 	bl	80029a8 <uxListRemove>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f02:	4b31      	ldr	r3, [pc, #196]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	2201      	movs	r2, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	4b2e      	ldr	r3, [pc, #184]	; (8003fcc <prvAddCurrentTaskToDelayedList+0xec>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4013      	ands	r3, r2
 8003f16:	4a2d      	ldr	r2, [pc, #180]	; (8003fcc <prvAddCurrentTaskToDelayedList+0xec>)
 8003f18:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d124      	bne.n	8003f6c <prvAddCurrentTaskToDelayedList+0x8c>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d021      	beq.n	8003f6c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f28:	4b29      	ldr	r3, [pc, #164]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	609a      	str	r2, [r3, #8]
 8003f36:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	6892      	ldr	r2, [r2, #8]
 8003f3e:	60da      	str	r2, [r3, #12]
 8003f40:	4b21      	ldr	r3, [pc, #132]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	3204      	adds	r2, #4
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	4b1e      	ldr	r3, [pc, #120]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	1d1a      	adds	r2, r3, #4
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	609a      	str	r2, [r3, #8]
 8003f56:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f5c:	615a      	str	r2, [r3, #20]
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3301      	adds	r3, #1
 8003f64:	4a1a      	ldr	r2, [pc, #104]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003f6a:	e026      	b.n	8003fba <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4413      	add	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f74:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d209      	bcs.n	8003f98 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f84:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4610      	mov	r0, r2
 8003f92:	f7fe fcd0 	bl	8002936 <vListInsert>
}
 8003f96:	e010      	b.n	8003fba <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	f7fe fcc6 	bl	8002936 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003faa:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <prvAddCurrentTaskToDelayedList+0xfc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d202      	bcs.n	8003fba <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003fb4:	4a09      	ldr	r2, [pc, #36]	; (8003fdc <prvAddCurrentTaskToDelayedList+0xfc>)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6013      	str	r3, [r2, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000248 	.word	0x20000248
 8003fc8:	2000016c 	.word	0x2000016c
 8003fcc:	2000024c 	.word	0x2000024c
 8003fd0:	20000230 	.word	0x20000230
 8003fd4:	20000200 	.word	0x20000200
 8003fd8:	200001fc 	.word	0x200001fc
 8003fdc:	20000264 	.word	0x20000264

08003fe0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003fea:	f000 fa47 	bl	800447c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <xTimerCreateTimerTask+0x54>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00b      	beq.n	800400e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003ff6:	4b10      	ldr	r3, [pc, #64]	; (8004038 <xTimerCreateTimerTask+0x58>)
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	2300      	movs	r3, #0
 8004000:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004004:	490d      	ldr	r1, [pc, #52]	; (800403c <xTimerCreateTimerTask+0x5c>)
 8004006:	480e      	ldr	r0, [pc, #56]	; (8004040 <xTimerCreateTimerTask+0x60>)
 8004008:	f7ff f828 	bl	800305c <xTaskCreate>
 800400c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	603b      	str	r3, [r7, #0]
    }
 8004026:	bf00      	nop
 8004028:	e7fe      	b.n	8004028 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800402a:	687b      	ldr	r3, [r7, #4]
    }
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	200002a0 	.word	0x200002a0
 8004038:	200002a4 	.word	0x200002a4
 800403c:	08007fe8 	.word	0x08007fe8
 8004040:	080040e9 	.word	0x080040e9

08004044 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004050:	e008      	b.n	8004064 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	4413      	add	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	18d1      	adds	r1, r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f8dd 	bl	8004230 <prvInsertTimerInActiveList>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1ea      	bne.n	8004052 <prvReloadTimer+0xe>
        }
    }
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004092:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <prvProcessExpiredTimer+0x5c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3304      	adds	r3, #4
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fe fc81 	bl	80029a8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7ff ffc3 	bl	8004044 <prvReloadTimer>
 80040be:	e008      	b.n	80040d2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	4798      	blx	r3
    }
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000298 	.word	0x20000298

080040e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040f0:	f107 0308 	add.w	r3, r7, #8
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 f857 	bl	80041a8 <prvGetNextExpireTime>
 80040fa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4619      	mov	r1, r3
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f803 	bl	800410c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004106:	f000 f8d5 	bl	80042b4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800410a:	e7f1      	b.n	80040f0 <prvTimerTask+0x8>

0800410c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004116:	f7ff f98f 	bl	8003438 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800411a:	f107 0308 	add.w	r3, r7, #8
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f866 	bl	80041f0 <prvSampleTimeNow>
 8004124:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d130      	bne.n	800418e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <prvProcessTimerOrBlockTask+0x3c>
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	429a      	cmp	r2, r3
 8004138:	d806      	bhi.n	8004148 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800413a:	f7ff f98b 	bl	8003454 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ffa1 	bl	8004088 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004146:	e024      	b.n	8004192 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <prvProcessTimerOrBlockTask+0x90>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <prvProcessTimerOrBlockTask+0x50>
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <prvProcessTimerOrBlockTask+0x52>
 800415c:	2300      	movs	r3, #0
 800415e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <prvProcessTimerOrBlockTask+0x94>)
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	4619      	mov	r1, r3
 800416e:	f7fe ff41 	bl	8002ff4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004172:	f7ff f96f 	bl	8003454 <xTaskResumeAll>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <prvProcessTimerOrBlockTask+0x98>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	f3bf 8f6f 	isb	sy
    }
 800418c:	e001      	b.n	8004192 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800418e:	f7ff f961 	bl	8003454 <xTaskResumeAll>
    }
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	2000029c 	.word	0x2000029c
 80041a0:	200002a0 	.word	0x200002a0
 80041a4:	e000ed04 	.word	0xe000ed04

080041a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041b0:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <prvGetNextExpireTime+0x44>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <prvGetNextExpireTime+0x16>
 80041ba:	2201      	movs	r2, #1
 80041bc:	e000      	b.n	80041c0 <prvGetNextExpireTime+0x18>
 80041be:	2200      	movs	r2, #0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041cc:	4b07      	ldr	r3, [pc, #28]	; (80041ec <prvGetNextExpireTime+0x44>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	e001      	b.n	80041dc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80041dc:	68fb      	ldr	r3, [r7, #12]
    }
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	20000298 	.word	0x20000298

080041f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80041f8:	f7ff fa2c 	bl	8003654 <xTaskGetTickCount>
 80041fc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <prvSampleTimeNow+0x3c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	429a      	cmp	r2, r3
 8004206:	d205      	bcs.n	8004214 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004208:	f000 f912 	bl	8004430 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e002      	b.n	800421a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800421a:	4a04      	ldr	r2, [pc, #16]	; (800422c <prvSampleTimeNow+0x3c>)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004220:	68fb      	ldr	r3, [r7, #12]
    }
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	200002a8 	.word	0x200002a8

08004230 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d812      	bhi.n	800427c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	1ad2      	subs	r2, r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004264:	2301      	movs	r3, #1
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	e01b      	b.n	80042a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <prvInsertTimerInActiveList+0x7c>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3304      	adds	r3, #4
 8004272:	4619      	mov	r1, r3
 8004274:	4610      	mov	r0, r2
 8004276:	f7fe fb5e 	bl	8002936 <vListInsert>
 800427a:	e012      	b.n	80042a2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d206      	bcs.n	8004292 <prvInsertTimerInActiveList+0x62>
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d302      	bcc.n	8004292 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800428c:	2301      	movs	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e007      	b.n	80042a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <prvInsertTimerInActiveList+0x80>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3304      	adds	r3, #4
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f7fe fb4a 	bl	8002936 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80042a2:	697b      	ldr	r3, [r7, #20]
    }
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	2000029c 	.word	0x2000029c
 80042b0:	20000298 	.word	0x20000298

080042b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042ba:	e0a6      	b.n	800440a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f2c0 80a2 	blt.w	8004408 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fe fb67 	bl	80029a8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff87 	bl	80041f0 <prvSampleTimeNow>
 80042e2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	f200 808e 	bhi.w	800440a <prvProcessReceivedCommands+0x156>
 80042ee:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <prvProcessReceivedCommands+0x40>)
 80042f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f4:	08004319 	.word	0x08004319
 80042f8:	08004319 	.word	0x08004319
 80042fc:	08004381 	.word	0x08004381
 8004300:	08004395 	.word	0x08004395
 8004304:	080043df 	.word	0x080043df
 8004308:	08004319 	.word	0x08004319
 800430c:	08004319 	.word	0x08004319
 8004310:	08004381 	.word	0x08004381
 8004314:	08004395 	.word	0x08004395
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	18d1      	adds	r1, r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	69f8      	ldr	r0, [r7, #28]
 8004338:	f7ff ff7a 	bl	8004230 <prvInsertTimerInActiveList>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d063      	beq.n	800440a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	4413      	add	r3, r2
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4619      	mov	r1, r3
 800435c:	69f8      	ldr	r0, [r7, #28]
 800435e:	f7ff fe71 	bl	8004044 <prvReloadTimer>
 8004362:	e008      	b.n	8004376 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	b2da      	uxtb	r2, r3
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	69f8      	ldr	r0, [r7, #28]
 800437c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800437e:	e044      	b.n	800440a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004386:	f023 0301 	bic.w	r3, r3, #1
 800438a:	b2da      	uxtb	r2, r3
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004392:	e03a      	b.n	800440a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <prvProcessReceivedCommands+0x116>
        __asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	617b      	str	r3, [r7, #20]
    }
 80043c6:	bf00      	nop
 80043c8:	e7fe      	b.n	80043c8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	18d1      	adds	r1, r2, r3
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	69f8      	ldr	r0, [r7, #28]
 80043d8:	f7ff ff2a 	bl	8004230 <prvInsertTimerInActiveList>
                        break;
 80043dc:	e015      	b.n	800440a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d103      	bne.n	80043f4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80043ec:	69f8      	ldr	r0, [r7, #28]
 80043ee:	f000 fb8f 	bl	8004b10 <vPortFree>
 80043f2:	e00a      	b.n	800440a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004406:	e000      	b.n	800440a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004408:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800440a:	4b08      	ldr	r3, [pc, #32]	; (800442c <prvProcessReceivedCommands+0x178>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f107 0108 	add.w	r1, r7, #8
 8004412:	2200      	movs	r2, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f7fe fbf9 	bl	8002c0c <xQueueReceive>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	f47f af4d 	bne.w	80042bc <prvProcessReceivedCommands+0x8>
        }
    }
 8004422:	bf00      	nop
 8004424:	bf00      	nop
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	200002a0 	.word	0x200002a0

08004430 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004436:	e009      	b.n	800444c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004438:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <prvSwitchTimerLists+0x44>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004442:	f04f 31ff 	mov.w	r1, #4294967295
 8004446:	6838      	ldr	r0, [r7, #0]
 8004448:	f7ff fe1e 	bl	8004088 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800444c:	4b09      	ldr	r3, [pc, #36]	; (8004474 <prvSwitchTimerLists+0x44>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004456:	4b07      	ldr	r3, [pc, #28]	; (8004474 <prvSwitchTimerLists+0x44>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <prvSwitchTimerLists+0x48>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a04      	ldr	r2, [pc, #16]	; (8004474 <prvSwitchTimerLists+0x44>)
 8004462:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <prvSwitchTimerLists+0x48>)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6013      	str	r3, [r2, #0]
    }
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000298 	.word	0x20000298
 8004478:	2000029c 	.word	0x2000029c

0800447c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004480:	f000 f962 	bl	8004748 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004484:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <prvCheckForValidListAndQueue+0x54>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d11d      	bne.n	80044c8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800448c:	4811      	ldr	r0, [pc, #68]	; (80044d4 <prvCheckForValidListAndQueue+0x58>)
 800448e:	f7fe fa25 	bl	80028dc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004492:	4811      	ldr	r0, [pc, #68]	; (80044d8 <prvCheckForValidListAndQueue+0x5c>)
 8004494:	f7fe fa22 	bl	80028dc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004498:	4b10      	ldr	r3, [pc, #64]	; (80044dc <prvCheckForValidListAndQueue+0x60>)
 800449a:	4a0e      	ldr	r2, [pc, #56]	; (80044d4 <prvCheckForValidListAndQueue+0x58>)
 800449c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800449e:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <prvCheckForValidListAndQueue+0x64>)
 80044a0:	4a0d      	ldr	r2, [pc, #52]	; (80044d8 <prvCheckForValidListAndQueue+0x5c>)
 80044a2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80044a4:	2200      	movs	r2, #0
 80044a6:	210c      	movs	r1, #12
 80044a8:	200a      	movs	r0, #10
 80044aa:	f7fe fb37 	bl	8002b1c <xQueueGenericCreate>
 80044ae:	4603      	mov	r3, r0
 80044b0:	4a07      	ldr	r2, [pc, #28]	; (80044d0 <prvCheckForValidListAndQueue+0x54>)
 80044b2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <prvCheckForValidListAndQueue+0x54>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044bc:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <prvCheckForValidListAndQueue+0x54>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4908      	ldr	r1, [pc, #32]	; (80044e4 <prvCheckForValidListAndQueue+0x68>)
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fd40 	bl	8002f48 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80044c8:	f000 f96e 	bl	80047a8 <vPortExitCritical>
    }
 80044cc:	bf00      	nop
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	200002a0 	.word	0x200002a0
 80044d4:	20000270 	.word	0x20000270
 80044d8:	20000284 	.word	0x20000284
 80044dc:	20000298 	.word	0x20000298
 80044e0:	2000029c 	.word	0x2000029c
 80044e4:	08007ff0 	.word	0x08007ff0

080044e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3b04      	subs	r3, #4
 80044f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004500:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3b04      	subs	r3, #4
 8004506:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f023 0201 	bic.w	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3b04      	subs	r3, #4
 8004516:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004518:	4a0c      	ldr	r2, [pc, #48]	; (800454c <pxPortInitialiseStack+0x64>)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3b14      	subs	r3, #20
 8004522:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3b04      	subs	r3, #4
 800452e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f06f 0202 	mvn.w	r2, #2
 8004536:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	3b20      	subs	r3, #32
 800453c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800453e:	68fb      	ldr	r3, [r7, #12]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	08004551 	.word	0x08004551

08004550 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <prvTaskExitError+0x54>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004562:	d00a      	beq.n	800457a <prvTaskExitError+0x2a>
        __asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	60fb      	str	r3, [r7, #12]
    }
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <prvTaskExitError+0x28>
        __asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	60bb      	str	r3, [r7, #8]
    }
 800458c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800458e:	bf00      	nop
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0fc      	beq.n	8004590 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	20000010 	.word	0x20000010
	...

080045b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80045b0:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <pxCurrentTCBConst2>)
 80045b2:	6819      	ldr	r1, [r3, #0]
 80045b4:	6808      	ldr	r0, [r1, #0]
 80045b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ba:	f380 8809 	msr	PSP, r0
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f04f 0000 	mov.w	r0, #0
 80045c6:	f380 8811 	msr	BASEPRI, r0
 80045ca:	4770      	bx	lr
 80045cc:	f3af 8000 	nop.w

080045d0 <pxCurrentTCBConst2>:
 80045d0:	2000016c 	.word	0x2000016c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop

080045d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80045d8:	4808      	ldr	r0, [pc, #32]	; (80045fc <prvPortStartFirstTask+0x24>)
 80045da:	6800      	ldr	r0, [r0, #0]
 80045dc:	6800      	ldr	r0, [r0, #0]
 80045de:	f380 8808 	msr	MSP, r0
 80045e2:	f04f 0000 	mov.w	r0, #0
 80045e6:	f380 8814 	msr	CONTROL, r0
 80045ea:	b662      	cpsie	i
 80045ec:	b661      	cpsie	f
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	df00      	svc	0
 80045f8:	bf00      	nop
 80045fa:	0000      	.short	0x0000
 80045fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop

08004604 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800460a:	4b46      	ldr	r3, [pc, #280]	; (8004724 <xPortStartScheduler+0x120>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a46      	ldr	r2, [pc, #280]	; (8004728 <xPortStartScheduler+0x124>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d10a      	bne.n	800462a <xPortStartScheduler+0x26>
        __asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	613b      	str	r3, [r7, #16]
    }
 8004626:	bf00      	nop
 8004628:	e7fe      	b.n	8004628 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800462a:	4b3e      	ldr	r3, [pc, #248]	; (8004724 <xPortStartScheduler+0x120>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a3f      	ldr	r2, [pc, #252]	; (800472c <xPortStartScheduler+0x128>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d10a      	bne.n	800464a <xPortStartScheduler+0x46>
        __asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	60fb      	str	r3, [r7, #12]
    }
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800464a:	4b39      	ldr	r3, [pc, #228]	; (8004730 <xPortStartScheduler+0x12c>)
 800464c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	22ff      	movs	r2, #255	; 0xff
 800465a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800466c:	b2da      	uxtb	r2, r3
 800466e:	4b31      	ldr	r3, [pc, #196]	; (8004734 <xPortStartScheduler+0x130>)
 8004670:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004672:	4b31      	ldr	r3, [pc, #196]	; (8004738 <xPortStartScheduler+0x134>)
 8004674:	2207      	movs	r2, #7
 8004676:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004678:	e009      	b.n	800468e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800467a:	4b2f      	ldr	r3, [pc, #188]	; (8004738 <xPortStartScheduler+0x134>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3b01      	subs	r3, #1
 8004680:	4a2d      	ldr	r2, [pc, #180]	; (8004738 <xPortStartScheduler+0x134>)
 8004682:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	b2db      	uxtb	r3, r3
 800468c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004696:	2b80      	cmp	r3, #128	; 0x80
 8004698:	d0ef      	beq.n	800467a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800469a:	4b27      	ldr	r3, [pc, #156]	; (8004738 <xPortStartScheduler+0x134>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f1c3 0307 	rsb	r3, r3, #7
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d00a      	beq.n	80046bc <xPortStartScheduler+0xb8>
        __asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	60bb      	str	r3, [r7, #8]
    }
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046bc:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <xPortStartScheduler+0x134>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	4a1d      	ldr	r2, [pc, #116]	; (8004738 <xPortStartScheduler+0x134>)
 80046c4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046c6:	4b1c      	ldr	r3, [pc, #112]	; (8004738 <xPortStartScheduler+0x134>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046ce:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <xPortStartScheduler+0x134>)
 80046d0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80046da:	4b18      	ldr	r3, [pc, #96]	; (800473c <xPortStartScheduler+0x138>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a17      	ldr	r2, [pc, #92]	; (800473c <xPortStartScheduler+0x138>)
 80046e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80046e6:	4b15      	ldr	r3, [pc, #84]	; (800473c <xPortStartScheduler+0x138>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a14      	ldr	r2, [pc, #80]	; (800473c <xPortStartScheduler+0x138>)
 80046ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80046f2:	f000 f8e3 	bl	80048bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80046f6:	4b12      	ldr	r3, [pc, #72]	; (8004740 <xPortStartScheduler+0x13c>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80046fc:	f000 f902 	bl	8004904 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004700:	4b10      	ldr	r3, [pc, #64]	; (8004744 <xPortStartScheduler+0x140>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a0f      	ldr	r2, [pc, #60]	; (8004744 <xPortStartScheduler+0x140>)
 8004706:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800470a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800470c:	f7ff ff64 	bl	80045d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004710:	f7ff f8dc 	bl	80038cc <vTaskSwitchContext>
    prvTaskExitError();
 8004714:	f7ff ff1c 	bl	8004550 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	e000ed00 	.word	0xe000ed00
 8004728:	410fc271 	.word	0x410fc271
 800472c:	410fc270 	.word	0x410fc270
 8004730:	e000e400 	.word	0xe000e400
 8004734:	200002ac 	.word	0x200002ac
 8004738:	200002b0 	.word	0x200002b0
 800473c:	e000ed20 	.word	0xe000ed20
 8004740:	20000010 	.word	0x20000010
 8004744:	e000ef34 	.word	0xe000ef34

08004748 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
        __asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	607b      	str	r3, [r7, #4]
    }
 8004760:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004762:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <vPortEnterCritical+0x58>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	4a0d      	ldr	r2, [pc, #52]	; (80047a0 <vPortEnterCritical+0x58>)
 800476a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800476c:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <vPortEnterCritical+0x58>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d10f      	bne.n	8004794 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004774:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <vPortEnterCritical+0x5c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <vPortEnterCritical+0x4c>
        __asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	603b      	str	r3, [r7, #0]
    }
 8004790:	bf00      	nop
 8004792:	e7fe      	b.n	8004792 <vPortEnterCritical+0x4a>
    }
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20000010 	.word	0x20000010
 80047a4:	e000ed04 	.word	0xe000ed04

080047a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80047ae:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <vPortExitCritical+0x50>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <vPortExitCritical+0x24>
        __asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	607b      	str	r3, [r7, #4]
    }
 80047c8:	bf00      	nop
 80047ca:	e7fe      	b.n	80047ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <vPortExitCritical+0x50>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	4a09      	ldr	r2, [pc, #36]	; (80047f8 <vPortExitCritical+0x50>)
 80047d4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <vPortExitCritical+0x50>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <vPortExitCritical+0x42>
 80047de:	2300      	movs	r3, #0
 80047e0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80047e8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000010 	.word	0x20000010
 80047fc:	00000000 	.word	0x00000000

08004800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004800:	f3ef 8009 	mrs	r0, PSP
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <pxCurrentTCBConst>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	f01e 0f10 	tst.w	lr, #16
 8004810:	bf08      	it	eq
 8004812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481a:	6010      	str	r0, [r2, #0]
 800481c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004824:	f380 8811 	msr	BASEPRI, r0
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f7ff f84c 	bl	80038cc <vTaskSwitchContext>
 8004834:	f04f 0000 	mov.w	r0, #0
 8004838:	f380 8811 	msr	BASEPRI, r0
 800483c:	bc09      	pop	{r0, r3}
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	6808      	ldr	r0, [r1, #0]
 8004842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004846:	f01e 0f10 	tst.w	lr, #16
 800484a:	bf08      	it	eq
 800484c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004850:	f380 8809 	msr	PSP, r0
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	f3af 8000 	nop.w

08004860 <pxCurrentTCBConst>:
 8004860:	2000016c 	.word	0x2000016c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop

08004868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
        __asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	607b      	str	r3, [r7, #4]
    }
 8004880:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004882:	f002 fbc1 	bl	8007008 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004886:	f7fe ff07 	bl	8003698 <xTaskIncrementTick>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d006      	beq.n	800489e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004890:	f002 fc18 	bl	80070c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004894:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <SysTick_Handler+0x50>)
 8004896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e001      	b.n	80048a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800489e:	f002 fbf5 	bl	800708c <SEGGER_SYSVIEW_RecordExitISR>
 80048a2:	2300      	movs	r3, #0
 80048a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	f383 8811 	msr	BASEPRI, r3
    }
 80048ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	e000ed04 	.word	0xe000ed04

080048bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <vPortSetupTimerInterrupt+0x34>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <vPortSetupTimerInterrupt+0x38>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048cc:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <vPortSetupTimerInterrupt+0x3c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <vPortSetupTimerInterrupt+0x40>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	099b      	lsrs	r3, r3, #6
 80048d8:	4a09      	ldr	r2, [pc, #36]	; (8004900 <vPortSetupTimerInterrupt+0x44>)
 80048da:	3b01      	subs	r3, #1
 80048dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048de:	4b04      	ldr	r3, [pc, #16]	; (80048f0 <vPortSetupTimerInterrupt+0x34>)
 80048e0:	2207      	movs	r2, #7
 80048e2:	601a      	str	r2, [r3, #0]
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	e000e010 	.word	0xe000e010
 80048f4:	e000e018 	.word	0xe000e018
 80048f8:	20000000 	.word	0x20000000
 80048fc:	10624dd3 	.word	0x10624dd3
 8004900:	e000e014 	.word	0xe000e014

08004904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004914 <vPortEnableVFP+0x10>
 8004908:	6801      	ldr	r1, [r0, #0]
 800490a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800490e:	6001      	str	r1, [r0, #0]
 8004910:	4770      	bx	lr
 8004912:	0000      	.short	0x0000
 8004914:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop

0800491c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004922:	f3ef 8305 	mrs	r3, IPSR
 8004926:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b0f      	cmp	r3, #15
 800492c:	d914      	bls.n	8004958 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800492e:	4a17      	ldr	r2, [pc, #92]	; (800498c <vPortValidateInterruptPriority+0x70>)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004938:	4b15      	ldr	r3, [pc, #84]	; (8004990 <vPortValidateInterruptPriority+0x74>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	7afa      	ldrb	r2, [r7, #11]
 800493e:	429a      	cmp	r2, r3
 8004940:	d20a      	bcs.n	8004958 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	607b      	str	r3, [r7, #4]
    }
 8004954:	bf00      	nop
 8004956:	e7fe      	b.n	8004956 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004958:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <vPortValidateInterruptPriority+0x78>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <vPortValidateInterruptPriority+0x7c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d90a      	bls.n	800497e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	603b      	str	r3, [r7, #0]
    }
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <vPortValidateInterruptPriority+0x60>
    }
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	e000e3f0 	.word	0xe000e3f0
 8004990:	200002ac 	.word	0x200002ac
 8004994:	e000ed0c 	.word	0xe000ed0c
 8004998:	200002b0 	.word	0x200002b0

0800499c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	; 0x28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80049a8:	f7fe fd46 	bl	8003438 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80049ac:	4b53      	ldr	r3, [pc, #332]	; (8004afc <pvPortMalloc+0x160>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80049b4:	f000 f908 	bl	8004bc8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d012      	beq.n	80049e4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80049be:	2208      	movs	r2, #8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	3308      	adds	r3, #8
 80049ca:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	43db      	mvns	r3, r3
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d804      	bhi.n	80049e0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	4413      	add	r3, r2
 80049dc:	607b      	str	r3, [r7, #4]
 80049de:	e001      	b.n	80049e4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	db70      	blt.n	8004acc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d06d      	beq.n	8004acc <pvPortMalloc+0x130>
 80049f0:	4b43      	ldr	r3, [pc, #268]	; (8004b00 <pvPortMalloc+0x164>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d868      	bhi.n	8004acc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049fa:	4b42      	ldr	r3, [pc, #264]	; (8004b04 <pvPortMalloc+0x168>)
 80049fc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80049fe:	4b41      	ldr	r3, [pc, #260]	; (8004b04 <pvPortMalloc+0x168>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a04:	e004      	b.n	8004a10 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d903      	bls.n	8004a22 <pvPortMalloc+0x86>
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1f1      	bne.n	8004a06 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004a22:	4b36      	ldr	r3, [pc, #216]	; (8004afc <pvPortMalloc+0x160>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d04f      	beq.n	8004acc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2208      	movs	r2, #8
 8004a32:	4413      	add	r3, r2
 8004a34:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	1ad2      	subs	r2, r2, r3
 8004a46:	2308      	movs	r3, #8
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d91f      	bls.n	8004a8e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4413      	add	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <pvPortMalloc+0xda>
        __asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	613b      	str	r3, [r7, #16]
    }
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	1ad2      	subs	r2, r2, r3
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a88:	6978      	ldr	r0, [r7, #20]
 8004a8a:	f000 f8f9 	bl	8004c80 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a8e:	4b1c      	ldr	r3, [pc, #112]	; (8004b00 <pvPortMalloc+0x164>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	4a19      	ldr	r2, [pc, #100]	; (8004b00 <pvPortMalloc+0x164>)
 8004a9a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a9c:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <pvPortMalloc+0x164>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4b19      	ldr	r3, [pc, #100]	; (8004b08 <pvPortMalloc+0x16c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d203      	bcs.n	8004ab0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004aa8:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <pvPortMalloc+0x164>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <pvPortMalloc+0x16c>)
 8004aae:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004ac2:	4b12      	ldr	r3, [pc, #72]	; (8004b0c <pvPortMalloc+0x170>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	4a10      	ldr	r2, [pc, #64]	; (8004b0c <pvPortMalloc+0x170>)
 8004aca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004acc:	f7fe fcc2 	bl	8003454 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <pvPortMalloc+0x154>
        __asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	60fb      	str	r3, [r7, #12]
    }
 8004aec:	bf00      	nop
 8004aee:	e7fe      	b.n	8004aee <pvPortMalloc+0x152>
    return pvReturn;
 8004af0:	69fb      	ldr	r3, [r7, #28]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3728      	adds	r7, #40	; 0x28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20012ebc 	.word	0x20012ebc
 8004b00:	20012ec0 	.word	0x20012ec0
 8004b04:	20012eb4 	.word	0x20012eb4
 8004b08:	20012ec4 	.word	0x20012ec4
 8004b0c:	20012ec8 	.word	0x20012ec8

08004b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d049      	beq.n	8004bb6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004b22:	2308      	movs	r3, #8
 8004b24:	425b      	negs	r3, r3
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4413      	add	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	db0a      	blt.n	8004b4e <vPortFree+0x3e>
        __asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	60fb      	str	r3, [r7, #12]
    }
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <vPortFree+0x5c>
        __asm volatile
 8004b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	60bb      	str	r3, [r7, #8]
    }
 8004b68:	bf00      	nop
 8004b6a:	e7fe      	b.n	8004b6a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	0fdb      	lsrs	r3, r3, #31
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01c      	beq.n	8004bb6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d118      	bne.n	8004bb6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004b90:	f7fe fc52 	bl	8003438 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <vPortFree+0xb0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	4a08      	ldr	r2, [pc, #32]	; (8004bc0 <vPortFree+0xb0>)
 8004ba0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ba2:	6938      	ldr	r0, [r7, #16]
 8004ba4:	f000 f86c 	bl	8004c80 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <vPortFree+0xb4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3301      	adds	r3, #1
 8004bae:	4a05      	ldr	r2, [pc, #20]	; (8004bc4 <vPortFree+0xb4>)
 8004bb0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004bb2:	f7fe fc4f 	bl	8003454 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004bb6:	bf00      	nop
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20012ec0 	.word	0x20012ec0
 8004bc4:	20012ecc 	.word	0x20012ecc

08004bc8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bce:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004bd2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004bd4:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <prvHeapInit+0xa4>)
 8004bd6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00c      	beq.n	8004bfc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3307      	adds	r3, #7
 8004be6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0307 	bic.w	r3, r3, #7
 8004bee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	4a1d      	ldr	r2, [pc, #116]	; (8004c6c <prvHeapInit+0xa4>)
 8004bf8:	4413      	add	r3, r2
 8004bfa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c00:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <prvHeapInit+0xa8>)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c06:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <prvHeapInit+0xa8>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	4413      	add	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004c14:	2208      	movs	r2, #8
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0307 	bic.w	r3, r3, #7
 8004c22:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <prvHeapInit+0xac>)
 8004c28:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c2a:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <prvHeapInit+0xac>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c32:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <prvHeapInit+0xac>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	1ad2      	subs	r2, r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <prvHeapInit+0xac>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4a08      	ldr	r2, [pc, #32]	; (8004c78 <prvHeapInit+0xb0>)
 8004c56:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	4a07      	ldr	r2, [pc, #28]	; (8004c7c <prvHeapInit+0xb4>)
 8004c5e:	6013      	str	r3, [r2, #0]
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	200002b4 	.word	0x200002b4
 8004c70:	20012eb4 	.word	0x20012eb4
 8004c74:	20012ebc 	.word	0x20012ebc
 8004c78:	20012ec4 	.word	0x20012ec4
 8004c7c:	20012ec0 	.word	0x20012ec0

08004c80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c88:	4b28      	ldr	r3, [pc, #160]	; (8004d2c <prvInsertBlockIntoFreeList+0xac>)
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	e002      	b.n	8004c94 <prvInsertBlockIntoFreeList+0x14>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d8f7      	bhi.n	8004c8e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	4413      	add	r3, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d108      	bne.n	8004cc2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	441a      	add	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	441a      	add	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d118      	bne.n	8004d08 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4b15      	ldr	r3, [pc, #84]	; (8004d30 <prvInsertBlockIntoFreeList+0xb0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d00d      	beq.n	8004cfe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	441a      	add	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e008      	b.n	8004d10 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <prvInsertBlockIntoFreeList+0xb0>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	e003      	b.n	8004d10 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d002      	beq.n	8004d1e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	20012eb4 	.word	0x20012eb4
 8004d30:	20012ebc 	.word	0x20012ebc

08004d34 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004d38:	4803      	ldr	r0, [pc, #12]	; (8004d48 <_cbSendSystemDesc+0x14>)
 8004d3a:	f002 f90f 	bl	8006f5c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004d3e:	4803      	ldr	r0, [pc, #12]	; (8004d4c <_cbSendSystemDesc+0x18>)
 8004d40:	f002 f90c 	bl	8006f5c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004d44:	bf00      	nop
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	08007ff8 	.word	0x08007ff8
 8004d4c:	08008038 	.word	0x08008038

08004d50 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d5a:	6819      	ldr	r1, [r3, #0]
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <SEGGER_SYSVIEW_Conf+0x24>)
 8004d5e:	4a06      	ldr	r2, [pc, #24]	; (8004d78 <SEGGER_SYSVIEW_Conf+0x28>)
 8004d60:	f001 fc78 	bl	8006654 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004d68:	f001 fcb8 	bl	80066dc <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d6c:	bf00      	nop
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20000000 	.word	0x20000000
 8004d74:	08004d35 	.word	0x08004d35
 8004d78:	080080d4 	.word	0x080080d4

08004d7c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d82:	2300      	movs	r3, #0
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	e033      	b.n	8004df0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d88:	491e      	ldr	r1, [pc, #120]	; (8004e04 <_cbSendTaskList+0x88>)
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	491a      	ldr	r1, [pc, #104]	; (8004e04 <_cbSendTaskList+0x88>)
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	3304      	adds	r3, #4
 8004da8:	6819      	ldr	r1, [r3, #0]
 8004daa:	4c16      	ldr	r4, [pc, #88]	; (8004e04 <_cbSendTaskList+0x88>)
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4423      	add	r3, r4
 8004db8:	3308      	adds	r3, #8
 8004dba:	681c      	ldr	r4, [r3, #0]
 8004dbc:	4d11      	ldr	r5, [pc, #68]	; (8004e04 <_cbSendTaskList+0x88>)
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	442b      	add	r3, r5
 8004dca:	330c      	adds	r3, #12
 8004dcc:	681d      	ldr	r5, [r3, #0]
 8004dce:	4e0d      	ldr	r6, [pc, #52]	; (8004e04 <_cbSendTaskList+0x88>)
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4433      	add	r3, r6
 8004ddc:	3310      	adds	r3, #16
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	462b      	mov	r3, r5
 8004de4:	4622      	mov	r2, r4
 8004de6:	f000 f8bd 	bl	8004f64 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3301      	adds	r3, #1
 8004dee:	607b      	str	r3, [r7, #4]
 8004df0:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <_cbSendTaskList+0x8c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d3c6      	bcc.n	8004d88 <_cbSendTaskList+0xc>
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e04:	20012ed0 	.word	0x20012ed0
 8004e08:	20012f70 	.word	0x20012f70

08004e0c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e10:	b082      	sub	sp, #8
 8004e12:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004e14:	f7fe fc2e 	bl	8003674 <xTaskGetTickCountFromISR>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	469a      	mov	sl, r3
 8004e1e:	4693      	mov	fp, r2
 8004e20:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004e24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	f04f 0a00 	mov.w	sl, #0
 8004e30:	f04f 0b00 	mov.w	fp, #0
 8004e34:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004e38:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004e3c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004e40:	4652      	mov	r2, sl
 8004e42:	465b      	mov	r3, fp
 8004e44:	1a14      	subs	r4, r2, r0
 8004e46:	eb63 0501 	sbc.w	r5, r3, r1
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	00ab      	lsls	r3, r5, #2
 8004e54:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004e58:	00a2      	lsls	r2, r4, #2
 8004e5a:	4614      	mov	r4, r2
 8004e5c:	461d      	mov	r5, r3
 8004e5e:	eb14 0800 	adds.w	r8, r4, r0
 8004e62:	eb45 0901 	adc.w	r9, r5, r1
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e7a:	4690      	mov	r8, r2
 8004e7c:	4699      	mov	r9, r3
 8004e7e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004e82:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e86:	4610      	mov	r0, r2
 8004e88:	4619      	mov	r1, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004e94 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ea2:	2205      	movs	r2, #5
 8004ea4:	492b      	ldr	r1, [pc, #172]	; (8004f54 <SYSVIEW_AddTask+0xc0>)
 8004ea6:	68b8      	ldr	r0, [r7, #8]
 8004ea8:	f002 fbc2 	bl	8007630 <memcmp>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d04b      	beq.n	8004f4a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004eb2:	4b29      	ldr	r3, [pc, #164]	; (8004f58 <SYSVIEW_AddTask+0xc4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b07      	cmp	r3, #7
 8004eb8:	d903      	bls.n	8004ec2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004eba:	4828      	ldr	r0, [pc, #160]	; (8004f5c <SYSVIEW_AddTask+0xc8>)
 8004ebc:	f002 fb0a 	bl	80074d4 <SEGGER_SYSVIEW_Warn>
    return;
 8004ec0:	e044      	b.n	8004f4c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004ec2:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <SYSVIEW_AddTask+0xc4>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	4926      	ldr	r1, [pc, #152]	; (8004f60 <SYSVIEW_AddTask+0xcc>)
 8004ec8:	4613      	mov	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004ed6:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <SYSVIEW_AddTask+0xc4>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4921      	ldr	r1, [pc, #132]	; (8004f60 <SYSVIEW_AddTask+0xcc>)
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004eec:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <SYSVIEW_AddTask+0xc4>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	491b      	ldr	r1, [pc, #108]	; (8004f60 <SYSVIEW_AddTask+0xcc>)
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	440b      	add	r3, r1
 8004efc:	3308      	adds	r3, #8
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004f02:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <SYSVIEW_AddTask+0xc4>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4916      	ldr	r1, [pc, #88]	; (8004f60 <SYSVIEW_AddTask+0xcc>)
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	330c      	adds	r3, #12
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <SYSVIEW_AddTask+0xc4>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	4910      	ldr	r1, [pc, #64]	; (8004f60 <SYSVIEW_AddTask+0xcc>)
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	3310      	adds	r3, #16
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <SYSVIEW_AddTask+0xc4>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3301      	adds	r3, #1
 8004f34:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <SYSVIEW_AddTask+0xc4>)
 8004f36:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f80e 	bl	8004f64 <SYSVIEW_SendTaskInfo>
 8004f48:	e000      	b.n	8004f4c <SYSVIEW_AddTask+0xb8>
    return;
 8004f4a:	bf00      	nop

}
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	08008048 	.word	0x08008048
 8004f58:	20012f70 	.word	0x20012f70
 8004f5c:	08008050 	.word	0x08008050
 8004f60:	20012ed0 	.word	0x20012ed0

08004f64 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08a      	sub	sp, #40	; 0x28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004f72:	f107 0314 	add.w	r3, r7, #20
 8004f76:	2214      	movs	r2, #20
 8004f78:	2100      	movs	r1, #0
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f002 fb76 	bl	800766c <memset>
  TaskInfo.TaskID     = TaskID;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004f94:	f107 0314 	add.w	r3, r7, #20
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f001 fee7 	bl	8006d6c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004f9e:	bf00      	nop
 8004fa0:	3728      	adds	r7, #40	; 0x28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <__NVIC_EnableIRQ>:
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	db0b      	blt.n	8004fd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	f003 021f 	and.w	r2, r3, #31
 8004fc0:	4907      	ldr	r1, [pc, #28]	; (8004fe0 <__NVIC_EnableIRQ+0x38>)
 8004fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	2001      	movs	r0, #1
 8004fca:	fa00 f202 	lsl.w	r2, r0, r2
 8004fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	e000e100 	.word	0xe000e100

08004fe4 <__NVIC_SetPriority>:
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4603      	mov	r3, r0
 8004fec:	6039      	str	r1, [r7, #0]
 8004fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	db0a      	blt.n	800500e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	490c      	ldr	r1, [pc, #48]	; (8005030 <__NVIC_SetPriority+0x4c>)
 8004ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005002:	0112      	lsls	r2, r2, #4
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	440b      	add	r3, r1
 8005008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800500c:	e00a      	b.n	8005024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	4908      	ldr	r1, [pc, #32]	; (8005034 <__NVIC_SetPriority+0x50>)
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	3b04      	subs	r3, #4
 800501c:	0112      	lsls	r2, r2, #4
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	440b      	add	r3, r1
 8005022:	761a      	strb	r2, [r3, #24]
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	e000e100 	.word	0xe000e100
 8005034:	e000ed00 	.word	0xe000ed00

08005038 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800503e:	f002 faa5 	bl	800758c <SEGGER_SYSVIEW_IsStarted>
 8005042:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800504a:	f001 fd13 	bl	8006a74 <SEGGER_SYSVIEW_Start>
  }
}
 800504e:	bf00      	nop
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	4603      	mov	r3, r0
 8005060:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <_cbOnUARTRx+0x3c>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b03      	cmp	r3, #3
 8005068:	d806      	bhi.n	8005078 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <_cbOnUARTRx+0x3c>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	3301      	adds	r3, #1
 8005070:	b2da      	uxtb	r2, r3
 8005072:	4b08      	ldr	r3, [pc, #32]	; (8005094 <_cbOnUARTRx+0x3c>)
 8005074:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005076:	e009      	b.n	800508c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005078:	f7ff ffde 	bl	8005038 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800507c:	4b05      	ldr	r3, [pc, #20]	; (8005094 <_cbOnUARTRx+0x3c>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	4618      	mov	r0, r3
 8005082:	1dfb      	adds	r3, r7, #7
 8005084:	2201      	movs	r2, #1
 8005086:	4619      	mov	r1, r3
 8005088:	f000 fb9c 	bl	80057c4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800508c:	bf00      	nop
}
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	20000014 	.word	0x20000014

08005098 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80050a0:	4b14      	ldr	r3, [pc, #80]	; (80050f4 <_cbOnUARTTx+0x5c>)
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d80f      	bhi.n	80050c8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80050a8:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <_cbOnUARTTx+0x5c>)
 80050aa:	785b      	ldrb	r3, [r3, #1]
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <_cbOnUARTTx+0x60>)
 80050b0:	5c9a      	ldrb	r2, [r3, r2]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <_cbOnUARTTx+0x5c>)
 80050b8:	785b      	ldrb	r3, [r3, #1]
 80050ba:	3301      	adds	r3, #1
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <_cbOnUARTTx+0x5c>)
 80050c0:	705a      	strb	r2, [r3, #1]
    r = 1;
 80050c2:	2301      	movs	r3, #1
 80050c4:	60fb      	str	r3, [r7, #12]
    goto Done;
 80050c6:	e00f      	b.n	80050e8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80050c8:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <_cbOnUARTTx+0x5c>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fa1b 	bl	800550c <SEGGER_RTT_ReadUpBufferNoLock>
 80050d6:	4603      	mov	r3, r0
 80050d8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	da02      	bge.n	80050e6 <_cbOnUARTTx+0x4e>
    r = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	e000      	b.n	80050e8 <_cbOnUARTTx+0x50>
  }
Done:
 80050e6:	bf00      	nop
  return r;
 80050e8:	68fb      	ldr	r3, [r7, #12]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000014 	.word	0x20000014
 80050f8:	080080dc 	.word	0x080080dc

080050fc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005104:	4a04      	ldr	r2, [pc, #16]	; (8005118 <SEGGER_UART_init+0x1c>)
 8005106:	4905      	ldr	r1, [pc, #20]	; (800511c <SEGGER_UART_init+0x20>)
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f863 	bl	80051d4 <HIF_UART_Init>
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	08005059 	.word	0x08005059
 800511c:	08005099 	.word	0x08005099

08005120 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005126:	4b1e      	ldr	r3, [pc, #120]	; (80051a0 <USART2_IRQHandler+0x80>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d011      	beq.n	800515a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005136:	4b1b      	ldr	r3, [pc, #108]	; (80051a4 <USART2_IRQHandler+0x84>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 030b 	and.w	r3, r3, #11
 8005144:	2b00      	cmp	r3, #0
 8005146:	d108      	bne.n	800515a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005148:	4b17      	ldr	r3, [pc, #92]	; (80051a8 <USART2_IRQHandler+0x88>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d004      	beq.n	800515a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005150:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <USART2_IRQHandler+0x88>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	79fa      	ldrb	r2, [r7, #7]
 8005156:	4610      	mov	r0, r2
 8005158:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01a      	beq.n	800519a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005164:	4b11      	ldr	r3, [pc, #68]	; (80051ac <USART2_IRQHandler+0x8c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d015      	beq.n	8005198 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800516c:	4b0f      	ldr	r3, [pc, #60]	; (80051ac <USART2_IRQHandler+0x8c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	1dfa      	adds	r2, r7, #7
 8005172:	4610      	mov	r0, r2
 8005174:	4798      	blx	r3
 8005176:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800517e:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <USART2_IRQHandler+0x90>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a0b      	ldr	r2, [pc, #44]	; (80051b0 <USART2_IRQHandler+0x90>)
 8005184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	e006      	b.n	800519a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800518c:	4b04      	ldr	r3, [pc, #16]	; (80051a0 <USART2_IRQHandler+0x80>)
 800518e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005190:	79fa      	ldrb	r2, [r7, #7]
 8005192:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <USART2_IRQHandler+0x84>)
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e000      	b.n	800519a <USART2_IRQHandler+0x7a>
      return;
 8005198:	bf00      	nop
    }
  }
}
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40004400 	.word	0x40004400
 80051a4:	40004404 	.word	0x40004404
 80051a8:	20012f74 	.word	0x20012f74
 80051ac:	20012f78 	.word	0x20012f78
 80051b0:	4000440c 	.word	0x4000440c

080051b4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a04      	ldr	r2, [pc, #16]	; (80051d0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80051be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c2:	6013      	str	r3, [r2, #0]
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	4000440c 	.word	0x4000440c

080051d4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80051e0:	4b2e      	ldr	r3, [pc, #184]	; (800529c <HIF_UART_Init+0xc8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a2d      	ldr	r2, [pc, #180]	; (800529c <HIF_UART_Init+0xc8>)
 80051e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ea:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80051ec:	4b2c      	ldr	r3, [pc, #176]	; (80052a0 <HIF_UART_Init+0xcc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a2b      	ldr	r2, [pc, #172]	; (80052a0 <HIF_UART_Init+0xcc>)
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80051f8:	4b2a      	ldr	r3, [pc, #168]	; (80052a4 <HIF_UART_Init+0xd0>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005204:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800520c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800520e:	4a25      	ldr	r2, [pc, #148]	; (80052a4 <HIF_UART_Init+0xd0>)
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005214:	4b24      	ldr	r3, [pc, #144]	; (80052a8 <HIF_UART_Init+0xd4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005220:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005228:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800522a:	4a1f      	ldr	r2, [pc, #124]	; (80052a8 <HIF_UART_Init+0xd4>)
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005230:	4b1e      	ldr	r3, [pc, #120]	; (80052ac <HIF_UART_Init+0xd8>)
 8005232:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8005236:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005238:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <HIF_UART_Init+0xdc>)
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800523e:	4b1d      	ldr	r3, [pc, #116]	; (80052b4 <HIF_UART_Init+0xe0>)
 8005240:	2280      	movs	r2, #128	; 0x80
 8005242:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800524a:	4a1b      	ldr	r2, [pc, #108]	; (80052b8 <HIF_UART_Init+0xe4>)
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005252:	3301      	adds	r3, #1
 8005254:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005262:	d302      	bcc.n	800526a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005264:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005268:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d004      	beq.n	800527a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	4a11      	ldr	r2, [pc, #68]	; (80052bc <HIF_UART_Init+0xe8>)
 8005276:	b29b      	uxth	r3, r3
 8005278:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800527a:	4a11      	ldr	r2, [pc, #68]	; (80052c0 <HIF_UART_Init+0xec>)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005280:	4a10      	ldr	r2, [pc, #64]	; (80052c4 <HIF_UART_Init+0xf0>)
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005286:	2106      	movs	r1, #6
 8005288:	2026      	movs	r0, #38	; 0x26
 800528a:	f7ff feab 	bl	8004fe4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800528e:	2026      	movs	r0, #38	; 0x26
 8005290:	f7ff fe8a 	bl	8004fa8 <__NVIC_EnableIRQ>
}
 8005294:	bf00      	nop
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40023840 	.word	0x40023840
 80052a0:	40023830 	.word	0x40023830
 80052a4:	40020020 	.word	0x40020020
 80052a8:	40020000 	.word	0x40020000
 80052ac:	4000440c 	.word	0x4000440c
 80052b0:	40004410 	.word	0x40004410
 80052b4:	40004414 	.word	0x40004414
 80052b8:	0501bd00 	.word	0x0501bd00
 80052bc:	40004408 	.word	0x40004408
 80052c0:	20012f74 	.word	0x20012f74
 80052c4:	20012f78 	.word	0x20012f78

080052c8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80052ce:	4b26      	ldr	r3, [pc, #152]	; (8005368 <_DoInit+0xa0>)
 80052d0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80052d2:	22a8      	movs	r2, #168	; 0xa8
 80052d4:	2100      	movs	r1, #0
 80052d6:	6838      	ldr	r0, [r7, #0]
 80052d8:	f002 f9c8 	bl	800766c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2203      	movs	r2, #3
 80052e0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2203      	movs	r2, #3
 80052e6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	4a20      	ldr	r2, [pc, #128]	; (800536c <_DoInit+0xa4>)
 80052ec:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	4a1f      	ldr	r2, [pc, #124]	; (8005370 <_DoInit+0xa8>)
 80052f2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052fa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2200      	movs	r2, #0
 8005300:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2200      	movs	r2, #0
 8005306:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2200      	movs	r2, #0
 800530c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	4a16      	ldr	r2, [pc, #88]	; (800536c <_DoInit+0xa4>)
 8005312:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	4a17      	ldr	r2, [pc, #92]	; (8005374 <_DoInit+0xac>)
 8005318:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2210      	movs	r2, #16
 800531e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2200      	movs	r2, #0
 8005324:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2200      	movs	r2, #0
 800532a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2200      	movs	r2, #0
 8005330:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005332:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005336:	2300      	movs	r3, #0
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	e00c      	b.n	8005356 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f1c3 030f 	rsb	r3, r3, #15
 8005342:	4a0d      	ldr	r2, [pc, #52]	; (8005378 <_DoInit+0xb0>)
 8005344:	5cd1      	ldrb	r1, [r2, r3]
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4413      	add	r3, r2
 800534c:	460a      	mov	r2, r1
 800534e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3301      	adds	r3, #1
 8005354:	607b      	str	r3, [r7, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b0f      	cmp	r3, #15
 800535a:	d9ef      	bls.n	800533c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800535c:	f3bf 8f5f 	dmb	sy
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	20012f7c 	.word	0x20012f7c
 800536c:	080080a0 	.word	0x080080a0
 8005370:	20013024 	.word	0x20013024
 8005374:	20013424 	.word	0x20013424
 8005378:	080080e0 	.word	0x080080e0

0800537c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	; 0x28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005388:	2300      	movs	r3, #0
 800538a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	429a      	cmp	r2, r3
 800539e:	d905      	bls.n	80053ac <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
 80053aa:	e007      	b.n	80053bc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	69b9      	ldr	r1, [r7, #24]
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	1acb      	subs	r3, r1, r3
 80053b6:	4413      	add	r3, r2
 80053b8:	3b01      	subs	r3, #1
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c6:	4293      	cmp	r3, r2
 80053c8:	bf28      	it	cs
 80053ca:	4613      	movcs	r3, r2
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80053ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4293      	cmp	r3, r2
 80053d4:	bf28      	it	cs
 80053d6:	4613      	movcs	r3, r2
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	4413      	add	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80053e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	6978      	ldr	r0, [r7, #20]
 80053ea:	f002 f931 	bl	8007650 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80053ee:	6a3a      	ldr	r2, [r7, #32]
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	4413      	add	r3, r2
 80053f4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	4413      	add	r3, r2
 80053fc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	4413      	add	r3, r2
 800540c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	69fa      	ldr	r2, [r7, #28]
 8005414:	429a      	cmp	r2, r3
 8005416:	d101      	bne.n	800541c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005418:	2300      	movs	r3, #0
 800541a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800541c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1b2      	bne.n	8005392 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800542c:	6a3b      	ldr	r3, [r7, #32]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3728      	adds	r7, #40	; 0x28
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005436:	b580      	push	{r7, lr}
 8005438:	b088      	sub	sp, #32
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	429a      	cmp	r2, r3
 8005458:	d911      	bls.n	800547e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	4413      	add	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	68b9      	ldr	r1, [r7, #8]
 8005468:	6938      	ldr	r0, [r7, #16]
 800546a:	f002 f8f1 	bl	8007650 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800546e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	441a      	add	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800547c:	e01f      	b.n	80054be <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	6938      	ldr	r0, [r7, #16]
 8005492:	f002 f8dd 	bl	8007650 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	4413      	add	r3, r2
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4619      	mov	r1, r3
 80054ae:	6938      	ldr	r0, [r7, #16]
 80054b0:	f002 f8ce 	bl	8007650 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054b4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	60da      	str	r2, [r3, #12]
}
 80054be:	bf00      	nop
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80054c6:	b480      	push	{r7}
 80054c8:	b087      	sub	sp, #28
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d808      	bhi.n	80054f4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	1ad2      	subs	r2, r2, r3
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	4413      	add	r3, r2
 80054ee:	3b01      	subs	r3, #1
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	e004      	b.n	80054fe <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	3b01      	subs	r3, #1
 80054fc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80054fe:	697b      	ldr	r3, [r7, #20]
}
 8005500:	4618      	mov	r0, r3
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b08c      	sub	sp, #48	; 0x30
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005518:	4b3e      	ldr	r3, [pc, #248]	; (8005614 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800551a:	623b      	str	r3, [r7, #32]
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b53      	cmp	r3, #83	; 0x53
 8005524:	d001      	beq.n	800552a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005526:	f7ff fecf 	bl	80052c8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	4613      	mov	r3, r2
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	4413      	add	r3, r2
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	4a37      	ldr	r2, [pc, #220]	; (8005614 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005538:	4413      	add	r3, r2
 800553a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800554c:	2300      	movs	r3, #0
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	429a      	cmp	r2, r3
 8005556:	d92b      	bls.n	80055b0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4293      	cmp	r3, r2
 8005568:	bf28      	it	cs
 800556a:	4613      	movcs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	4413      	add	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	6939      	ldr	r1, [r7, #16]
 800557c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800557e:	f002 f867 	bl	8007650 <memcpy>
    NumBytesRead += NumBytesRem;
 8005582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	4413      	add	r3, r2
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800558a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	4413      	add	r3, r2
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800559a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	4413      	add	r3, r2
 80055a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d101      	bne.n	80055b0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80055ac:	2300      	movs	r3, #0
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4293      	cmp	r3, r2
 80055be:	bf28      	it	cs
 80055c0:	4613      	movcs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d019      	beq.n	80055fe <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	4413      	add	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	6939      	ldr	r1, [r7, #16]
 80055d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055da:	f002 f839 	bl	8007650 <memcpy>
    NumBytesRead += NumBytesRem;
 80055de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	4413      	add	r3, r2
 80055e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80055e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	4413      	add	r3, r2
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80055f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	4413      	add	r3, r2
 80055fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80055fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005608:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800560c:	4618      	mov	r0, r3
 800560e:	3730      	adds	r7, #48	; 0x30
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20012f7c 	.word	0x20012f7c

08005618 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005618:	b580      	push	{r7, lr}
 800561a:	b08c      	sub	sp, #48	; 0x30
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005624:	4b3e      	ldr	r3, [pc, #248]	; (8005720 <SEGGER_RTT_ReadNoLock+0x108>)
 8005626:	623b      	str	r3, [r7, #32]
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b53      	cmp	r3, #83	; 0x53
 8005630:	d001      	beq.n	8005636 <SEGGER_RTT_ReadNoLock+0x1e>
 8005632:	f7ff fe49 	bl	80052c8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4613      	mov	r3, r2
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	4413      	add	r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	3360      	adds	r3, #96	; 0x60
 8005642:	4a37      	ldr	r2, [pc, #220]	; (8005720 <SEGGER_RTT_ReadNoLock+0x108>)
 8005644:	4413      	add	r3, r2
 8005646:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005658:	2300      	movs	r3, #0
 800565a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800565c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	429a      	cmp	r2, r3
 8005662:	d92b      	bls.n	80056bc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4293      	cmp	r3, r2
 8005674:	bf28      	it	cs
 8005676:	4613      	movcs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	4413      	add	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	6939      	ldr	r1, [r7, #16]
 8005688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800568a:	f001 ffe1 	bl	8007650 <memcpy>
    NumBytesRead += NumBytesRem;
 800568e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	4413      	add	r3, r2
 8005694:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	4413      	add	r3, r2
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80056a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	4413      	add	r3, r2
 80056ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d101      	bne.n	80056bc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80056b8:	2300      	movs	r3, #0
 80056ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4293      	cmp	r3, r2
 80056ca:	bf28      	it	cs
 80056cc:	4613      	movcs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d019      	beq.n	800570a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	4413      	add	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	6939      	ldr	r1, [r7, #16]
 80056e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056e6:	f001 ffb3 	bl	8007650 <memcpy>
    NumBytesRead += NumBytesRem;
 80056ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	4413      	add	r3, r2
 80056f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80056f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	4413      	add	r3, r2
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	4413      	add	r3, r2
 8005708:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005714:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005718:	4618      	mov	r0, r3
 800571a:	3730      	adds	r7, #48	; 0x30
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20012f7c 	.word	0x20012f7c

08005724 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	3360      	adds	r3, #96	; 0x60
 8005740:	4a1f      	ldr	r2, [pc, #124]	; (80057c0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005742:	4413      	add	r3, r2
 8005744:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d029      	beq.n	80057a2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800574e:	2b02      	cmp	r3, #2
 8005750:	d82e      	bhi.n	80057b0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005756:	2b01      	cmp	r3, #1
 8005758:	d013      	beq.n	8005782 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800575a:	e029      	b.n	80057b0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800575c:	6978      	ldr	r0, [r7, #20]
 800575e:	f7ff feb2 	bl	80054c6 <_GetAvailWriteSpace>
 8005762:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	429a      	cmp	r2, r3
 800576a:	d202      	bcs.n	8005772 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800576c:	2300      	movs	r3, #0
 800576e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005770:	e021      	b.n	80057b6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	69b9      	ldr	r1, [r7, #24]
 800577a:	6978      	ldr	r0, [r7, #20]
 800577c:	f7ff fe5b 	bl	8005436 <_WriteNoCheck>
    break;
 8005780:	e019      	b.n	80057b6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005782:	6978      	ldr	r0, [r7, #20]
 8005784:	f7ff fe9f 	bl	80054c6 <_GetAvailWriteSpace>
 8005788:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4293      	cmp	r3, r2
 8005790:	bf28      	it	cs
 8005792:	4613      	movcs	r3, r2
 8005794:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	69b9      	ldr	r1, [r7, #24]
 800579a:	6978      	ldr	r0, [r7, #20]
 800579c:	f7ff fe4b 	bl	8005436 <_WriteNoCheck>
    break;
 80057a0:	e009      	b.n	80057b6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	69b9      	ldr	r1, [r7, #24]
 80057a6:	6978      	ldr	r0, [r7, #20]
 80057a8:	f7ff fde8 	bl	800537c <_WriteBlocking>
 80057ac:	61f8      	str	r0, [r7, #28]
    break;
 80057ae:	e002      	b.n	80057b6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80057b0:	2300      	movs	r3, #0
 80057b2:	61fb      	str	r3, [r7, #28]
    break;
 80057b4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80057b6:	69fb      	ldr	r3, [r7, #28]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3720      	adds	r7, #32
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20012f7c 	.word	0x20012f7c

080057c4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80057d0:	4b0e      	ldr	r3, [pc, #56]	; (800580c <SEGGER_RTT_WriteDownBuffer+0x48>)
 80057d2:	61fb      	str	r3, [r7, #28]
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b53      	cmp	r3, #83	; 0x53
 80057dc:	d001      	beq.n	80057e2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80057de:	f7ff fd73 	bl	80052c8 <_DoInit>
  SEGGER_RTT_LOCK();
 80057e2:	f3ef 8311 	mrs	r3, BASEPRI
 80057e6:	f04f 0120 	mov.w	r1, #32
 80057ea:	f381 8811 	msr	BASEPRI, r1
 80057ee:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	68b9      	ldr	r1, [r7, #8]
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7ff ff95 	bl	8005724 <SEGGER_RTT_WriteDownBufferNoLock>
 80057fa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005802:	697b      	ldr	r3, [r7, #20]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3720      	adds	r7, #32
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20012f7c 	.word	0x20012f7c

08005810 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005810:	b580      	push	{r7, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800581e:	4b3d      	ldr	r3, [pc, #244]	; (8005914 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005820:	61bb      	str	r3, [r7, #24]
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b53      	cmp	r3, #83	; 0x53
 800582a:	d001      	beq.n	8005830 <SEGGER_RTT_AllocUpBuffer+0x20>
 800582c:	f7ff fd4c 	bl	80052c8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005830:	f3ef 8311 	mrs	r3, BASEPRI
 8005834:	f04f 0120 	mov.w	r1, #32
 8005838:	f381 8811 	msr	BASEPRI, r1
 800583c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800583e:	4b35      	ldr	r3, [pc, #212]	; (8005914 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005840:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005846:	6939      	ldr	r1, [r7, #16]
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	4613      	mov	r3, r2
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	4413      	add	r3, r2
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	440b      	add	r3, r1
 8005856:	3304      	adds	r3, #4
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d008      	beq.n	8005870 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3301      	adds	r3, #1
 8005862:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	429a      	cmp	r2, r3
 800586c:	dbeb      	blt.n	8005846 <SEGGER_RTT_AllocUpBuffer+0x36>
 800586e:	e000      	b.n	8005872 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005870:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	69fa      	ldr	r2, [r7, #28]
 8005878:	429a      	cmp	r2, r3
 800587a:	da3f      	bge.n	80058fc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800587c:	6939      	ldr	r1, [r7, #16]
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	4613      	mov	r3, r2
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	4413      	add	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	440b      	add	r3, r1
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005890:	6939      	ldr	r1, [r7, #16]
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	4613      	mov	r3, r2
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	4413      	add	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	440b      	add	r3, r1
 80058a0:	3304      	adds	r3, #4
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80058a6:	6939      	ldr	r1, [r7, #16]
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	4613      	mov	r3, r2
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	4413      	add	r3, r2
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	440b      	add	r3, r1
 80058b4:	3320      	adds	r3, #32
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80058ba:	6939      	ldr	r1, [r7, #16]
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	4613      	mov	r3, r2
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	4413      	add	r3, r2
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	440b      	add	r3, r1
 80058c8:	3328      	adds	r3, #40	; 0x28
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80058ce:	6939      	ldr	r1, [r7, #16]
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	4613      	mov	r3, r2
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	4413      	add	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	440b      	add	r3, r1
 80058dc:	3324      	adds	r3, #36	; 0x24
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80058e2:	6939      	ldr	r1, [r7, #16]
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	4613      	mov	r3, r2
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	4413      	add	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	440b      	add	r3, r1
 80058f0:	332c      	adds	r3, #44	; 0x2c
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058f6:	f3bf 8f5f 	dmb	sy
 80058fa:	e002      	b.n	8005902 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80058fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005900:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005908:	69fb      	ldr	r3, [r7, #28]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20012f7c 	.word	0x20012f7c

08005918 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005918:	b580      	push	{r7, lr}
 800591a:	b08a      	sub	sp, #40	; 0x28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005926:	4b21      	ldr	r3, [pc, #132]	; (80059ac <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005928:	623b      	str	r3, [r7, #32]
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b53      	cmp	r3, #83	; 0x53
 8005932:	d001      	beq.n	8005938 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005934:	f7ff fcc8 	bl	80052c8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005938:	4b1c      	ldr	r3, [pc, #112]	; (80059ac <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800593a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d82c      	bhi.n	800599c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005942:	f3ef 8311 	mrs	r3, BASEPRI
 8005946:	f04f 0120 	mov.w	r1, #32
 800594a:	f381 8811 	msr	BASEPRI, r1
 800594e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4613      	mov	r3, r2
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	4413      	add	r3, r2
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	3360      	adds	r3, #96	; 0x60
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00e      	beq.n	8005986 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2200      	movs	r2, #0
 800597e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	2200      	movs	r2, #0
 8005984:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800598c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005996:	2300      	movs	r3, #0
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
 800599a:	e002      	b.n	80059a2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800599c:	f04f 33ff 	mov.w	r3, #4294967295
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3728      	adds	r7, #40	; 0x28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	20012f7c 	.word	0x20012f7c

080059b0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	60fa      	str	r2, [r7, #12]
 80059c6:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b80      	cmp	r3, #128	; 0x80
 80059cc:	d90a      	bls.n	80059e4 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80059ce:	2380      	movs	r3, #128	; 0x80
 80059d0:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80059d2:	e007      	b.n	80059e4 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	1c53      	adds	r3, r2, #1
 80059d8:	60bb      	str	r3, [r7, #8]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1c59      	adds	r1, r3, #1
 80059de:	60f9      	str	r1, [r7, #12]
 80059e0:	7812      	ldrb	r2, [r2, #0]
 80059e2:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	1e5a      	subs	r2, r3, #1
 80059e8:	607a      	str	r2, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <_EncodeStr+0x46>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1ee      	bne.n	80059d4 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005a02:	68fb      	ldr	r3, [r7, #12]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3307      	adds	r3, #7
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005a2e:	4b35      	ldr	r3, [pc, #212]	; (8005b04 <_HandleIncomingPacket+0xdc>)
 8005a30:	7e1b      	ldrb	r3, [r3, #24]
 8005a32:	4618      	mov	r0, r3
 8005a34:	1cfb      	adds	r3, r7, #3
 8005a36:	2201      	movs	r2, #1
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f7ff fded 	bl	8005618 <SEGGER_RTT_ReadNoLock>
 8005a3e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d052      	beq.n	8005aec <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005a46:	78fb      	ldrb	r3, [r7, #3]
 8005a48:	2b80      	cmp	r3, #128	; 0x80
 8005a4a:	d031      	beq.n	8005ab0 <_HandleIncomingPacket+0x88>
 8005a4c:	2b80      	cmp	r3, #128	; 0x80
 8005a4e:	dc40      	bgt.n	8005ad2 <_HandleIncomingPacket+0xaa>
 8005a50:	2b07      	cmp	r3, #7
 8005a52:	dc15      	bgt.n	8005a80 <_HandleIncomingPacket+0x58>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	dd3c      	ble.n	8005ad2 <_HandleIncomingPacket+0xaa>
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	2b06      	cmp	r3, #6
 8005a5c:	d839      	bhi.n	8005ad2 <_HandleIncomingPacket+0xaa>
 8005a5e:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <_HandleIncomingPacket+0x3c>)
 8005a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a64:	08005a87 	.word	0x08005a87
 8005a68:	08005a8d 	.word	0x08005a8d
 8005a6c:	08005a93 	.word	0x08005a93
 8005a70:	08005a99 	.word	0x08005a99
 8005a74:	08005a9f 	.word	0x08005a9f
 8005a78:	08005aa5 	.word	0x08005aa5
 8005a7c:	08005aab 	.word	0x08005aab
 8005a80:	2b7f      	cmp	r3, #127	; 0x7f
 8005a82:	d035      	beq.n	8005af0 <_HandleIncomingPacket+0xc8>
 8005a84:	e025      	b.n	8005ad2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005a86:	f000 fff5 	bl	8006a74 <SEGGER_SYSVIEW_Start>
      break;
 8005a8a:	e036      	b.n	8005afa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005a8c:	f001 f8ae 	bl	8006bec <SEGGER_SYSVIEW_Stop>
      break;
 8005a90:	e033      	b.n	8005afa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005a92:	f001 fa87 	bl	8006fa4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005a96:	e030      	b.n	8005afa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005a98:	f001 fa4c 	bl	8006f34 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005a9c:	e02d      	b.n	8005afa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005a9e:	f001 f8cb 	bl	8006c38 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005aa2:	e02a      	b.n	8005afa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005aa4:	f001 fcc4 	bl	8007430 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005aa8:	e027      	b.n	8005afa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005aaa:	f001 fca3 	bl	80073f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005aae:	e024      	b.n	8005afa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ab0:	4b14      	ldr	r3, [pc, #80]	; (8005b04 <_HandleIncomingPacket+0xdc>)
 8005ab2:	7e1b      	ldrb	r3, [r3, #24]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	1cfb      	adds	r3, r7, #3
 8005ab8:	2201      	movs	r2, #1
 8005aba:	4619      	mov	r1, r3
 8005abc:	f7ff fdac 	bl	8005618 <SEGGER_RTT_ReadNoLock>
 8005ac0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d015      	beq.n	8005af4 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f001 fc08 	bl	80072e0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005ad0:	e010      	b.n	8005af4 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	b25b      	sxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	da0e      	bge.n	8005af8 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ada:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <_HandleIncomingPacket+0xdc>)
 8005adc:	7e1b      	ldrb	r3, [r3, #24]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	1cfb      	adds	r3, r7, #3
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	f7ff fd97 	bl	8005618 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005aea:	e005      	b.n	8005af8 <_HandleIncomingPacket+0xd0>
    }
  }
 8005aec:	bf00      	nop
 8005aee:	e004      	b.n	8005afa <_HandleIncomingPacket+0xd2>
      break;
 8005af0:	bf00      	nop
 8005af2:	e002      	b.n	8005afa <_HandleIncomingPacket+0xd2>
      break;
 8005af4:	bf00      	nop
 8005af6:	e000      	b.n	8005afa <_HandleIncomingPacket+0xd2>
      break;
 8005af8:	bf00      	nop
}
 8005afa:	bf00      	nop
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	2001443c 	.word	0x2001443c

08005b08 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08c      	sub	sp, #48	; 0x30
 8005b0c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005b0e:	2301      	movs	r3, #1
 8005b10:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005b12:	1d3b      	adds	r3, r7, #4
 8005b14:	3301      	adds	r3, #1
 8005b16:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b1c:	4b32      	ldr	r3, [pc, #200]	; (8005be8 <_TrySendOverflowPacket+0xe0>)
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b22:	e00b      	b.n	8005b3c <_TrySendOverflowPacket+0x34>
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	1c59      	adds	r1, r3, #1
 8005b2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	09db      	lsrs	r3, r3, #7
 8005b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b40:	d8f0      	bhi.n	8005b24 <_TrySendOverflowPacket+0x1c>
 8005b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b52:	4b26      	ldr	r3, [pc, #152]	; (8005bec <_TrySendOverflowPacket+0xe4>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005b58:	4b23      	ldr	r3, [pc, #140]	; (8005be8 <_TrySendOverflowPacket+0xe0>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	623b      	str	r3, [r7, #32]
 8005b6a:	e00b      	b.n	8005b84 <_TrySendOverflowPacket+0x7c>
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	1c59      	adds	r1, r3, #1
 8005b74:	6279      	str	r1, [r7, #36]	; 0x24
 8005b76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	09db      	lsrs	r3, r3, #7
 8005b82:	623b      	str	r3, [r7, #32]
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	2b7f      	cmp	r3, #127	; 0x7f
 8005b88:	d8f0      	bhi.n	8005b6c <_TrySendOverflowPacket+0x64>
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	627a      	str	r2, [r7, #36]	; 0x24
 8005b90:	6a3a      	ldr	r2, [r7, #32]
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005b9a:	4b13      	ldr	r3, [pc, #76]	; (8005be8 <_TrySendOverflowPacket+0xe0>)
 8005b9c:	785b      	ldrb	r3, [r3, #1]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	1d3b      	adds	r3, r7, #4
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	1d3b      	adds	r3, r7, #4
 8005baa:	4619      	mov	r1, r3
 8005bac:	f7fa fb30 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005bb4:	f7ff fafe 	bl	80051b4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d009      	beq.n	8005bd2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005bbe:	4a0a      	ldr	r2, [pc, #40]	; (8005be8 <_TrySendOverflowPacket+0xe0>)
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005bc4:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <_TrySendOverflowPacket+0xe0>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <_TrySendOverflowPacket+0xe0>)
 8005bce:	701a      	strb	r2, [r3, #0]
 8005bd0:	e004      	b.n	8005bdc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005bd2:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <_TrySendOverflowPacket+0xe0>)
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	4a03      	ldr	r2, [pc, #12]	; (8005be8 <_TrySendOverflowPacket+0xe0>)
 8005bda:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005bdc:	693b      	ldr	r3, [r7, #16]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3730      	adds	r7, #48	; 0x30
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	2001443c 	.word	0x2001443c
 8005bec:	e0001004 	.word	0xe0001004

08005bf0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08a      	sub	sp, #40	; 0x28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005bfc:	4b96      	ldr	r3, [pc, #600]	; (8005e58 <_SendPacket+0x268>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d010      	beq.n	8005c26 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005c04:	4b94      	ldr	r3, [pc, #592]	; (8005e58 <_SendPacket+0x268>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 8130 	beq.w	8005e6e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005c0e:	4b92      	ldr	r3, [pc, #584]	; (8005e58 <_SendPacket+0x268>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d109      	bne.n	8005c2a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005c16:	f7ff ff77 	bl	8005b08 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005c1a:	4b8f      	ldr	r3, [pc, #572]	; (8005e58 <_SendPacket+0x268>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	f040 8127 	bne.w	8005e72 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005c24:	e001      	b.n	8005c2a <_SendPacket+0x3a>
    goto Send;
 8005c26:	bf00      	nop
 8005c28:	e000      	b.n	8005c2c <_SendPacket+0x3c>
Send:
 8005c2a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b1f      	cmp	r3, #31
 8005c30:	d809      	bhi.n	8005c46 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005c32:	4b89      	ldr	r3, [pc, #548]	; (8005e58 <_SendPacket+0x268>)
 8005c34:	69da      	ldr	r2, [r3, #28]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f040 8118 	bne.w	8005e76 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b17      	cmp	r3, #23
 8005c4a:	d807      	bhi.n	8005c5c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	701a      	strb	r2, [r3, #0]
 8005c5a:	e0c4      	b.n	8005de6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	2b7f      	cmp	r3, #127	; 0x7f
 8005c68:	d912      	bls.n	8005c90 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	09da      	lsrs	r2, r3, #7
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3b01      	subs	r3, #1
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	3a01      	subs	r2, #1
 8005c82:	60fa      	str	r2, [r7, #12]
 8005c84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	e006      	b.n	8005c9e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b7e      	cmp	r3, #126	; 0x7e
 8005ca2:	d807      	bhi.n	8005cb4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	e098      	b.n	8005de6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cba:	d212      	bcs.n	8005ce2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	09da      	lsrs	r2, r3, #7
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	3a01      	subs	r2, #1
 8005cd4:	60fa      	str	r2, [r7, #12]
 8005cd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	701a      	strb	r2, [r3, #0]
 8005ce0:	e081      	b.n	8005de6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ce8:	d21d      	bcs.n	8005d26 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	0b9a      	lsrs	r2, r3, #14
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	09db      	lsrs	r3, r3, #7
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	3a01      	subs	r2, #1
 8005d04:	60fa      	str	r2, [r7, #12]
 8005d06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	3a01      	subs	r2, #1
 8005d18:	60fa      	str	r2, [r7, #12]
 8005d1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	e05f      	b.n	8005de6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d2c:	d228      	bcs.n	8005d80 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	0d5a      	lsrs	r2, r3, #21
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	0b9b      	lsrs	r3, r3, #14
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	3a01      	subs	r2, #1
 8005d48:	60fa      	str	r2, [r7, #12]
 8005d4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	09db      	lsrs	r3, r3, #7
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	3a01      	subs	r2, #1
 8005d5e:	60fa      	str	r2, [r7, #12]
 8005d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	3a01      	subs	r2, #1
 8005d72:	60fa      	str	r2, [r7, #12]
 8005d74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	e032      	b.n	8005de6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	0f1a      	lsrs	r2, r3, #28
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	0d5b      	lsrs	r3, r3, #21
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	3a01      	subs	r2, #1
 8005d9a:	60fa      	str	r2, [r7, #12]
 8005d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	0b9b      	lsrs	r3, r3, #14
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	3a01      	subs	r2, #1
 8005db0:	60fa      	str	r2, [r7, #12]
 8005db2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	09db      	lsrs	r3, r3, #7
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	3a01      	subs	r2, #1
 8005dc6:	60fa      	str	r2, [r7, #12]
 8005dc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	3a01      	subs	r2, #1
 8005dda:	60fa      	str	r2, [r7, #12]
 8005ddc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005de6:	4b1d      	ldr	r3, [pc, #116]	; (8005e5c <_SendPacket+0x26c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005dec:	4b1a      	ldr	r3, [pc, #104]	; (8005e58 <_SendPacket+0x268>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	623b      	str	r3, [r7, #32]
 8005dfe:	e00b      	b.n	8005e18 <_SendPacket+0x228>
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	1c59      	adds	r1, r3, #1
 8005e08:	6279      	str	r1, [r7, #36]	; 0x24
 8005e0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	09db      	lsrs	r3, r3, #7
 8005e16:	623b      	str	r3, [r7, #32]
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e1c:	d8f0      	bhi.n	8005e00 <_SendPacket+0x210>
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	627a      	str	r2, [r7, #36]	; 0x24
 8005e24:	6a3a      	ldr	r2, [r7, #32]
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005e2e:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <_SendPacket+0x268>)
 8005e30:	785b      	ldrb	r3, [r3, #1]
 8005e32:	4618      	mov	r0, r3
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	68f9      	ldr	r1, [r7, #12]
 8005e3e:	f7fa f9e7 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e42:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005e44:	f7ff f9b6 	bl	80051b4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d008      	beq.n	8005e60 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e4e:	4a02      	ldr	r2, [pc, #8]	; (8005e58 <_SendPacket+0x268>)
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	60d3      	str	r3, [r2, #12]
 8005e54:	e010      	b.n	8005e78 <_SendPacket+0x288>
 8005e56:	bf00      	nop
 8005e58:	2001443c 	.word	0x2001443c
 8005e5c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005e60:	4b19      	ldr	r3, [pc, #100]	; (8005ec8 <_SendPacket+0x2d8>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	4b17      	ldr	r3, [pc, #92]	; (8005ec8 <_SendPacket+0x2d8>)
 8005e6a:	701a      	strb	r2, [r3, #0]
 8005e6c:	e004      	b.n	8005e78 <_SendPacket+0x288>
    goto SendDone;
 8005e6e:	bf00      	nop
 8005e70:	e002      	b.n	8005e78 <_SendPacket+0x288>
      goto SendDone;
 8005e72:	bf00      	nop
 8005e74:	e000      	b.n	8005e78 <_SendPacket+0x288>
      goto SendDone;
 8005e76:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005e78:	4b13      	ldr	r3, [pc, #76]	; (8005ec8 <_SendPacket+0x2d8>)
 8005e7a:	7e1b      	ldrb	r3, [r3, #24]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4a13      	ldr	r2, [pc, #76]	; (8005ecc <_SendPacket+0x2dc>)
 8005e80:	460b      	mov	r3, r1
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	440b      	add	r3, r1
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	4413      	add	r3, r2
 8005e8a:	336c      	adds	r3, #108	; 0x6c
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <_SendPacket+0x2d8>)
 8005e90:	7e1b      	ldrb	r3, [r3, #24]
 8005e92:	4618      	mov	r0, r3
 8005e94:	490d      	ldr	r1, [pc, #52]	; (8005ecc <_SendPacket+0x2dc>)
 8005e96:	4603      	mov	r3, r0
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	4403      	add	r3, r0
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	440b      	add	r3, r1
 8005ea0:	3370      	adds	r3, #112	; 0x70
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d00b      	beq.n	8005ec0 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005ea8:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <_SendPacket+0x2d8>)
 8005eaa:	789b      	ldrb	r3, [r3, #2]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d107      	bne.n	8005ec0 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005eb0:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <_SendPacket+0x2d8>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005eb6:	f7ff fdb7 	bl	8005a28 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005eba:	4b03      	ldr	r3, [pc, #12]	; (8005ec8 <_SendPacket+0x2d8>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005ec0:	bf00      	nop
 8005ec2:	3728      	adds	r7, #40	; 0x28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	2001443c 	.word	0x2001443c
 8005ecc:	20012f7c 	.word	0x20012f7c

08005ed0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08a      	sub	sp, #40	; 0x28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	2b80      	cmp	r3, #128	; 0x80
 8005ee8:	d80a      	bhi.n	8005f00 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	1c59      	adds	r1, r3, #1
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6051      	str	r1, [r2, #4]
 8005ef4:	78fa      	ldrb	r2, [r7, #3]
 8005ef6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b80      	cmp	r3, #128	; 0x80
 8005f06:	d15a      	bne.n	8005fbe <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	623b      	str	r3, [r7, #32]
 8005f28:	e00b      	b.n	8005f42 <_StoreChar+0x72>
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	1c59      	adds	r1, r3, #1
 8005f32:	6279      	str	r1, [r7, #36]	; 0x24
 8005f34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	09db      	lsrs	r3, r3, #7
 8005f40:	623b      	str	r3, [r7, #32]
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	2b7f      	cmp	r3, #127	; 0x7f
 8005f46:	d8f0      	bhi.n	8005f2a <_StoreChar+0x5a>
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	627a      	str	r2, [r7, #36]	; 0x24
 8005f4e:	6a3a      	ldr	r2, [r7, #32]
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	61fb      	str	r3, [r7, #28]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	61bb      	str	r3, [r7, #24]
 8005f60:	e00b      	b.n	8005f7a <_StoreChar+0xaa>
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	1c59      	adds	r1, r3, #1
 8005f6a:	61f9      	str	r1, [r7, #28]
 8005f6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	09db      	lsrs	r3, r3, #7
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f7e:	d8f0      	bhi.n	8005f62 <_StoreChar+0x92>
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	61fa      	str	r2, [r7, #28]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	221a      	movs	r2, #26
 8005f96:	6939      	ldr	r1, [r7, #16]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fe29 	bl	8005bf0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff fd34 	bl	8005a10 <_PreparePacket>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	611a      	str	r2, [r3, #16]
  }
}
 8005fbe:	bf00      	nop
 8005fc0:	3728      	adds	r7, #40	; 0x28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08a      	sub	sp, #40	; 0x28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005fe2:	e007      	b.n	8005ff4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005fe4:	6a3a      	ldr	r2, [r7, #32]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fec:	623b      	str	r3, [r7, #32]
    Width++;
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005ff4:	6a3a      	ldr	r2, [r7, #32]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d2f3      	bcs.n	8005fe4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	429a      	cmp	r2, r3
 8006002:	d901      	bls.n	8006008 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d11f      	bne.n	8006052 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01c      	beq.n	8006052 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d005      	beq.n	800602e <_PrintUnsigned+0x66>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d102      	bne.n	800602e <_PrintUnsigned+0x66>
        c = '0';
 8006028:	2330      	movs	r3, #48	; 0x30
 800602a:	76fb      	strb	r3, [r7, #27]
 800602c:	e001      	b.n	8006032 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800602e:	2320      	movs	r3, #32
 8006030:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006032:	e007      	b.n	8006044 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	3b01      	subs	r3, #1
 8006038:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800603a:	7efb      	ldrb	r3, [r7, #27]
 800603c:	4619      	mov	r1, r3
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f7ff ff46 	bl	8005ed0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <_PrintUnsigned+0x8a>
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	429a      	cmp	r2, r3
 8006050:	d3f0      	bcc.n	8006034 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d903      	bls.n	8006060 <_PrintUnsigned+0x98>
      NumDigits--;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	3b01      	subs	r3, #1
 800605c:	603b      	str	r3, [r7, #0]
 800605e:	e009      	b.n	8006074 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	fbb2 f3f3 	udiv	r3, r2, r3
 8006068:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	429a      	cmp	r2, r3
 8006070:	d200      	bcs.n	8006074 <_PrintUnsigned+0xac>
        break;
 8006072:	e005      	b.n	8006080 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	fb02 f303 	mul.w	r3, r2, r3
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800607e:	e7e8      	b.n	8006052 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	fbb2 f3f3 	udiv	r3, r2, r3
 8006088:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608e:	fb02 f303 	mul.w	r3, r2, r3
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006098:	4a15      	ldr	r2, [pc, #84]	; (80060f0 <_PrintUnsigned+0x128>)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	4413      	add	r3, r2
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	4619      	mov	r1, r3
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f7ff ff14 	bl	8005ed0 <_StoreChar>
    Digit /= Base;
 80060a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e3      	bne.n	8006080 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80060b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d011      	beq.n	80060e6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00e      	beq.n	80060e6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060c8:	e006      	b.n	80060d8 <_PrintUnsigned+0x110>
        FieldWidth--;
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	3b01      	subs	r3, #1
 80060ce:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80060d0:	2120      	movs	r1, #32
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f7ff fefc 	bl	8005ed0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <_PrintUnsigned+0x11e>
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d3f1      	bcc.n	80060ca <_PrintUnsigned+0x102>
      }
    }
  }
}
 80060e6:	bf00      	nop
 80060e8:	3728      	adds	r7, #40	; 0x28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	08008100 	.word	0x08008100

080060f4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	bfb8      	it	lt
 8006108:	425b      	neglt	r3, r3
 800610a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800610c:	2301      	movs	r3, #1
 800610e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006110:	e007      	b.n	8006122 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	fb92 f3f3 	sdiv	r3, r2, r3
 800611a:	613b      	str	r3, [r7, #16]
    Width++;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	3301      	adds	r3, #1
 8006120:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	429a      	cmp	r2, r3
 8006128:	daf3      	bge.n	8006112 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	429a      	cmp	r2, r3
 8006130:	d901      	bls.n	8006136 <_PrintInt+0x42>
    Width = NumDigits;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00a      	beq.n	8006152 <_PrintInt+0x5e>
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	db04      	blt.n	800614c <_PrintInt+0x58>
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <_PrintInt+0x5e>
    FieldWidth--;
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	3b01      	subs	r3, #1
 8006150:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <_PrintInt+0x6e>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d016      	beq.n	8006190 <_PrintInt+0x9c>
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d111      	bne.n	8006190 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00e      	beq.n	8006190 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006172:	e006      	b.n	8006182 <_PrintInt+0x8e>
        FieldWidth--;
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	3b01      	subs	r3, #1
 8006178:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800617a:	2120      	movs	r1, #32
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f7ff fea7 	bl	8005ed0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <_PrintInt+0x9c>
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	429a      	cmp	r2, r3
 800618e:	d3f1      	bcc.n	8006174 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	da07      	bge.n	80061a6 <_PrintInt+0xb2>
    v = -v;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	425b      	negs	r3, r3
 800619a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800619c:	212d      	movs	r1, #45	; 0x2d
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f7ff fe96 	bl	8005ed0 <_StoreChar>
 80061a4:	e008      	b.n	80061b8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80061b0:	212b      	movs	r1, #43	; 0x2b
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f7ff fe8c 	bl	8005ed0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d019      	beq.n	80061f6 <_PrintInt+0x102>
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d114      	bne.n	80061f6 <_PrintInt+0x102>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d111      	bne.n	80061f6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00e      	beq.n	80061f6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061d8:	e006      	b.n	80061e8 <_PrintInt+0xf4>
        FieldWidth--;
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	3b01      	subs	r3, #1
 80061de:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80061e0:	2130      	movs	r1, #48	; 0x30
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f7ff fe74 	bl	8005ed0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <_PrintInt+0x102>
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d3f1      	bcc.n	80061da <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	9301      	str	r3, [sp, #4]
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff fedf 	bl	8005fc8 <_PrintUnsigned>
}
 800620a:	bf00      	nop
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006214:	b580      	push	{r7, lr}
 8006216:	b098      	sub	sp, #96	; 0x60
 8006218:	af02      	add	r7, sp, #8
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006220:	f3ef 8311 	mrs	r3, BASEPRI
 8006224:	f04f 0120 	mov.w	r1, #32
 8006228:	f381 8811 	msr	BASEPRI, r1
 800622c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800622e:	48b7      	ldr	r0, [pc, #732]	; (800650c <_VPrintTarget+0x2f8>)
 8006230:	f7ff fbee 	bl	8005a10 <_PreparePacket>
 8006234:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006236:	4bb5      	ldr	r3, [pc, #724]	; (800650c <_VPrintTarget+0x2f8>)
 8006238:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 800623a:	2300      	movs	r3, #0
 800623c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	3301      	adds	r3, #1
 8006246:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3301      	adds	r3, #1
 8006258:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800625a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 81a8 	beq.w	80065b4 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8006264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006268:	2b25      	cmp	r3, #37	; 0x25
 800626a:	f040 8195 	bne.w	8006598 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800626e:	2300      	movs	r3, #0
 8006270:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8006272:	2301      	movs	r3, #1
 8006274:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800627e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006282:	3b23      	subs	r3, #35	; 0x23
 8006284:	2b0d      	cmp	r3, #13
 8006286:	d83f      	bhi.n	8006308 <_VPrintTarget+0xf4>
 8006288:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <_VPrintTarget+0x7c>)
 800628a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628e:	bf00      	nop
 8006290:	080062f9 	.word	0x080062f9
 8006294:	08006309 	.word	0x08006309
 8006298:	08006309 	.word	0x08006309
 800629c:	08006309 	.word	0x08006309
 80062a0:	08006309 	.word	0x08006309
 80062a4:	08006309 	.word	0x08006309
 80062a8:	08006309 	.word	0x08006309
 80062ac:	08006309 	.word	0x08006309
 80062b0:	080062e9 	.word	0x080062e9
 80062b4:	08006309 	.word	0x08006309
 80062b8:	080062c9 	.word	0x080062c9
 80062bc:	08006309 	.word	0x08006309
 80062c0:	08006309 	.word	0x08006309
 80062c4:	080062d9 	.word	0x080062d9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80062c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ca:	f043 0301 	orr.w	r3, r3, #1
 80062ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3301      	adds	r3, #1
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	e01a      	b.n	800630e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80062d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062da:	f043 0302 	orr.w	r3, r3, #2
 80062de:	64bb      	str	r3, [r7, #72]	; 0x48
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	e012      	b.n	800630e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80062e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ea:	f043 0304 	orr.w	r3, r3, #4
 80062ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3301      	adds	r3, #1
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	e00a      	b.n	800630e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80062f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062fa:	f043 0308 	orr.w	r3, r3, #8
 80062fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3301      	adds	r3, #1
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	e002      	b.n	800630e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006308:	2300      	movs	r3, #0
 800630a:	653b      	str	r3, [r7, #80]	; 0x50
 800630c:	bf00      	nop
        }
      } while (v);
 800630e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1b0      	bne.n	8006276 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006314:	2300      	movs	r3, #0
 8006316:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006320:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006324:	2b2f      	cmp	r3, #47	; 0x2f
 8006326:	d912      	bls.n	800634e <_VPrintTarget+0x13a>
 8006328:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800632c:	2b39      	cmp	r3, #57	; 0x39
 800632e:	d80e      	bhi.n	800634e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	461a      	mov	r2, r3
 8006342:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006346:	4413      	add	r3, r2
 8006348:	3b30      	subs	r3, #48	; 0x30
 800634a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800634c:	e7e4      	b.n	8006318 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800634e:	2300      	movs	r3, #0
 8006350:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800635a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800635e:	2b2e      	cmp	r3, #46	; 0x2e
 8006360:	d11d      	bne.n	800639e <_VPrintTarget+0x18a>
        sFormat++;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3301      	adds	r3, #1
 8006366:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006370:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006374:	2b2f      	cmp	r3, #47	; 0x2f
 8006376:	d912      	bls.n	800639e <_VPrintTarget+0x18a>
 8006378:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800637c:	2b39      	cmp	r3, #57	; 0x39
 800637e:	d80e      	bhi.n	800639e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3301      	adds	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006388:	4613      	mov	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	461a      	mov	r2, r3
 8006392:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006396:	4413      	add	r3, r2
 8006398:	3b30      	subs	r3, #48	; 0x30
 800639a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800639c:	e7e4      	b.n	8006368 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80063a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063aa:	2b6c      	cmp	r3, #108	; 0x6c
 80063ac:	d003      	beq.n	80063b6 <_VPrintTarget+0x1a2>
 80063ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063b2:	2b68      	cmp	r3, #104	; 0x68
 80063b4:	d107      	bne.n	80063c6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3301      	adds	r3, #1
 80063c2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80063c4:	e7ef      	b.n	80063a6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80063c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063ca:	2b25      	cmp	r3, #37	; 0x25
 80063cc:	f000 80d8 	beq.w	8006580 <_VPrintTarget+0x36c>
 80063d0:	2b25      	cmp	r3, #37	; 0x25
 80063d2:	f2c0 80dc 	blt.w	800658e <_VPrintTarget+0x37a>
 80063d6:	2b78      	cmp	r3, #120	; 0x78
 80063d8:	f300 80d9 	bgt.w	800658e <_VPrintTarget+0x37a>
 80063dc:	2b58      	cmp	r3, #88	; 0x58
 80063de:	f2c0 80d6 	blt.w	800658e <_VPrintTarget+0x37a>
 80063e2:	3b58      	subs	r3, #88	; 0x58
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	f200 80d2 	bhi.w	800658e <_VPrintTarget+0x37a>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <_VPrintTarget+0x1dc>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	080064e7 	.word	0x080064e7
 80063f4:	0800658f 	.word	0x0800658f
 80063f8:	0800658f 	.word	0x0800658f
 80063fc:	0800658f 	.word	0x0800658f
 8006400:	0800658f 	.word	0x0800658f
 8006404:	0800658f 	.word	0x0800658f
 8006408:	0800658f 	.word	0x0800658f
 800640c:	0800658f 	.word	0x0800658f
 8006410:	0800658f 	.word	0x0800658f
 8006414:	0800658f 	.word	0x0800658f
 8006418:	0800658f 	.word	0x0800658f
 800641c:	08006475 	.word	0x08006475
 8006420:	0800649b 	.word	0x0800649b
 8006424:	0800658f 	.word	0x0800658f
 8006428:	0800658f 	.word	0x0800658f
 800642c:	0800658f 	.word	0x0800658f
 8006430:	0800658f 	.word	0x0800658f
 8006434:	0800658f 	.word	0x0800658f
 8006438:	0800658f 	.word	0x0800658f
 800643c:	0800658f 	.word	0x0800658f
 8006440:	0800658f 	.word	0x0800658f
 8006444:	0800658f 	.word	0x0800658f
 8006448:	0800658f 	.word	0x0800658f
 800644c:	0800658f 	.word	0x0800658f
 8006450:	0800655b 	.word	0x0800655b
 8006454:	0800658f 	.word	0x0800658f
 8006458:	0800658f 	.word	0x0800658f
 800645c:	08006511 	.word	0x08006511
 8006460:	0800658f 	.word	0x0800658f
 8006464:	080064c1 	.word	0x080064c1
 8006468:	0800658f 	.word	0x0800658f
 800646c:	0800658f 	.word	0x0800658f
 8006470:	080064e7 	.word	0x080064e7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	1d19      	adds	r1, r3, #4
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6011      	str	r1, [r2, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8006488:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800648c:	f107 0310 	add.w	r3, r7, #16
 8006490:	4611      	mov	r1, r2
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff fd1c 	bl	8005ed0 <_StoreChar>
        break;
 8006498:	e07a      	b.n	8006590 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	1d19      	adds	r1, r3, #4
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6011      	str	r1, [r2, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80064a8:	f107 0010 	add.w	r0, r7, #16
 80064ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b6:	220a      	movs	r2, #10
 80064b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064ba:	f7ff fe1b 	bl	80060f4 <_PrintInt>
        break;
 80064be:	e067      	b.n	8006590 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	1d19      	adds	r1, r3, #4
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6011      	str	r1, [r2, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80064ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064d0:	f107 0010 	add.w	r0, r7, #16
 80064d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d6:	9301      	str	r3, [sp, #4]
 80064d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064de:	220a      	movs	r2, #10
 80064e0:	f7ff fd72 	bl	8005fc8 <_PrintUnsigned>
        break;
 80064e4:	e054      	b.n	8006590 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	1d19      	adds	r1, r3, #4
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6011      	str	r1, [r2, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80064f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064f6:	f107 0010 	add.w	r0, r7, #16
 80064fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064fc:	9301      	str	r3, [sp, #4]
 80064fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006504:	2210      	movs	r2, #16
 8006506:	f7ff fd5f 	bl	8005fc8 <_PrintUnsigned>
        break;
 800650a:	e041      	b.n	8006590 <_VPrintTarget+0x37c>
 800650c:	2001446c 	.word	0x2001446c
      case 's':
        s = va_arg(*pParamList, const char*);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	1d19      	adds	r1, r3, #4
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6011      	str	r1, [r2, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 800651e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <_VPrintTarget+0x314>
          s = "(null)";
 8006524:	4b4a      	ldr	r3, [pc, #296]	; (8006650 <_VPrintTarget+0x43c>)
 8006526:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8006528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8006530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006532:	3301      	adds	r3, #1
 8006534:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8006536:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00b      	beq.n	8006556 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800653e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006542:	f107 0310 	add.w	r3, r7, #16
 8006546:	4611      	mov	r1, r2
 8006548:	4618      	mov	r0, r3
 800654a:	f7ff fcc1 	bl	8005ed0 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	2b7f      	cmp	r3, #127	; 0x7f
 8006552:	d9e9      	bls.n	8006528 <_VPrintTarget+0x314>
        break;
 8006554:	e01c      	b.n	8006590 <_VPrintTarget+0x37c>
            break;
 8006556:	bf00      	nop
        break;
 8006558:	e01a      	b.n	8006590 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	1d19      	adds	r1, r3, #4
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6011      	str	r1, [r2, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006568:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800656a:	f107 0010 	add.w	r0, r7, #16
 800656e:	2300      	movs	r3, #0
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	2308      	movs	r3, #8
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	2308      	movs	r3, #8
 8006578:	2210      	movs	r2, #16
 800657a:	f7ff fd25 	bl	8005fc8 <_PrintUnsigned>
        break;
 800657e:	e007      	b.n	8006590 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006580:	f107 0310 	add.w	r3, r7, #16
 8006584:	2125      	movs	r1, #37	; 0x25
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff fca2 	bl	8005ed0 <_StoreChar>
        break;
 800658c:	e000      	b.n	8006590 <_VPrintTarget+0x37c>
      default:
        break;
 800658e:	bf00      	nop
      }
      sFormat++;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	e007      	b.n	80065a8 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006598:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800659c:	f107 0310 	add.w	r3, r7, #16
 80065a0:	4611      	mov	r1, r2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7ff fc94 	bl	8005ed0 <_StoreChar>
    }
  } while (*sFormat);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f47f ae4d 	bne.w	800624c <_VPrintTarget+0x38>
 80065b2:	e000      	b.n	80065b6 <_VPrintTarget+0x3a2>
      break;
 80065b4:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d041      	beq.n	8006640 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80065bc:	6a3a      	ldr	r2, [r7, #32]
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80065cc:	e00b      	b.n	80065e6 <_VPrintTarget+0x3d2>
 80065ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d4:	1c59      	adds	r1, r3, #1
 80065d6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80065d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065dc:	b2d2      	uxtb	r2, r2
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	09db      	lsrs	r3, r3, #7
 80065e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80065e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e8:	2b7f      	cmp	r3, #127	; 0x7f
 80065ea:	d8f0      	bhi.n	80065ce <_VPrintTarget+0x3ba>
 80065ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065f4:	b2d2      	uxtb	r2, r2
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fa:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006600:	2300      	movs	r3, #0
 8006602:	633b      	str	r3, [r7, #48]	; 0x30
 8006604:	e00b      	b.n	800661e <_VPrintTarget+0x40a>
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	b2da      	uxtb	r2, r3
 800660a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660c:	1c59      	adds	r1, r3, #1
 800660e:	6379      	str	r1, [r7, #52]	; 0x34
 8006610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	09db      	lsrs	r3, r3, #7
 800661c:	633b      	str	r3, [r7, #48]	; 0x30
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	2b7f      	cmp	r3, #127	; 0x7f
 8006622:	d8f0      	bhi.n	8006606 <_VPrintTarget+0x3f2>
 8006624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	637a      	str	r2, [r7, #52]	; 0x34
 800662a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800662c:	b2d2      	uxtb	r2, r2
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006632:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	6979      	ldr	r1, [r7, #20]
 8006638:	221a      	movs	r2, #26
 800663a:	4618      	mov	r0, r3
 800663c:	f7ff fad8 	bl	8005bf0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006646:	bf00      	nop
 8006648:	3758      	adds	r7, #88	; 0x58
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	080080ac 	.word	0x080080ac

08006654 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af02      	add	r7, sp, #8
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006662:	2300      	movs	r3, #0
 8006664:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006668:	4917      	ldr	r1, [pc, #92]	; (80066c8 <SEGGER_SYSVIEW_Init+0x74>)
 800666a:	4818      	ldr	r0, [pc, #96]	; (80066cc <SEGGER_SYSVIEW_Init+0x78>)
 800666c:	f7ff f8d0 	bl	8005810 <SEGGER_RTT_AllocUpBuffer>
 8006670:	4603      	mov	r3, r0
 8006672:	b2da      	uxtb	r2, r3
 8006674:	4b16      	ldr	r3, [pc, #88]	; (80066d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006676:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006678:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <SEGGER_SYSVIEW_Init+0x7c>)
 800667a:	785a      	ldrb	r2, [r3, #1]
 800667c:	4b14      	ldr	r3, [pc, #80]	; (80066d0 <SEGGER_SYSVIEW_Init+0x7c>)
 800667e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006680:	4b13      	ldr	r3, [pc, #76]	; (80066d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006682:	7e1b      	ldrb	r3, [r3, #24]
 8006684:	4618      	mov	r0, r3
 8006686:	2300      	movs	r3, #0
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	2308      	movs	r3, #8
 800668c:	4a11      	ldr	r2, [pc, #68]	; (80066d4 <SEGGER_SYSVIEW_Init+0x80>)
 800668e:	490f      	ldr	r1, [pc, #60]	; (80066cc <SEGGER_SYSVIEW_Init+0x78>)
 8006690:	f7ff f942 	bl	8005918 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006694:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006696:	2200      	movs	r2, #0
 8006698:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800669a:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <SEGGER_SYSVIEW_Init+0x84>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a0c      	ldr	r2, [pc, #48]	; (80066d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80066a0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80066a2:	4a0b      	ldr	r2, [pc, #44]	; (80066d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80066a8:	4a09      	ldr	r2, [pc, #36]	; (80066d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80066ae:	4a08      	ldr	r2, [pc, #32]	; (80066d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80066b4:	4a06      	ldr	r2, [pc, #24]	; (80066d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80066bc:	2200      	movs	r2, #0
 80066be:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80066c0:	bf00      	nop
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	20013434 	.word	0x20013434
 80066cc:	080080b4 	.word	0x080080b4
 80066d0:	2001443c 	.word	0x2001443c
 80066d4:	20014434 	.word	0x20014434
 80066d8:	e0001004 	.word	0xe0001004

080066dc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80066e4:	4a04      	ldr	r2, [pc, #16]	; (80066f8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6113      	str	r3, [r2, #16]
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	2001443c 	.word	0x2001443c

080066fc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006704:	f3ef 8311 	mrs	r3, BASEPRI
 8006708:	f04f 0120 	mov.w	r1, #32
 800670c:	f381 8811 	msr	BASEPRI, r1
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	4808      	ldr	r0, [pc, #32]	; (8006734 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006714:	f7ff f97c 	bl	8005a10 <_PreparePacket>
 8006718:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	68b8      	ldr	r0, [r7, #8]
 8006720:	f7ff fa66 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f383 8811 	msr	BASEPRI, r3
}
 800672a:	bf00      	nop
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	2001446c 	.word	0x2001446c

08006738 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006742:	f3ef 8311 	mrs	r3, BASEPRI
 8006746:	f04f 0120 	mov.w	r1, #32
 800674a:	f381 8811 	msr	BASEPRI, r1
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	4816      	ldr	r0, [pc, #88]	; (80067ac <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006752:	f7ff f95d 	bl	8005a10 <_PreparePacket>
 8006756:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	e00b      	b.n	800677e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	b2da      	uxtb	r2, r3
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	1c59      	adds	r1, r3, #1
 800676e:	61f9      	str	r1, [r7, #28]
 8006770:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	09db      	lsrs	r3, r3, #7
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2b7f      	cmp	r3, #127	; 0x7f
 8006782:	d8f0      	bhi.n	8006766 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	61fa      	str	r2, [r7, #28]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	6938      	ldr	r0, [r7, #16]
 800679a:	f7ff fa29 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f383 8811 	msr	BASEPRI, r3
}
 80067a4:	bf00      	nop
 80067a6:	3720      	adds	r7, #32
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	2001446c 	.word	0x2001446c

080067b0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08c      	sub	sp, #48	; 0x30
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80067bc:	f3ef 8311 	mrs	r3, BASEPRI
 80067c0:	f04f 0120 	mov.w	r1, #32
 80067c4:	f381 8811 	msr	BASEPRI, r1
 80067c8:	61fb      	str	r3, [r7, #28]
 80067ca:	4825      	ldr	r0, [pc, #148]	; (8006860 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80067cc:	f7ff f920 	bl	8005a10 <_PreparePacket>
 80067d0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80067de:	e00b      	b.n	80067f8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80067e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e6:	1c59      	adds	r1, r3, #1
 80067e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80067ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f4:	09db      	lsrs	r3, r3, #7
 80067f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	2b7f      	cmp	r3, #127	; 0x7f
 80067fc:	d8f0      	bhi.n	80067e0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	627b      	str	r3, [r7, #36]	; 0x24
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	623b      	str	r3, [r7, #32]
 8006816:	e00b      	b.n	8006830 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	b2da      	uxtb	r2, r3
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	1c59      	adds	r1, r3, #1
 8006820:	6279      	str	r1, [r7, #36]	; 0x24
 8006822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	09db      	lsrs	r3, r3, #7
 800682e:	623b      	str	r3, [r7, #32]
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	2b7f      	cmp	r3, #127	; 0x7f
 8006834:	d8f0      	bhi.n	8006818 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	627a      	str	r2, [r7, #36]	; 0x24
 800683c:	6a3a      	ldr	r2, [r7, #32]
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	6979      	ldr	r1, [r7, #20]
 800684a:	69b8      	ldr	r0, [r7, #24]
 800684c:	f7ff f9d0 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	f383 8811 	msr	BASEPRI, r3
}
 8006856:	bf00      	nop
 8006858:	3730      	adds	r7, #48	; 0x30
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	2001446c 	.word	0x2001446c

08006864 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006864:	b580      	push	{r7, lr}
 8006866:	b08e      	sub	sp, #56	; 0x38
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
 8006870:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006872:	f3ef 8311 	mrs	r3, BASEPRI
 8006876:	f04f 0120 	mov.w	r1, #32
 800687a:	f381 8811 	msr	BASEPRI, r1
 800687e:	61fb      	str	r3, [r7, #28]
 8006880:	4832      	ldr	r0, [pc, #200]	; (800694c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006882:	f7ff f8c5 	bl	8005a10 <_PreparePacket>
 8006886:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	637b      	str	r3, [r7, #52]	; 0x34
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	633b      	str	r3, [r7, #48]	; 0x30
 8006894:	e00b      	b.n	80068ae <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	b2da      	uxtb	r2, r3
 800689a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689c:	1c59      	adds	r1, r3, #1
 800689e:	6379      	str	r1, [r7, #52]	; 0x34
 80068a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	09db      	lsrs	r3, r3, #7
 80068ac:	633b      	str	r3, [r7, #48]	; 0x30
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	2b7f      	cmp	r3, #127	; 0x7f
 80068b2:	d8f0      	bhi.n	8006896 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80068b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	637a      	str	r2, [r7, #52]	; 0x34
 80068ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80068cc:	e00b      	b.n	80068e6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	1c59      	adds	r1, r3, #1
 80068d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	09db      	lsrs	r3, r3, #7
 80068e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e8:	2b7f      	cmp	r3, #127	; 0x7f
 80068ea:	d8f0      	bhi.n	80068ce <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	701a      	strb	r2, [r3, #0]
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	623b      	str	r3, [r7, #32]
 8006904:	e00b      	b.n	800691e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	b2da      	uxtb	r2, r3
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	1c59      	adds	r1, r3, #1
 800690e:	6279      	str	r1, [r7, #36]	; 0x24
 8006910:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	09db      	lsrs	r3, r3, #7
 800691c:	623b      	str	r3, [r7, #32]
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	2b7f      	cmp	r3, #127	; 0x7f
 8006922:	d8f0      	bhi.n	8006906 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	627a      	str	r2, [r7, #36]	; 0x24
 800692a:	6a3a      	ldr	r2, [r7, #32]
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	701a      	strb	r2, [r3, #0]
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	6979      	ldr	r1, [r7, #20]
 8006938:	69b8      	ldr	r0, [r7, #24]
 800693a:	f7ff f959 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	f383 8811 	msr	BASEPRI, r3
}
 8006944:	bf00      	nop
 8006946:	3738      	adds	r7, #56	; 0x38
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	2001446c 	.word	0x2001446c

08006950 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006950:	b580      	push	{r7, lr}
 8006952:	b090      	sub	sp, #64	; 0x40
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800695e:	f3ef 8311 	mrs	r3, BASEPRI
 8006962:	f04f 0120 	mov.w	r1, #32
 8006966:	f381 8811 	msr	BASEPRI, r1
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	4840      	ldr	r0, [pc, #256]	; (8006a70 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800696e:	f7ff f84f 	bl	8005a10 <_PreparePacket>
 8006972:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006980:	e00b      	b.n	800699a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	b2da      	uxtb	r2, r3
 8006986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006988:	1c59      	adds	r1, r3, #1
 800698a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800698c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	09db      	lsrs	r3, r3, #7
 8006998:	63bb      	str	r3, [r7, #56]	; 0x38
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	2b7f      	cmp	r3, #127	; 0x7f
 800699e:	d8f0      	bhi.n	8006982 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80069a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	637b      	str	r3, [r7, #52]	; 0x34
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	633b      	str	r3, [r7, #48]	; 0x30
 80069b8:	e00b      	b.n	80069d2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c0:	1c59      	adds	r1, r3, #1
 80069c2:	6379      	str	r1, [r7, #52]	; 0x34
 80069c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	09db      	lsrs	r3, r3, #7
 80069d0:	633b      	str	r3, [r7, #48]	; 0x30
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	2b7f      	cmp	r3, #127	; 0x7f
 80069d6:	d8f0      	bhi.n	80069ba <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80069d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	637a      	str	r2, [r7, #52]	; 0x34
 80069de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	701a      	strb	r2, [r3, #0]
 80069e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f0:	e00b      	b.n	8006a0a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f8:	1c59      	adds	r1, r3, #1
 80069fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	701a      	strb	r2, [r3, #0]
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	09db      	lsrs	r3, r3, #7
 8006a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a0e:	d8f0      	bhi.n	80069f2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	701a      	strb	r2, [r3, #0]
 8006a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
 8006a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a26:	623b      	str	r3, [r7, #32]
 8006a28:	e00b      	b.n	8006a42 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	1c59      	adds	r1, r3, #1
 8006a32:	6279      	str	r1, [r7, #36]	; 0x24
 8006a34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	09db      	lsrs	r3, r3, #7
 8006a40:	623b      	str	r3, [r7, #32]
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	2b7f      	cmp	r3, #127	; 0x7f
 8006a46:	d8f0      	bhi.n	8006a2a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	627a      	str	r2, [r7, #36]	; 0x24
 8006a4e:	6a3a      	ldr	r2, [r7, #32]
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	701a      	strb	r2, [r3, #0]
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	6979      	ldr	r1, [r7, #20]
 8006a5c:	69b8      	ldr	r0, [r7, #24]
 8006a5e:	f7ff f8c7 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	f383 8811 	msr	BASEPRI, r3
}
 8006a68:	bf00      	nop
 8006a6a:	3740      	adds	r7, #64	; 0x40
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	2001446c 	.word	0x2001446c

08006a74 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08c      	sub	sp, #48	; 0x30
 8006a78:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006a7a:	4b59      	ldr	r3, [pc, #356]	; (8006be0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006a80:	f3ef 8311 	mrs	r3, BASEPRI
 8006a84:	f04f 0120 	mov.w	r1, #32
 8006a88:	f381 8811 	msr	BASEPRI, r1
 8006a8c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006a8e:	4b54      	ldr	r3, [pc, #336]	; (8006be0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	220a      	movs	r2, #10
 8006a94:	4953      	ldr	r1, [pc, #332]	; (8006be4 <SEGGER_SYSVIEW_Start+0x170>)
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7f9 fbba 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006aa2:	f7fe fb87 	bl	80051b4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006aa6:	200a      	movs	r0, #10
 8006aa8:	f7ff fe28 	bl	80066fc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006aac:	f3ef 8311 	mrs	r3, BASEPRI
 8006ab0:	f04f 0120 	mov.w	r1, #32
 8006ab4:	f381 8811 	msr	BASEPRI, r1
 8006ab8:	60bb      	str	r3, [r7, #8]
 8006aba:	484b      	ldr	r0, [pc, #300]	; (8006be8 <SEGGER_SYSVIEW_Start+0x174>)
 8006abc:	f7fe ffa8 	bl	8005a10 <_PreparePacket>
 8006ac0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aca:	4b45      	ldr	r3, [pc, #276]	; (8006be0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad0:	e00b      	b.n	8006aea <SEGGER_SYSVIEW_Start+0x76>
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	1c59      	adds	r1, r3, #1
 8006ada:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006adc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	09db      	lsrs	r3, r3, #7
 8006ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	2b7f      	cmp	r3, #127	; 0x7f
 8006aee:	d8f0      	bhi.n	8006ad2 <SEGGER_SYSVIEW_Start+0x5e>
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
 8006b04:	4b36      	ldr	r3, [pc, #216]	; (8006be0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	623b      	str	r3, [r7, #32]
 8006b0a:	e00b      	b.n	8006b24 <SEGGER_SYSVIEW_Start+0xb0>
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	1c59      	adds	r1, r3, #1
 8006b14:	6279      	str	r1, [r7, #36]	; 0x24
 8006b16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	09db      	lsrs	r3, r3, #7
 8006b22:	623b      	str	r3, [r7, #32]
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	2b7f      	cmp	r3, #127	; 0x7f
 8006b28:	d8f0      	bhi.n	8006b0c <SEGGER_SYSVIEW_Start+0x98>
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	627a      	str	r2, [r7, #36]	; 0x24
 8006b30:	6a3a      	ldr	r2, [r7, #32]
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	4b28      	ldr	r3, [pc, #160]	; (8006be0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	e00b      	b.n	8006b5e <SEGGER_SYSVIEW_Start+0xea>
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	1c59      	adds	r1, r3, #1
 8006b4e:	61f9      	str	r1, [r7, #28]
 8006b50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	09db      	lsrs	r3, r3, #7
 8006b5c:	61bb      	str	r3, [r7, #24]
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2b7f      	cmp	r3, #127	; 0x7f
 8006b62:	d8f0      	bhi.n	8006b46 <SEGGER_SYSVIEW_Start+0xd2>
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	61fa      	str	r2, [r7, #28]
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	613b      	str	r3, [r7, #16]
 8006b7c:	e00b      	b.n	8006b96 <SEGGER_SYSVIEW_Start+0x122>
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	1c59      	adds	r1, r3, #1
 8006b86:	6179      	str	r1, [r7, #20]
 8006b88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	09db      	lsrs	r3, r3, #7
 8006b94:	613b      	str	r3, [r7, #16]
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b7f      	cmp	r3, #127	; 0x7f
 8006b9a:	d8f0      	bhi.n	8006b7e <SEGGER_SYSVIEW_Start+0x10a>
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	617a      	str	r2, [r7, #20]
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006bac:	2218      	movs	r2, #24
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff f81d 	bl	8005bf0 <_SendPacket>
      RECORD_END();
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006bbc:	4b08      	ldr	r3, [pc, #32]	; (8006be0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006bc4:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006bca:	f000 f9eb 	bl	8006fa4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006bce:	f000 f9b1 	bl	8006f34 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006bd2:	f000 fc2d 	bl	8007430 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006bd6:	bf00      	nop
 8006bd8:	3730      	adds	r7, #48	; 0x30
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	2001443c 	.word	0x2001443c
 8006be4:	080080f4 	.word	0x080080f4
 8006be8:	2001446c 	.word	0x2001446c

08006bec <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf6:	f04f 0120 	mov.w	r1, #32
 8006bfa:	f381 8811 	msr	BASEPRI, r1
 8006bfe:	607b      	str	r3, [r7, #4]
 8006c00:	480b      	ldr	r0, [pc, #44]	; (8006c30 <SEGGER_SYSVIEW_Stop+0x44>)
 8006c02:	f7fe ff05 	bl	8005a10 <_PreparePacket>
 8006c06:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006c08:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <SEGGER_SYSVIEW_Stop+0x48>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d007      	beq.n	8006c20 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006c10:	220b      	movs	r2, #11
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6838      	ldr	r0, [r7, #0]
 8006c16:	f7fe ffeb 	bl	8005bf0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006c1a:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <SEGGER_SYSVIEW_Stop+0x48>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f383 8811 	msr	BASEPRI, r3
}
 8006c26:	bf00      	nop
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	2001446c 	.word	0x2001446c
 8006c34:	2001443c 	.word	0x2001443c

08006c38 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08c      	sub	sp, #48	; 0x30
 8006c3c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c42:	f04f 0120 	mov.w	r1, #32
 8006c46:	f381 8811 	msr	BASEPRI, r1
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	4845      	ldr	r0, [pc, #276]	; (8006d64 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006c4e:	f7fe fedf 	bl	8005a10 <_PreparePacket>
 8006c52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c5c:	4b42      	ldr	r3, [pc, #264]	; (8006d68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c62:	e00b      	b.n	8006c7c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6a:	1c59      	adds	r1, r3, #1
 8006c6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	09db      	lsrs	r3, r3, #7
 8006c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c80:	d8f0      	bhi.n	8006c64 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24
 8006c96:	4b34      	ldr	r3, [pc, #208]	; (8006d68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	623b      	str	r3, [r7, #32]
 8006c9c:	e00b      	b.n	8006cb6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	1c59      	adds	r1, r3, #1
 8006ca6:	6279      	str	r1, [r7, #36]	; 0x24
 8006ca8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	701a      	strb	r2, [r3, #0]
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	09db      	lsrs	r3, r3, #7
 8006cb4:	623b      	str	r3, [r7, #32]
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cba:	d8f0      	bhi.n	8006c9e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	627a      	str	r2, [r7, #36]	; 0x24
 8006cc2:	6a3a      	ldr	r2, [r7, #32]
 8006cc4:	b2d2      	uxtb	r2, r2
 8006cc6:	701a      	strb	r2, [r3, #0]
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	61fb      	str	r3, [r7, #28]
 8006cd0:	4b25      	ldr	r3, [pc, #148]	; (8006d68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	61bb      	str	r3, [r7, #24]
 8006cd6:	e00b      	b.n	8006cf0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	1c59      	adds	r1, r3, #1
 8006ce0:	61f9      	str	r1, [r7, #28]
 8006ce2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	09db      	lsrs	r3, r3, #7
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cf4:	d8f0      	bhi.n	8006cd8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	61fa      	str	r2, [r7, #28]
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	617b      	str	r3, [r7, #20]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	613b      	str	r3, [r7, #16]
 8006d0e:	e00b      	b.n	8006d28 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	1c59      	adds	r1, r3, #1
 8006d18:	6179      	str	r1, [r7, #20]
 8006d1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	09db      	lsrs	r3, r3, #7
 8006d26:	613b      	str	r3, [r7, #16]
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d2c:	d8f0      	bhi.n	8006d10 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	617a      	str	r2, [r7, #20]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006d3e:	2218      	movs	r2, #24
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	68b8      	ldr	r0, [r7, #8]
 8006d44:	f7fe ff54 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006d4e:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006d56:	4b04      	ldr	r3, [pc, #16]	; (8006d68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	4798      	blx	r3
  }
}
 8006d5c:	bf00      	nop
 8006d5e:	3730      	adds	r7, #48	; 0x30
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	2001446c 	.word	0x2001446c
 8006d68:	2001443c 	.word	0x2001443c

08006d6c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b092      	sub	sp, #72	; 0x48
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006d74:	f3ef 8311 	mrs	r3, BASEPRI
 8006d78:	f04f 0120 	mov.w	r1, #32
 8006d7c:	f381 8811 	msr	BASEPRI, r1
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	486a      	ldr	r0, [pc, #424]	; (8006f2c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006d84:	f7fe fe44 	bl	8005a10 <_PreparePacket>
 8006d88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	647b      	str	r3, [r7, #68]	; 0x44
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	4b66      	ldr	r3, [pc, #408]	; (8006f30 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	643b      	str	r3, [r7, #64]	; 0x40
 8006d9e:	e00b      	b.n	8006db8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006da6:	1c59      	adds	r1, r3, #1
 8006da8:	6479      	str	r1, [r7, #68]	; 0x44
 8006daa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db4:	09db      	lsrs	r3, r3, #7
 8006db6:	643b      	str	r3, [r7, #64]	; 0x40
 8006db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dba:	2b7f      	cmp	r3, #127	; 0x7f
 8006dbc:	d8f0      	bhi.n	8006da0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	647a      	str	r2, [r7, #68]	; 0x44
 8006dc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dd8:	e00b      	b.n	8006df2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de0:	1c59      	adds	r1, r3, #1
 8006de2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006de4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	701a      	strb	r2, [r3, #0]
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	09db      	lsrs	r3, r3, #7
 8006df0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df4:	2b7f      	cmp	r3, #127	; 0x7f
 8006df6:	d8f0      	bhi.n	8006dda <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e00:	b2d2      	uxtb	r2, r2
 8006e02:	701a      	strb	r2, [r3, #0]
 8006e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e06:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	4619      	mov	r1, r3
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f7fe fdcd 	bl	80059b0 <_EncodeStr>
 8006e16:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006e18:	2209      	movs	r2, #9
 8006e1a:	68f9      	ldr	r1, [r7, #12]
 8006e1c:	6938      	ldr	r0, [r7, #16]
 8006e1e:	f7fe fee7 	bl	8005bf0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	637b      	str	r3, [r7, #52]	; 0x34
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	4b40      	ldr	r3, [pc, #256]	; (8006f30 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	633b      	str	r3, [r7, #48]	; 0x30
 8006e36:	e00b      	b.n	8006e50 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3e:	1c59      	adds	r1, r3, #1
 8006e40:	6379      	str	r1, [r7, #52]	; 0x34
 8006e42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	09db      	lsrs	r3, r3, #7
 8006e4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	2b7f      	cmp	r3, #127	; 0x7f
 8006e54:	d8f0      	bhi.n	8006e38 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	637a      	str	r2, [r7, #52]	; 0x34
 8006e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	701a      	strb	r2, [r3, #0]
 8006e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e70:	e00b      	b.n	8006e8a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e78:	1c59      	adds	r1, r3, #1
 8006e7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	701a      	strb	r2, [r3, #0]
 8006e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e86:	09db      	lsrs	r3, r3, #7
 8006e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e8e:	d8f0      	bhi.n	8006e72 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e98:	b2d2      	uxtb	r2, r2
 8006e9a:	701a      	strb	r2, [r3, #0]
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	623b      	str	r3, [r7, #32]
 8006eaa:	e00b      	b.n	8006ec4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	1c59      	adds	r1, r3, #1
 8006eb4:	6279      	str	r1, [r7, #36]	; 0x24
 8006eb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	09db      	lsrs	r3, r3, #7
 8006ec2:	623b      	str	r3, [r7, #32]
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec8:	d8f0      	bhi.n	8006eac <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	627a      	str	r2, [r7, #36]	; 0x24
 8006ed0:	6a3a      	ldr	r2, [r7, #32]
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	61fb      	str	r3, [r7, #28]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	e00b      	b.n	8006efc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	1c59      	adds	r1, r3, #1
 8006eec:	61f9      	str	r1, [r7, #28]
 8006eee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	09db      	lsrs	r3, r3, #7
 8006efa:	61bb      	str	r3, [r7, #24]
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	2b7f      	cmp	r3, #127	; 0x7f
 8006f00:	d8f0      	bhi.n	8006ee4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	61fa      	str	r2, [r7, #28]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006f12:	2215      	movs	r2, #21
 8006f14:	68f9      	ldr	r1, [r7, #12]
 8006f16:	6938      	ldr	r0, [r7, #16]
 8006f18:	f7fe fe6a 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f383 8811 	msr	BASEPRI, r3
}
 8006f22:	bf00      	nop
 8006f24:	3748      	adds	r7, #72	; 0x48
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	2001446c 	.word	0x2001446c
 8006f30:	2001443c 	.word	0x2001443c

08006f34 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006f38:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d008      	beq.n	8006f52 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006f40:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006f4a:	4b03      	ldr	r3, [pc, #12]	; (8006f58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	4798      	blx	r3
  }
}
 8006f52:	bf00      	nop
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	2001443c 	.word	0x2001443c

08006f5c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f64:	f3ef 8311 	mrs	r3, BASEPRI
 8006f68:	f04f 0120 	mov.w	r1, #32
 8006f6c:	f381 8811 	msr	BASEPRI, r1
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	480b      	ldr	r0, [pc, #44]	; (8006fa0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006f74:	f7fe fd4c 	bl	8005a10 <_PreparePacket>
 8006f78:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f7a:	2280      	movs	r2, #128	; 0x80
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	6938      	ldr	r0, [r7, #16]
 8006f80:	f7fe fd16 	bl	80059b0 <_EncodeStr>
 8006f84:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006f86:	220e      	movs	r2, #14
 8006f88:	68f9      	ldr	r1, [r7, #12]
 8006f8a:	6938      	ldr	r0, [r7, #16]
 8006f8c:	f7fe fe30 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f383 8811 	msr	BASEPRI, r3
}
 8006f96:	bf00      	nop
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	2001446c 	.word	0x2001446c

08006fa4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006fa4:	b590      	push	{r4, r7, lr}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006faa:	4b15      	ldr	r3, [pc, #84]	; (8007000 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d01a      	beq.n	8006fe8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006fb2:	4b13      	ldr	r3, [pc, #76]	; (8007000 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d015      	beq.n	8006fe8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006fbc:	4b10      	ldr	r3, [pc, #64]	; (8007000 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4798      	blx	r3
 8006fc4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006fc8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006fca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	000a      	movs	r2, r1
 8006fd8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006fda:	4613      	mov	r3, r2
 8006fdc:	461a      	mov	r2, r3
 8006fde:	4621      	mov	r1, r4
 8006fe0:	200d      	movs	r0, #13
 8006fe2:	f7ff fbe5 	bl	80067b0 <SEGGER_SYSVIEW_RecordU32x2>
 8006fe6:	e006      	b.n	8006ff6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006fe8:	4b06      	ldr	r3, [pc, #24]	; (8007004 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4619      	mov	r1, r3
 8006fee:	200c      	movs	r0, #12
 8006ff0:	f7ff fba2 	bl	8006738 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd90      	pop	{r4, r7, pc}
 8006ffe:	bf00      	nop
 8007000:	2001443c 	.word	0x2001443c
 8007004:	e0001004 	.word	0xe0001004

08007008 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800700e:	f3ef 8311 	mrs	r3, BASEPRI
 8007012:	f04f 0120 	mov.w	r1, #32
 8007016:	f381 8811 	msr	BASEPRI, r1
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	4819      	ldr	r0, [pc, #100]	; (8007084 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800701e:	f7fe fcf7 	bl	8005a10 <_PreparePacket>
 8007022:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007028:	4b17      	ldr	r3, [pc, #92]	; (8007088 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007030:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	e00b      	b.n	8007054 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	b2da      	uxtb	r2, r3
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	1c59      	adds	r1, r3, #1
 8007044:	6179      	str	r1, [r7, #20]
 8007046:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800704a:	b2d2      	uxtb	r2, r2
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	09db      	lsrs	r3, r3, #7
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2b7f      	cmp	r3, #127	; 0x7f
 8007058:	d8f0      	bhi.n	800703c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	617a      	str	r2, [r7, #20]
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	b2d2      	uxtb	r2, r2
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800706a:	2202      	movs	r2, #2
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	68b8      	ldr	r0, [r7, #8]
 8007070:	f7fe fdbe 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f383 8811 	msr	BASEPRI, r3
}
 800707a:	bf00      	nop
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	2001446c 	.word	0x2001446c
 8007088:	e000ed04 	.word	0xe000ed04

0800708c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007092:	f3ef 8311 	mrs	r3, BASEPRI
 8007096:	f04f 0120 	mov.w	r1, #32
 800709a:	f381 8811 	msr	BASEPRI, r1
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	4807      	ldr	r0, [pc, #28]	; (80070c0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80070a2:	f7fe fcb5 	bl	8005a10 <_PreparePacket>
 80070a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80070a8:	2203      	movs	r2, #3
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6838      	ldr	r0, [r7, #0]
 80070ae:	f7fe fd9f 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f383 8811 	msr	BASEPRI, r3
}
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	2001446c 	.word	0x2001446c

080070c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80070ca:	f3ef 8311 	mrs	r3, BASEPRI
 80070ce:	f04f 0120 	mov.w	r1, #32
 80070d2:	f381 8811 	msr	BASEPRI, r1
 80070d6:	607b      	str	r3, [r7, #4]
 80070d8:	4807      	ldr	r0, [pc, #28]	; (80070f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80070da:	f7fe fc99 	bl	8005a10 <_PreparePacket>
 80070de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80070e0:	2212      	movs	r2, #18
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6838      	ldr	r0, [r7, #0]
 80070e6:	f7fe fd83 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f383 8811 	msr	BASEPRI, r3
}
 80070f0:	bf00      	nop
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	2001446c 	.word	0x2001446c

080070fc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007102:	f3ef 8311 	mrs	r3, BASEPRI
 8007106:	f04f 0120 	mov.w	r1, #32
 800710a:	f381 8811 	msr	BASEPRI, r1
 800710e:	607b      	str	r3, [r7, #4]
 8007110:	4807      	ldr	r0, [pc, #28]	; (8007130 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007112:	f7fe fc7d 	bl	8005a10 <_PreparePacket>
 8007116:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007118:	2211      	movs	r2, #17
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6838      	ldr	r0, [r7, #0]
 800711e:	f7fe fd67 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f383 8811 	msr	BASEPRI, r3
}
 8007128:	bf00      	nop
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	2001446c 	.word	0x2001446c

08007134 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800713c:	f3ef 8311 	mrs	r3, BASEPRI
 8007140:	f04f 0120 	mov.w	r1, #32
 8007144:	f381 8811 	msr	BASEPRI, r1
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	4819      	ldr	r0, [pc, #100]	; (80071b0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800714c:	f7fe fc60 	bl	8005a10 <_PreparePacket>
 8007150:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007156:	4b17      	ldr	r3, [pc, #92]	; (80071b4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	61fb      	str	r3, [r7, #28]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	61bb      	str	r3, [r7, #24]
 8007168:	e00b      	b.n	8007182 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	b2da      	uxtb	r2, r3
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	1c59      	adds	r1, r3, #1
 8007172:	61f9      	str	r1, [r7, #28]
 8007174:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	09db      	lsrs	r3, r3, #7
 8007180:	61bb      	str	r3, [r7, #24]
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b7f      	cmp	r3, #127	; 0x7f
 8007186:	d8f0      	bhi.n	800716a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	61fa      	str	r2, [r7, #28]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	b2d2      	uxtb	r2, r2
 8007192:	701a      	strb	r2, [r3, #0]
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007198:	2208      	movs	r2, #8
 800719a:	68f9      	ldr	r1, [r7, #12]
 800719c:	6938      	ldr	r0, [r7, #16]
 800719e:	f7fe fd27 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f383 8811 	msr	BASEPRI, r3
}
 80071a8:	bf00      	nop
 80071aa:	3720      	adds	r7, #32
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	2001446c 	.word	0x2001446c
 80071b4:	2001443c 	.word	0x2001443c

080071b8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071c0:	f3ef 8311 	mrs	r3, BASEPRI
 80071c4:	f04f 0120 	mov.w	r1, #32
 80071c8:	f381 8811 	msr	BASEPRI, r1
 80071cc:	617b      	str	r3, [r7, #20]
 80071ce:	4819      	ldr	r0, [pc, #100]	; (8007234 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80071d0:	f7fe fc1e 	bl	8005a10 <_PreparePacket>
 80071d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80071da:	4b17      	ldr	r3, [pc, #92]	; (8007238 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	61fb      	str	r3, [r7, #28]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	61bb      	str	r3, [r7, #24]
 80071ec:	e00b      	b.n	8007206 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	1c59      	adds	r1, r3, #1
 80071f6:	61f9      	str	r1, [r7, #28]
 80071f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071fc:	b2d2      	uxtb	r2, r2
 80071fe:	701a      	strb	r2, [r3, #0]
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	09db      	lsrs	r3, r3, #7
 8007204:	61bb      	str	r3, [r7, #24]
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b7f      	cmp	r3, #127	; 0x7f
 800720a:	d8f0      	bhi.n	80071ee <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	61fa      	str	r2, [r7, #28]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	b2d2      	uxtb	r2, r2
 8007216:	701a      	strb	r2, [r3, #0]
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800721c:	2204      	movs	r2, #4
 800721e:	68f9      	ldr	r1, [r7, #12]
 8007220:	6938      	ldr	r0, [r7, #16]
 8007222:	f7fe fce5 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f383 8811 	msr	BASEPRI, r3
}
 800722c:	bf00      	nop
 800722e:	3720      	adds	r7, #32
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	2001446c 	.word	0x2001446c
 8007238:	2001443c 	.word	0x2001443c

0800723c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007244:	f3ef 8311 	mrs	r3, BASEPRI
 8007248:	f04f 0120 	mov.w	r1, #32
 800724c:	f381 8811 	msr	BASEPRI, r1
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	4819      	ldr	r0, [pc, #100]	; (80072b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007254:	f7fe fbdc 	bl	8005a10 <_PreparePacket>
 8007258:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800725e:	4b17      	ldr	r3, [pc, #92]	; (80072bc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	61fb      	str	r3, [r7, #28]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	61bb      	str	r3, [r7, #24]
 8007270:	e00b      	b.n	800728a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	b2da      	uxtb	r2, r3
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	1c59      	adds	r1, r3, #1
 800727a:	61f9      	str	r1, [r7, #28]
 800727c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007280:	b2d2      	uxtb	r2, r2
 8007282:	701a      	strb	r2, [r3, #0]
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	09db      	lsrs	r3, r3, #7
 8007288:	61bb      	str	r3, [r7, #24]
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	2b7f      	cmp	r3, #127	; 0x7f
 800728e:	d8f0      	bhi.n	8007272 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	1c5a      	adds	r2, r3, #1
 8007294:	61fa      	str	r2, [r7, #28]
 8007296:	69ba      	ldr	r2, [r7, #24]
 8007298:	b2d2      	uxtb	r2, r2
 800729a:	701a      	strb	r2, [r3, #0]
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80072a0:	2206      	movs	r2, #6
 80072a2:	68f9      	ldr	r1, [r7, #12]
 80072a4:	6938      	ldr	r0, [r7, #16]
 80072a6:	f7fe fca3 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f383 8811 	msr	BASEPRI, r3
}
 80072b0:	bf00      	nop
 80072b2:	3720      	adds	r7, #32
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	2001446c 	.word	0x2001446c
 80072bc:	2001443c 	.word	0x2001443c

080072c0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80072c8:	4b04      	ldr	r3, [pc, #16]	; (80072dc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	1ad3      	subs	r3, r2, r3
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	2001443c 	.word	0x2001443c

080072e0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08c      	sub	sp, #48	; 0x30
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80072ea:	4b40      	ldr	r3, [pc, #256]	; (80073ec <SEGGER_SYSVIEW_SendModule+0x10c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d077      	beq.n	80073e2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80072f2:	4b3e      	ldr	r3, [pc, #248]	; (80073ec <SEGGER_SYSVIEW_SendModule+0x10c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80072f8:	2300      	movs	r3, #0
 80072fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80072fc:	e008      	b.n	8007310 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d007      	beq.n	800731a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	3301      	adds	r3, #1
 800730e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007310:	79fb      	ldrb	r3, [r7, #7]
 8007312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007314:	429a      	cmp	r2, r3
 8007316:	d3f2      	bcc.n	80072fe <SEGGER_SYSVIEW_SendModule+0x1e>
 8007318:	e000      	b.n	800731c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800731a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800731c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731e:	2b00      	cmp	r3, #0
 8007320:	d055      	beq.n	80073ce <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007322:	f3ef 8311 	mrs	r3, BASEPRI
 8007326:	f04f 0120 	mov.w	r1, #32
 800732a:	f381 8811 	msr	BASEPRI, r1
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	482f      	ldr	r0, [pc, #188]	; (80073f0 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007332:	f7fe fb6d 	bl	8005a10 <_PreparePacket>
 8007336:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
 8007340:	79fb      	ldrb	r3, [r7, #7]
 8007342:	623b      	str	r3, [r7, #32]
 8007344:	e00b      	b.n	800735e <SEGGER_SYSVIEW_SendModule+0x7e>
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	b2da      	uxtb	r2, r3
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	1c59      	adds	r1, r3, #1
 800734e:	6279      	str	r1, [r7, #36]	; 0x24
 8007350:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007354:	b2d2      	uxtb	r2, r2
 8007356:	701a      	strb	r2, [r3, #0]
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	09db      	lsrs	r3, r3, #7
 800735c:	623b      	str	r3, [r7, #32]
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	2b7f      	cmp	r3, #127	; 0x7f
 8007362:	d8f0      	bhi.n	8007346 <SEGGER_SYSVIEW_SendModule+0x66>
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	627a      	str	r2, [r7, #36]	; 0x24
 800736a:	6a3a      	ldr	r2, [r7, #32]
 800736c:	b2d2      	uxtb	r2, r2
 800736e:	701a      	strb	r2, [r3, #0]
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	61fb      	str	r3, [r7, #28]
 8007378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	61bb      	str	r3, [r7, #24]
 800737e:	e00b      	b.n	8007398 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	b2da      	uxtb	r2, r3
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	1c59      	adds	r1, r3, #1
 8007388:	61f9      	str	r1, [r7, #28]
 800738a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	09db      	lsrs	r3, r3, #7
 8007396:	61bb      	str	r3, [r7, #24]
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	2b7f      	cmp	r3, #127	; 0x7f
 800739c:	d8f0      	bhi.n	8007380 <SEGGER_SYSVIEW_SendModule+0xa0>
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	61fa      	str	r2, [r7, #28]
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	701a      	strb	r2, [r3, #0]
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2280      	movs	r2, #128	; 0x80
 80073b4:	4619      	mov	r1, r3
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7fe fafa 	bl	80059b0 <_EncodeStr>
 80073bc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80073be:	2216      	movs	r2, #22
 80073c0:	68f9      	ldr	r1, [r7, #12]
 80073c2:	6938      	ldr	r0, [r7, #16]
 80073c4:	f7fe fc14 	bl	8005bf0 <_SendPacket>
      RECORD_END();
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80073ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d006      	beq.n	80073e2 <SEGGER_SYSVIEW_SendModule+0x102>
 80073d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80073dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	4798      	blx	r3
    }
  }
}
 80073e2:	bf00      	nop
 80073e4:	3730      	adds	r7, #48	; 0x30
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20014464 	.word	0x20014464
 80073f0:	2001446c 	.word	0x2001446c

080073f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80073fa:	4b0c      	ldr	r3, [pc, #48]	; (800742c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00f      	beq.n	8007422 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007402:	4b0a      	ldr	r3, [pc, #40]	; (800742c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1f2      	bne.n	8007408 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007422:	bf00      	nop
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20014464 	.word	0x20014464

08007430 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007436:	f3ef 8311 	mrs	r3, BASEPRI
 800743a:	f04f 0120 	mov.w	r1, #32
 800743e:	f381 8811 	msr	BASEPRI, r1
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	4817      	ldr	r0, [pc, #92]	; (80074a4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007446:	f7fe fae3 	bl	8005a10 <_PreparePacket>
 800744a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	4b14      	ldr	r3, [pc, #80]	; (80074a8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	613b      	str	r3, [r7, #16]
 800745a:	e00b      	b.n	8007474 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	b2da      	uxtb	r2, r3
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	1c59      	adds	r1, r3, #1
 8007464:	6179      	str	r1, [r7, #20]
 8007466:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800746a:	b2d2      	uxtb	r2, r2
 800746c:	701a      	strb	r2, [r3, #0]
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	09db      	lsrs	r3, r3, #7
 8007472:	613b      	str	r3, [r7, #16]
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	2b7f      	cmp	r3, #127	; 0x7f
 8007478:	d8f0      	bhi.n	800745c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	617a      	str	r2, [r7, #20]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	b2d2      	uxtb	r2, r2
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800748a:	221b      	movs	r2, #27
 800748c:	6879      	ldr	r1, [r7, #4]
 800748e:	68b8      	ldr	r0, [r7, #8]
 8007490:	f7fe fbae 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f383 8811 	msr	BASEPRI, r3
}
 800749a:	bf00      	nop
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	2001446c 	.word	0x2001446c
 80074a8:	20014468 	.word	0x20014468

080074ac <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80074ac:	b40f      	push	{r0, r1, r2, r3}
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80074b4:	f107 0314 	add.w	r3, r7, #20
 80074b8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80074ba:	1d3b      	adds	r3, r7, #4
 80074bc:	461a      	mov	r2, r3
 80074be:	2100      	movs	r1, #0
 80074c0:	6938      	ldr	r0, [r7, #16]
 80074c2:	f7fe fea7 	bl	8006214 <_VPrintTarget>
  va_end(ParamList);
}
 80074c6:	bf00      	nop
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074d0:	b004      	add	sp, #16
 80074d2:	4770      	bx	lr

080074d4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08a      	sub	sp, #40	; 0x28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074dc:	f3ef 8311 	mrs	r3, BASEPRI
 80074e0:	f04f 0120 	mov.w	r1, #32
 80074e4:	f381 8811 	msr	BASEPRI, r1
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	4827      	ldr	r0, [pc, #156]	; (8007588 <SEGGER_SYSVIEW_Warn+0xb4>)
 80074ec:	f7fe fa90 	bl	8005a10 <_PreparePacket>
 80074f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074f2:	2280      	movs	r2, #128	; 0x80
 80074f4:	6879      	ldr	r1, [r7, #4]
 80074f6:	6938      	ldr	r0, [r7, #16]
 80074f8:	f7fe fa5a 	bl	80059b0 <_EncodeStr>
 80074fc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	627b      	str	r3, [r7, #36]	; 0x24
 8007502:	2301      	movs	r3, #1
 8007504:	623b      	str	r3, [r7, #32]
 8007506:	e00b      	b.n	8007520 <SEGGER_SYSVIEW_Warn+0x4c>
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	b2da      	uxtb	r2, r3
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	1c59      	adds	r1, r3, #1
 8007510:	6279      	str	r1, [r7, #36]	; 0x24
 8007512:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	09db      	lsrs	r3, r3, #7
 800751e:	623b      	str	r3, [r7, #32]
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	2b7f      	cmp	r3, #127	; 0x7f
 8007524:	d8f0      	bhi.n	8007508 <SEGGER_SYSVIEW_Warn+0x34>
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	627a      	str	r2, [r7, #36]	; 0x24
 800752c:	6a3a      	ldr	r2, [r7, #32]
 800752e:	b2d2      	uxtb	r2, r2
 8007530:	701a      	strb	r2, [r3, #0]
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	61fb      	str	r3, [r7, #28]
 800753a:	2300      	movs	r3, #0
 800753c:	61bb      	str	r3, [r7, #24]
 800753e:	e00b      	b.n	8007558 <SEGGER_SYSVIEW_Warn+0x84>
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	b2da      	uxtb	r2, r3
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	1c59      	adds	r1, r3, #1
 8007548:	61f9      	str	r1, [r7, #28]
 800754a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800754e:	b2d2      	uxtb	r2, r2
 8007550:	701a      	strb	r2, [r3, #0]
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	09db      	lsrs	r3, r3, #7
 8007556:	61bb      	str	r3, [r7, #24]
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	2b7f      	cmp	r3, #127	; 0x7f
 800755c:	d8f0      	bhi.n	8007540 <SEGGER_SYSVIEW_Warn+0x6c>
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	61fa      	str	r2, [r7, #28]
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800756e:	221a      	movs	r2, #26
 8007570:	68f9      	ldr	r1, [r7, #12]
 8007572:	6938      	ldr	r0, [r7, #16]
 8007574:	f7fe fb3c 	bl	8005bf0 <_SendPacket>
  RECORD_END();
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f383 8811 	msr	BASEPRI, r3
}
 800757e:	bf00      	nop
 8007580:	3728      	adds	r7, #40	; 0x28
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	2001446c 	.word	0x2001446c

0800758c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007590:	4b13      	ldr	r3, [pc, #76]	; (80075e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007592:	7e1b      	ldrb	r3, [r3, #24]
 8007594:	4619      	mov	r1, r3
 8007596:	4a13      	ldr	r2, [pc, #76]	; (80075e4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007598:	460b      	mov	r3, r1
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	440b      	add	r3, r1
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	4413      	add	r3, r2
 80075a2:	336c      	adds	r3, #108	; 0x6c
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	4b0e      	ldr	r3, [pc, #56]	; (80075e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075a8:	7e1b      	ldrb	r3, [r3, #24]
 80075aa:	4618      	mov	r0, r3
 80075ac:	490d      	ldr	r1, [pc, #52]	; (80075e4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80075ae:	4603      	mov	r3, r0
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	4403      	add	r3, r0
 80075b4:	00db      	lsls	r3, r3, #3
 80075b6:	440b      	add	r3, r1
 80075b8:	3370      	adds	r3, #112	; 0x70
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d00b      	beq.n	80075d8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80075c0:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075c2:	789b      	ldrb	r3, [r3, #2]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d107      	bne.n	80075d8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80075c8:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80075ce:	f7fe fa2b 	bl	8005a28 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80075d2:	4b03      	ldr	r3, [pc, #12]	; (80075e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80075d8:	4b01      	ldr	r3, [pc, #4]	; (80075e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075da:	781b      	ldrb	r3, [r3, #0]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	2001443c 	.word	0x2001443c
 80075e4:	20012f7c 	.word	0x20012f7c

080075e8 <__libc_init_array>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	4d0d      	ldr	r5, [pc, #52]	; (8007620 <__libc_init_array+0x38>)
 80075ec:	4c0d      	ldr	r4, [pc, #52]	; (8007624 <__libc_init_array+0x3c>)
 80075ee:	1b64      	subs	r4, r4, r5
 80075f0:	10a4      	asrs	r4, r4, #2
 80075f2:	2600      	movs	r6, #0
 80075f4:	42a6      	cmp	r6, r4
 80075f6:	d109      	bne.n	800760c <__libc_init_array+0x24>
 80075f8:	4d0b      	ldr	r5, [pc, #44]	; (8007628 <__libc_init_array+0x40>)
 80075fa:	4c0c      	ldr	r4, [pc, #48]	; (800762c <__libc_init_array+0x44>)
 80075fc:	f000 fcc0 	bl	8007f80 <_init>
 8007600:	1b64      	subs	r4, r4, r5
 8007602:	10a4      	asrs	r4, r4, #2
 8007604:	2600      	movs	r6, #0
 8007606:	42a6      	cmp	r6, r4
 8007608:	d105      	bne.n	8007616 <__libc_init_array+0x2e>
 800760a:	bd70      	pop	{r4, r5, r6, pc}
 800760c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007610:	4798      	blx	r3
 8007612:	3601      	adds	r6, #1
 8007614:	e7ee      	b.n	80075f4 <__libc_init_array+0xc>
 8007616:	f855 3b04 	ldr.w	r3, [r5], #4
 800761a:	4798      	blx	r3
 800761c:	3601      	adds	r6, #1
 800761e:	e7f2      	b.n	8007606 <__libc_init_array+0x1e>
 8007620:	0800814c 	.word	0x0800814c
 8007624:	0800814c 	.word	0x0800814c
 8007628:	0800814c 	.word	0x0800814c
 800762c:	08008150 	.word	0x08008150

08007630 <memcmp>:
 8007630:	b510      	push	{r4, lr}
 8007632:	3901      	subs	r1, #1
 8007634:	4402      	add	r2, r0
 8007636:	4290      	cmp	r0, r2
 8007638:	d101      	bne.n	800763e <memcmp+0xe>
 800763a:	2000      	movs	r0, #0
 800763c:	e005      	b.n	800764a <memcmp+0x1a>
 800763e:	7803      	ldrb	r3, [r0, #0]
 8007640:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007644:	42a3      	cmp	r3, r4
 8007646:	d001      	beq.n	800764c <memcmp+0x1c>
 8007648:	1b18      	subs	r0, r3, r4
 800764a:	bd10      	pop	{r4, pc}
 800764c:	3001      	adds	r0, #1
 800764e:	e7f2      	b.n	8007636 <memcmp+0x6>

08007650 <memcpy>:
 8007650:	440a      	add	r2, r1
 8007652:	4291      	cmp	r1, r2
 8007654:	f100 33ff 	add.w	r3, r0, #4294967295
 8007658:	d100      	bne.n	800765c <memcpy+0xc>
 800765a:	4770      	bx	lr
 800765c:	b510      	push	{r4, lr}
 800765e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007666:	4291      	cmp	r1, r2
 8007668:	d1f9      	bne.n	800765e <memcpy+0xe>
 800766a:	bd10      	pop	{r4, pc}

0800766c <memset>:
 800766c:	4402      	add	r2, r0
 800766e:	4603      	mov	r3, r0
 8007670:	4293      	cmp	r3, r2
 8007672:	d100      	bne.n	8007676 <memset+0xa>
 8007674:	4770      	bx	lr
 8007676:	f803 1b01 	strb.w	r1, [r3], #1
 800767a:	e7f9      	b.n	8007670 <memset+0x4>

0800767c <sniprintf>:
 800767c:	b40c      	push	{r2, r3}
 800767e:	b530      	push	{r4, r5, lr}
 8007680:	4b17      	ldr	r3, [pc, #92]	; (80076e0 <sniprintf+0x64>)
 8007682:	1e0c      	subs	r4, r1, #0
 8007684:	681d      	ldr	r5, [r3, #0]
 8007686:	b09d      	sub	sp, #116	; 0x74
 8007688:	da08      	bge.n	800769c <sniprintf+0x20>
 800768a:	238b      	movs	r3, #139	; 0x8b
 800768c:	602b      	str	r3, [r5, #0]
 800768e:	f04f 30ff 	mov.w	r0, #4294967295
 8007692:	b01d      	add	sp, #116	; 0x74
 8007694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007698:	b002      	add	sp, #8
 800769a:	4770      	bx	lr
 800769c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80076a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076a4:	bf14      	ite	ne
 80076a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80076aa:	4623      	moveq	r3, r4
 80076ac:	9304      	str	r3, [sp, #16]
 80076ae:	9307      	str	r3, [sp, #28]
 80076b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076b4:	9002      	str	r0, [sp, #8]
 80076b6:	9006      	str	r0, [sp, #24]
 80076b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076be:	ab21      	add	r3, sp, #132	; 0x84
 80076c0:	a902      	add	r1, sp, #8
 80076c2:	4628      	mov	r0, r5
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	f000 f869 	bl	800779c <_svfiprintf_r>
 80076ca:	1c43      	adds	r3, r0, #1
 80076cc:	bfbc      	itt	lt
 80076ce:	238b      	movlt	r3, #139	; 0x8b
 80076d0:	602b      	strlt	r3, [r5, #0]
 80076d2:	2c00      	cmp	r4, #0
 80076d4:	d0dd      	beq.n	8007692 <sniprintf+0x16>
 80076d6:	9b02      	ldr	r3, [sp, #8]
 80076d8:	2200      	movs	r2, #0
 80076da:	701a      	strb	r2, [r3, #0]
 80076dc:	e7d9      	b.n	8007692 <sniprintf+0x16>
 80076de:	bf00      	nop
 80076e0:	2000001c 	.word	0x2000001c

080076e4 <__ssputs_r>:
 80076e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e8:	688e      	ldr	r6, [r1, #8]
 80076ea:	429e      	cmp	r6, r3
 80076ec:	4682      	mov	sl, r0
 80076ee:	460c      	mov	r4, r1
 80076f0:	4690      	mov	r8, r2
 80076f2:	461f      	mov	r7, r3
 80076f4:	d838      	bhi.n	8007768 <__ssputs_r+0x84>
 80076f6:	898a      	ldrh	r2, [r1, #12]
 80076f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076fc:	d032      	beq.n	8007764 <__ssputs_r+0x80>
 80076fe:	6825      	ldr	r5, [r4, #0]
 8007700:	6909      	ldr	r1, [r1, #16]
 8007702:	eba5 0901 	sub.w	r9, r5, r1
 8007706:	6965      	ldr	r5, [r4, #20]
 8007708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800770c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007710:	3301      	adds	r3, #1
 8007712:	444b      	add	r3, r9
 8007714:	106d      	asrs	r5, r5, #1
 8007716:	429d      	cmp	r5, r3
 8007718:	bf38      	it	cc
 800771a:	461d      	movcc	r5, r3
 800771c:	0553      	lsls	r3, r2, #21
 800771e:	d531      	bpl.n	8007784 <__ssputs_r+0xa0>
 8007720:	4629      	mov	r1, r5
 8007722:	f000 fb55 	bl	8007dd0 <_malloc_r>
 8007726:	4606      	mov	r6, r0
 8007728:	b950      	cbnz	r0, 8007740 <__ssputs_r+0x5c>
 800772a:	230c      	movs	r3, #12
 800772c:	f8ca 3000 	str.w	r3, [sl]
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007736:	81a3      	strh	r3, [r4, #12]
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007740:	6921      	ldr	r1, [r4, #16]
 8007742:	464a      	mov	r2, r9
 8007744:	f7ff ff84 	bl	8007650 <memcpy>
 8007748:	89a3      	ldrh	r3, [r4, #12]
 800774a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800774e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007752:	81a3      	strh	r3, [r4, #12]
 8007754:	6126      	str	r6, [r4, #16]
 8007756:	6165      	str	r5, [r4, #20]
 8007758:	444e      	add	r6, r9
 800775a:	eba5 0509 	sub.w	r5, r5, r9
 800775e:	6026      	str	r6, [r4, #0]
 8007760:	60a5      	str	r5, [r4, #8]
 8007762:	463e      	mov	r6, r7
 8007764:	42be      	cmp	r6, r7
 8007766:	d900      	bls.n	800776a <__ssputs_r+0x86>
 8007768:	463e      	mov	r6, r7
 800776a:	6820      	ldr	r0, [r4, #0]
 800776c:	4632      	mov	r2, r6
 800776e:	4641      	mov	r1, r8
 8007770:	f000 faa8 	bl	8007cc4 <memmove>
 8007774:	68a3      	ldr	r3, [r4, #8]
 8007776:	1b9b      	subs	r3, r3, r6
 8007778:	60a3      	str	r3, [r4, #8]
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	4433      	add	r3, r6
 800777e:	6023      	str	r3, [r4, #0]
 8007780:	2000      	movs	r0, #0
 8007782:	e7db      	b.n	800773c <__ssputs_r+0x58>
 8007784:	462a      	mov	r2, r5
 8007786:	f000 fb97 	bl	8007eb8 <_realloc_r>
 800778a:	4606      	mov	r6, r0
 800778c:	2800      	cmp	r0, #0
 800778e:	d1e1      	bne.n	8007754 <__ssputs_r+0x70>
 8007790:	6921      	ldr	r1, [r4, #16]
 8007792:	4650      	mov	r0, sl
 8007794:	f000 fab0 	bl	8007cf8 <_free_r>
 8007798:	e7c7      	b.n	800772a <__ssputs_r+0x46>
	...

0800779c <_svfiprintf_r>:
 800779c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a0:	4698      	mov	r8, r3
 80077a2:	898b      	ldrh	r3, [r1, #12]
 80077a4:	061b      	lsls	r3, r3, #24
 80077a6:	b09d      	sub	sp, #116	; 0x74
 80077a8:	4607      	mov	r7, r0
 80077aa:	460d      	mov	r5, r1
 80077ac:	4614      	mov	r4, r2
 80077ae:	d50e      	bpl.n	80077ce <_svfiprintf_r+0x32>
 80077b0:	690b      	ldr	r3, [r1, #16]
 80077b2:	b963      	cbnz	r3, 80077ce <_svfiprintf_r+0x32>
 80077b4:	2140      	movs	r1, #64	; 0x40
 80077b6:	f000 fb0b 	bl	8007dd0 <_malloc_r>
 80077ba:	6028      	str	r0, [r5, #0]
 80077bc:	6128      	str	r0, [r5, #16]
 80077be:	b920      	cbnz	r0, 80077ca <_svfiprintf_r+0x2e>
 80077c0:	230c      	movs	r3, #12
 80077c2:	603b      	str	r3, [r7, #0]
 80077c4:	f04f 30ff 	mov.w	r0, #4294967295
 80077c8:	e0d1      	b.n	800796e <_svfiprintf_r+0x1d2>
 80077ca:	2340      	movs	r3, #64	; 0x40
 80077cc:	616b      	str	r3, [r5, #20]
 80077ce:	2300      	movs	r3, #0
 80077d0:	9309      	str	r3, [sp, #36]	; 0x24
 80077d2:	2320      	movs	r3, #32
 80077d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80077dc:	2330      	movs	r3, #48	; 0x30
 80077de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007988 <_svfiprintf_r+0x1ec>
 80077e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077e6:	f04f 0901 	mov.w	r9, #1
 80077ea:	4623      	mov	r3, r4
 80077ec:	469a      	mov	sl, r3
 80077ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077f2:	b10a      	cbz	r2, 80077f8 <_svfiprintf_r+0x5c>
 80077f4:	2a25      	cmp	r2, #37	; 0x25
 80077f6:	d1f9      	bne.n	80077ec <_svfiprintf_r+0x50>
 80077f8:	ebba 0b04 	subs.w	fp, sl, r4
 80077fc:	d00b      	beq.n	8007816 <_svfiprintf_r+0x7a>
 80077fe:	465b      	mov	r3, fp
 8007800:	4622      	mov	r2, r4
 8007802:	4629      	mov	r1, r5
 8007804:	4638      	mov	r0, r7
 8007806:	f7ff ff6d 	bl	80076e4 <__ssputs_r>
 800780a:	3001      	adds	r0, #1
 800780c:	f000 80aa 	beq.w	8007964 <_svfiprintf_r+0x1c8>
 8007810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007812:	445a      	add	r2, fp
 8007814:	9209      	str	r2, [sp, #36]	; 0x24
 8007816:	f89a 3000 	ldrb.w	r3, [sl]
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 80a2 	beq.w	8007964 <_svfiprintf_r+0x1c8>
 8007820:	2300      	movs	r3, #0
 8007822:	f04f 32ff 	mov.w	r2, #4294967295
 8007826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800782a:	f10a 0a01 	add.w	sl, sl, #1
 800782e:	9304      	str	r3, [sp, #16]
 8007830:	9307      	str	r3, [sp, #28]
 8007832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007836:	931a      	str	r3, [sp, #104]	; 0x68
 8007838:	4654      	mov	r4, sl
 800783a:	2205      	movs	r2, #5
 800783c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007840:	4851      	ldr	r0, [pc, #324]	; (8007988 <_svfiprintf_r+0x1ec>)
 8007842:	f7f8 fd35 	bl	80002b0 <memchr>
 8007846:	9a04      	ldr	r2, [sp, #16]
 8007848:	b9d8      	cbnz	r0, 8007882 <_svfiprintf_r+0xe6>
 800784a:	06d0      	lsls	r0, r2, #27
 800784c:	bf44      	itt	mi
 800784e:	2320      	movmi	r3, #32
 8007850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007854:	0711      	lsls	r1, r2, #28
 8007856:	bf44      	itt	mi
 8007858:	232b      	movmi	r3, #43	; 0x2b
 800785a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800785e:	f89a 3000 	ldrb.w	r3, [sl]
 8007862:	2b2a      	cmp	r3, #42	; 0x2a
 8007864:	d015      	beq.n	8007892 <_svfiprintf_r+0xf6>
 8007866:	9a07      	ldr	r2, [sp, #28]
 8007868:	4654      	mov	r4, sl
 800786a:	2000      	movs	r0, #0
 800786c:	f04f 0c0a 	mov.w	ip, #10
 8007870:	4621      	mov	r1, r4
 8007872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007876:	3b30      	subs	r3, #48	; 0x30
 8007878:	2b09      	cmp	r3, #9
 800787a:	d94e      	bls.n	800791a <_svfiprintf_r+0x17e>
 800787c:	b1b0      	cbz	r0, 80078ac <_svfiprintf_r+0x110>
 800787e:	9207      	str	r2, [sp, #28]
 8007880:	e014      	b.n	80078ac <_svfiprintf_r+0x110>
 8007882:	eba0 0308 	sub.w	r3, r0, r8
 8007886:	fa09 f303 	lsl.w	r3, r9, r3
 800788a:	4313      	orrs	r3, r2
 800788c:	9304      	str	r3, [sp, #16]
 800788e:	46a2      	mov	sl, r4
 8007890:	e7d2      	b.n	8007838 <_svfiprintf_r+0x9c>
 8007892:	9b03      	ldr	r3, [sp, #12]
 8007894:	1d19      	adds	r1, r3, #4
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	9103      	str	r1, [sp, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	bfbb      	ittet	lt
 800789e:	425b      	neglt	r3, r3
 80078a0:	f042 0202 	orrlt.w	r2, r2, #2
 80078a4:	9307      	strge	r3, [sp, #28]
 80078a6:	9307      	strlt	r3, [sp, #28]
 80078a8:	bfb8      	it	lt
 80078aa:	9204      	strlt	r2, [sp, #16]
 80078ac:	7823      	ldrb	r3, [r4, #0]
 80078ae:	2b2e      	cmp	r3, #46	; 0x2e
 80078b0:	d10c      	bne.n	80078cc <_svfiprintf_r+0x130>
 80078b2:	7863      	ldrb	r3, [r4, #1]
 80078b4:	2b2a      	cmp	r3, #42	; 0x2a
 80078b6:	d135      	bne.n	8007924 <_svfiprintf_r+0x188>
 80078b8:	9b03      	ldr	r3, [sp, #12]
 80078ba:	1d1a      	adds	r2, r3, #4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	9203      	str	r2, [sp, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	bfb8      	it	lt
 80078c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80078c8:	3402      	adds	r4, #2
 80078ca:	9305      	str	r3, [sp, #20]
 80078cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007998 <_svfiprintf_r+0x1fc>
 80078d0:	7821      	ldrb	r1, [r4, #0]
 80078d2:	2203      	movs	r2, #3
 80078d4:	4650      	mov	r0, sl
 80078d6:	f7f8 fceb 	bl	80002b0 <memchr>
 80078da:	b140      	cbz	r0, 80078ee <_svfiprintf_r+0x152>
 80078dc:	2340      	movs	r3, #64	; 0x40
 80078de:	eba0 000a 	sub.w	r0, r0, sl
 80078e2:	fa03 f000 	lsl.w	r0, r3, r0
 80078e6:	9b04      	ldr	r3, [sp, #16]
 80078e8:	4303      	orrs	r3, r0
 80078ea:	3401      	adds	r4, #1
 80078ec:	9304      	str	r3, [sp, #16]
 80078ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f2:	4826      	ldr	r0, [pc, #152]	; (800798c <_svfiprintf_r+0x1f0>)
 80078f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078f8:	2206      	movs	r2, #6
 80078fa:	f7f8 fcd9 	bl	80002b0 <memchr>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d038      	beq.n	8007974 <_svfiprintf_r+0x1d8>
 8007902:	4b23      	ldr	r3, [pc, #140]	; (8007990 <_svfiprintf_r+0x1f4>)
 8007904:	bb1b      	cbnz	r3, 800794e <_svfiprintf_r+0x1b2>
 8007906:	9b03      	ldr	r3, [sp, #12]
 8007908:	3307      	adds	r3, #7
 800790a:	f023 0307 	bic.w	r3, r3, #7
 800790e:	3308      	adds	r3, #8
 8007910:	9303      	str	r3, [sp, #12]
 8007912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007914:	4433      	add	r3, r6
 8007916:	9309      	str	r3, [sp, #36]	; 0x24
 8007918:	e767      	b.n	80077ea <_svfiprintf_r+0x4e>
 800791a:	fb0c 3202 	mla	r2, ip, r2, r3
 800791e:	460c      	mov	r4, r1
 8007920:	2001      	movs	r0, #1
 8007922:	e7a5      	b.n	8007870 <_svfiprintf_r+0xd4>
 8007924:	2300      	movs	r3, #0
 8007926:	3401      	adds	r4, #1
 8007928:	9305      	str	r3, [sp, #20]
 800792a:	4619      	mov	r1, r3
 800792c:	f04f 0c0a 	mov.w	ip, #10
 8007930:	4620      	mov	r0, r4
 8007932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007936:	3a30      	subs	r2, #48	; 0x30
 8007938:	2a09      	cmp	r2, #9
 800793a:	d903      	bls.n	8007944 <_svfiprintf_r+0x1a8>
 800793c:	2b00      	cmp	r3, #0
 800793e:	d0c5      	beq.n	80078cc <_svfiprintf_r+0x130>
 8007940:	9105      	str	r1, [sp, #20]
 8007942:	e7c3      	b.n	80078cc <_svfiprintf_r+0x130>
 8007944:	fb0c 2101 	mla	r1, ip, r1, r2
 8007948:	4604      	mov	r4, r0
 800794a:	2301      	movs	r3, #1
 800794c:	e7f0      	b.n	8007930 <_svfiprintf_r+0x194>
 800794e:	ab03      	add	r3, sp, #12
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	462a      	mov	r2, r5
 8007954:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <_svfiprintf_r+0x1f8>)
 8007956:	a904      	add	r1, sp, #16
 8007958:	4638      	mov	r0, r7
 800795a:	f3af 8000 	nop.w
 800795e:	1c42      	adds	r2, r0, #1
 8007960:	4606      	mov	r6, r0
 8007962:	d1d6      	bne.n	8007912 <_svfiprintf_r+0x176>
 8007964:	89ab      	ldrh	r3, [r5, #12]
 8007966:	065b      	lsls	r3, r3, #25
 8007968:	f53f af2c 	bmi.w	80077c4 <_svfiprintf_r+0x28>
 800796c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800796e:	b01d      	add	sp, #116	; 0x74
 8007970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007974:	ab03      	add	r3, sp, #12
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	462a      	mov	r2, r5
 800797a:	4b06      	ldr	r3, [pc, #24]	; (8007994 <_svfiprintf_r+0x1f8>)
 800797c:	a904      	add	r1, sp, #16
 800797e:	4638      	mov	r0, r7
 8007980:	f000 f87a 	bl	8007a78 <_printf_i>
 8007984:	e7eb      	b.n	800795e <_svfiprintf_r+0x1c2>
 8007986:	bf00      	nop
 8007988:	08008110 	.word	0x08008110
 800798c:	0800811a 	.word	0x0800811a
 8007990:	00000000 	.word	0x00000000
 8007994:	080076e5 	.word	0x080076e5
 8007998:	08008116 	.word	0x08008116

0800799c <_printf_common>:
 800799c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a0:	4616      	mov	r6, r2
 80079a2:	4699      	mov	r9, r3
 80079a4:	688a      	ldr	r2, [r1, #8]
 80079a6:	690b      	ldr	r3, [r1, #16]
 80079a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079ac:	4293      	cmp	r3, r2
 80079ae:	bfb8      	it	lt
 80079b0:	4613      	movlt	r3, r2
 80079b2:	6033      	str	r3, [r6, #0]
 80079b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079b8:	4607      	mov	r7, r0
 80079ba:	460c      	mov	r4, r1
 80079bc:	b10a      	cbz	r2, 80079c2 <_printf_common+0x26>
 80079be:	3301      	adds	r3, #1
 80079c0:	6033      	str	r3, [r6, #0]
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	0699      	lsls	r1, r3, #26
 80079c6:	bf42      	ittt	mi
 80079c8:	6833      	ldrmi	r3, [r6, #0]
 80079ca:	3302      	addmi	r3, #2
 80079cc:	6033      	strmi	r3, [r6, #0]
 80079ce:	6825      	ldr	r5, [r4, #0]
 80079d0:	f015 0506 	ands.w	r5, r5, #6
 80079d4:	d106      	bne.n	80079e4 <_printf_common+0x48>
 80079d6:	f104 0a19 	add.w	sl, r4, #25
 80079da:	68e3      	ldr	r3, [r4, #12]
 80079dc:	6832      	ldr	r2, [r6, #0]
 80079de:	1a9b      	subs	r3, r3, r2
 80079e0:	42ab      	cmp	r3, r5
 80079e2:	dc26      	bgt.n	8007a32 <_printf_common+0x96>
 80079e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079e8:	1e13      	subs	r3, r2, #0
 80079ea:	6822      	ldr	r2, [r4, #0]
 80079ec:	bf18      	it	ne
 80079ee:	2301      	movne	r3, #1
 80079f0:	0692      	lsls	r2, r2, #26
 80079f2:	d42b      	bmi.n	8007a4c <_printf_common+0xb0>
 80079f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079f8:	4649      	mov	r1, r9
 80079fa:	4638      	mov	r0, r7
 80079fc:	47c0      	blx	r8
 80079fe:	3001      	adds	r0, #1
 8007a00:	d01e      	beq.n	8007a40 <_printf_common+0xa4>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	68e5      	ldr	r5, [r4, #12]
 8007a06:	6832      	ldr	r2, [r6, #0]
 8007a08:	f003 0306 	and.w	r3, r3, #6
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	bf08      	it	eq
 8007a10:	1aad      	subeq	r5, r5, r2
 8007a12:	68a3      	ldr	r3, [r4, #8]
 8007a14:	6922      	ldr	r2, [r4, #16]
 8007a16:	bf0c      	ite	eq
 8007a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a1c:	2500      	movne	r5, #0
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	bfc4      	itt	gt
 8007a22:	1a9b      	subgt	r3, r3, r2
 8007a24:	18ed      	addgt	r5, r5, r3
 8007a26:	2600      	movs	r6, #0
 8007a28:	341a      	adds	r4, #26
 8007a2a:	42b5      	cmp	r5, r6
 8007a2c:	d11a      	bne.n	8007a64 <_printf_common+0xc8>
 8007a2e:	2000      	movs	r0, #0
 8007a30:	e008      	b.n	8007a44 <_printf_common+0xa8>
 8007a32:	2301      	movs	r3, #1
 8007a34:	4652      	mov	r2, sl
 8007a36:	4649      	mov	r1, r9
 8007a38:	4638      	mov	r0, r7
 8007a3a:	47c0      	blx	r8
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d103      	bne.n	8007a48 <_printf_common+0xac>
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a48:	3501      	adds	r5, #1
 8007a4a:	e7c6      	b.n	80079da <_printf_common+0x3e>
 8007a4c:	18e1      	adds	r1, r4, r3
 8007a4e:	1c5a      	adds	r2, r3, #1
 8007a50:	2030      	movs	r0, #48	; 0x30
 8007a52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a56:	4422      	add	r2, r4
 8007a58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a60:	3302      	adds	r3, #2
 8007a62:	e7c7      	b.n	80079f4 <_printf_common+0x58>
 8007a64:	2301      	movs	r3, #1
 8007a66:	4622      	mov	r2, r4
 8007a68:	4649      	mov	r1, r9
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	47c0      	blx	r8
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d0e6      	beq.n	8007a40 <_printf_common+0xa4>
 8007a72:	3601      	adds	r6, #1
 8007a74:	e7d9      	b.n	8007a2a <_printf_common+0x8e>
	...

08007a78 <_printf_i>:
 8007a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a7c:	7e0f      	ldrb	r7, [r1, #24]
 8007a7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a80:	2f78      	cmp	r7, #120	; 0x78
 8007a82:	4691      	mov	r9, r2
 8007a84:	4680      	mov	r8, r0
 8007a86:	460c      	mov	r4, r1
 8007a88:	469a      	mov	sl, r3
 8007a8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a8e:	d807      	bhi.n	8007aa0 <_printf_i+0x28>
 8007a90:	2f62      	cmp	r7, #98	; 0x62
 8007a92:	d80a      	bhi.n	8007aaa <_printf_i+0x32>
 8007a94:	2f00      	cmp	r7, #0
 8007a96:	f000 80d8 	beq.w	8007c4a <_printf_i+0x1d2>
 8007a9a:	2f58      	cmp	r7, #88	; 0x58
 8007a9c:	f000 80a3 	beq.w	8007be6 <_printf_i+0x16e>
 8007aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007aa8:	e03a      	b.n	8007b20 <_printf_i+0xa8>
 8007aaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007aae:	2b15      	cmp	r3, #21
 8007ab0:	d8f6      	bhi.n	8007aa0 <_printf_i+0x28>
 8007ab2:	a101      	add	r1, pc, #4	; (adr r1, 8007ab8 <_printf_i+0x40>)
 8007ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ab8:	08007b11 	.word	0x08007b11
 8007abc:	08007b25 	.word	0x08007b25
 8007ac0:	08007aa1 	.word	0x08007aa1
 8007ac4:	08007aa1 	.word	0x08007aa1
 8007ac8:	08007aa1 	.word	0x08007aa1
 8007acc:	08007aa1 	.word	0x08007aa1
 8007ad0:	08007b25 	.word	0x08007b25
 8007ad4:	08007aa1 	.word	0x08007aa1
 8007ad8:	08007aa1 	.word	0x08007aa1
 8007adc:	08007aa1 	.word	0x08007aa1
 8007ae0:	08007aa1 	.word	0x08007aa1
 8007ae4:	08007c31 	.word	0x08007c31
 8007ae8:	08007b55 	.word	0x08007b55
 8007aec:	08007c13 	.word	0x08007c13
 8007af0:	08007aa1 	.word	0x08007aa1
 8007af4:	08007aa1 	.word	0x08007aa1
 8007af8:	08007c53 	.word	0x08007c53
 8007afc:	08007aa1 	.word	0x08007aa1
 8007b00:	08007b55 	.word	0x08007b55
 8007b04:	08007aa1 	.word	0x08007aa1
 8007b08:	08007aa1 	.word	0x08007aa1
 8007b0c:	08007c1b 	.word	0x08007c1b
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	1d1a      	adds	r2, r3, #4
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	602a      	str	r2, [r5, #0]
 8007b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b20:	2301      	movs	r3, #1
 8007b22:	e0a3      	b.n	8007c6c <_printf_i+0x1f4>
 8007b24:	6820      	ldr	r0, [r4, #0]
 8007b26:	6829      	ldr	r1, [r5, #0]
 8007b28:	0606      	lsls	r6, r0, #24
 8007b2a:	f101 0304 	add.w	r3, r1, #4
 8007b2e:	d50a      	bpl.n	8007b46 <_printf_i+0xce>
 8007b30:	680e      	ldr	r6, [r1, #0]
 8007b32:	602b      	str	r3, [r5, #0]
 8007b34:	2e00      	cmp	r6, #0
 8007b36:	da03      	bge.n	8007b40 <_printf_i+0xc8>
 8007b38:	232d      	movs	r3, #45	; 0x2d
 8007b3a:	4276      	negs	r6, r6
 8007b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b40:	485e      	ldr	r0, [pc, #376]	; (8007cbc <_printf_i+0x244>)
 8007b42:	230a      	movs	r3, #10
 8007b44:	e019      	b.n	8007b7a <_printf_i+0x102>
 8007b46:	680e      	ldr	r6, [r1, #0]
 8007b48:	602b      	str	r3, [r5, #0]
 8007b4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b4e:	bf18      	it	ne
 8007b50:	b236      	sxthne	r6, r6
 8007b52:	e7ef      	b.n	8007b34 <_printf_i+0xbc>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	6820      	ldr	r0, [r4, #0]
 8007b58:	1d19      	adds	r1, r3, #4
 8007b5a:	6029      	str	r1, [r5, #0]
 8007b5c:	0601      	lsls	r1, r0, #24
 8007b5e:	d501      	bpl.n	8007b64 <_printf_i+0xec>
 8007b60:	681e      	ldr	r6, [r3, #0]
 8007b62:	e002      	b.n	8007b6a <_printf_i+0xf2>
 8007b64:	0646      	lsls	r6, r0, #25
 8007b66:	d5fb      	bpl.n	8007b60 <_printf_i+0xe8>
 8007b68:	881e      	ldrh	r6, [r3, #0]
 8007b6a:	4854      	ldr	r0, [pc, #336]	; (8007cbc <_printf_i+0x244>)
 8007b6c:	2f6f      	cmp	r7, #111	; 0x6f
 8007b6e:	bf0c      	ite	eq
 8007b70:	2308      	moveq	r3, #8
 8007b72:	230a      	movne	r3, #10
 8007b74:	2100      	movs	r1, #0
 8007b76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b7a:	6865      	ldr	r5, [r4, #4]
 8007b7c:	60a5      	str	r5, [r4, #8]
 8007b7e:	2d00      	cmp	r5, #0
 8007b80:	bfa2      	ittt	ge
 8007b82:	6821      	ldrge	r1, [r4, #0]
 8007b84:	f021 0104 	bicge.w	r1, r1, #4
 8007b88:	6021      	strge	r1, [r4, #0]
 8007b8a:	b90e      	cbnz	r6, 8007b90 <_printf_i+0x118>
 8007b8c:	2d00      	cmp	r5, #0
 8007b8e:	d04d      	beq.n	8007c2c <_printf_i+0x1b4>
 8007b90:	4615      	mov	r5, r2
 8007b92:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b96:	fb03 6711 	mls	r7, r3, r1, r6
 8007b9a:	5dc7      	ldrb	r7, [r0, r7]
 8007b9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ba0:	4637      	mov	r7, r6
 8007ba2:	42bb      	cmp	r3, r7
 8007ba4:	460e      	mov	r6, r1
 8007ba6:	d9f4      	bls.n	8007b92 <_printf_i+0x11a>
 8007ba8:	2b08      	cmp	r3, #8
 8007baa:	d10b      	bne.n	8007bc4 <_printf_i+0x14c>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	07de      	lsls	r6, r3, #31
 8007bb0:	d508      	bpl.n	8007bc4 <_printf_i+0x14c>
 8007bb2:	6923      	ldr	r3, [r4, #16]
 8007bb4:	6861      	ldr	r1, [r4, #4]
 8007bb6:	4299      	cmp	r1, r3
 8007bb8:	bfde      	ittt	le
 8007bba:	2330      	movle	r3, #48	; 0x30
 8007bbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bc4:	1b52      	subs	r2, r2, r5
 8007bc6:	6122      	str	r2, [r4, #16]
 8007bc8:	f8cd a000 	str.w	sl, [sp]
 8007bcc:	464b      	mov	r3, r9
 8007bce:	aa03      	add	r2, sp, #12
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	4640      	mov	r0, r8
 8007bd4:	f7ff fee2 	bl	800799c <_printf_common>
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d14c      	bne.n	8007c76 <_printf_i+0x1fe>
 8007bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007be0:	b004      	add	sp, #16
 8007be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be6:	4835      	ldr	r0, [pc, #212]	; (8007cbc <_printf_i+0x244>)
 8007be8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007bec:	6829      	ldr	r1, [r5, #0]
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bf4:	6029      	str	r1, [r5, #0]
 8007bf6:	061d      	lsls	r5, r3, #24
 8007bf8:	d514      	bpl.n	8007c24 <_printf_i+0x1ac>
 8007bfa:	07df      	lsls	r7, r3, #31
 8007bfc:	bf44      	itt	mi
 8007bfe:	f043 0320 	orrmi.w	r3, r3, #32
 8007c02:	6023      	strmi	r3, [r4, #0]
 8007c04:	b91e      	cbnz	r6, 8007c0e <_printf_i+0x196>
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	f023 0320 	bic.w	r3, r3, #32
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	2310      	movs	r3, #16
 8007c10:	e7b0      	b.n	8007b74 <_printf_i+0xfc>
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	f043 0320 	orr.w	r3, r3, #32
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	2378      	movs	r3, #120	; 0x78
 8007c1c:	4828      	ldr	r0, [pc, #160]	; (8007cc0 <_printf_i+0x248>)
 8007c1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c22:	e7e3      	b.n	8007bec <_printf_i+0x174>
 8007c24:	0659      	lsls	r1, r3, #25
 8007c26:	bf48      	it	mi
 8007c28:	b2b6      	uxthmi	r6, r6
 8007c2a:	e7e6      	b.n	8007bfa <_printf_i+0x182>
 8007c2c:	4615      	mov	r5, r2
 8007c2e:	e7bb      	b.n	8007ba8 <_printf_i+0x130>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	6826      	ldr	r6, [r4, #0]
 8007c34:	6961      	ldr	r1, [r4, #20]
 8007c36:	1d18      	adds	r0, r3, #4
 8007c38:	6028      	str	r0, [r5, #0]
 8007c3a:	0635      	lsls	r5, r6, #24
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	d501      	bpl.n	8007c44 <_printf_i+0x1cc>
 8007c40:	6019      	str	r1, [r3, #0]
 8007c42:	e002      	b.n	8007c4a <_printf_i+0x1d2>
 8007c44:	0670      	lsls	r0, r6, #25
 8007c46:	d5fb      	bpl.n	8007c40 <_printf_i+0x1c8>
 8007c48:	8019      	strh	r1, [r3, #0]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	6123      	str	r3, [r4, #16]
 8007c4e:	4615      	mov	r5, r2
 8007c50:	e7ba      	b.n	8007bc8 <_printf_i+0x150>
 8007c52:	682b      	ldr	r3, [r5, #0]
 8007c54:	1d1a      	adds	r2, r3, #4
 8007c56:	602a      	str	r2, [r5, #0]
 8007c58:	681d      	ldr	r5, [r3, #0]
 8007c5a:	6862      	ldr	r2, [r4, #4]
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f7f8 fb26 	bl	80002b0 <memchr>
 8007c64:	b108      	cbz	r0, 8007c6a <_printf_i+0x1f2>
 8007c66:	1b40      	subs	r0, r0, r5
 8007c68:	6060      	str	r0, [r4, #4]
 8007c6a:	6863      	ldr	r3, [r4, #4]
 8007c6c:	6123      	str	r3, [r4, #16]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c74:	e7a8      	b.n	8007bc8 <_printf_i+0x150>
 8007c76:	6923      	ldr	r3, [r4, #16]
 8007c78:	462a      	mov	r2, r5
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	47d0      	blx	sl
 8007c80:	3001      	adds	r0, #1
 8007c82:	d0ab      	beq.n	8007bdc <_printf_i+0x164>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	079b      	lsls	r3, r3, #30
 8007c88:	d413      	bmi.n	8007cb2 <_printf_i+0x23a>
 8007c8a:	68e0      	ldr	r0, [r4, #12]
 8007c8c:	9b03      	ldr	r3, [sp, #12]
 8007c8e:	4298      	cmp	r0, r3
 8007c90:	bfb8      	it	lt
 8007c92:	4618      	movlt	r0, r3
 8007c94:	e7a4      	b.n	8007be0 <_printf_i+0x168>
 8007c96:	2301      	movs	r3, #1
 8007c98:	4632      	mov	r2, r6
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	4640      	mov	r0, r8
 8007c9e:	47d0      	blx	sl
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d09b      	beq.n	8007bdc <_printf_i+0x164>
 8007ca4:	3501      	adds	r5, #1
 8007ca6:	68e3      	ldr	r3, [r4, #12]
 8007ca8:	9903      	ldr	r1, [sp, #12]
 8007caa:	1a5b      	subs	r3, r3, r1
 8007cac:	42ab      	cmp	r3, r5
 8007cae:	dcf2      	bgt.n	8007c96 <_printf_i+0x21e>
 8007cb0:	e7eb      	b.n	8007c8a <_printf_i+0x212>
 8007cb2:	2500      	movs	r5, #0
 8007cb4:	f104 0619 	add.w	r6, r4, #25
 8007cb8:	e7f5      	b.n	8007ca6 <_printf_i+0x22e>
 8007cba:	bf00      	nop
 8007cbc:	08008121 	.word	0x08008121
 8007cc0:	08008132 	.word	0x08008132

08007cc4 <memmove>:
 8007cc4:	4288      	cmp	r0, r1
 8007cc6:	b510      	push	{r4, lr}
 8007cc8:	eb01 0402 	add.w	r4, r1, r2
 8007ccc:	d902      	bls.n	8007cd4 <memmove+0x10>
 8007cce:	4284      	cmp	r4, r0
 8007cd0:	4623      	mov	r3, r4
 8007cd2:	d807      	bhi.n	8007ce4 <memmove+0x20>
 8007cd4:	1e43      	subs	r3, r0, #1
 8007cd6:	42a1      	cmp	r1, r4
 8007cd8:	d008      	beq.n	8007cec <memmove+0x28>
 8007cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ce2:	e7f8      	b.n	8007cd6 <memmove+0x12>
 8007ce4:	4402      	add	r2, r0
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	428a      	cmp	r2, r1
 8007cea:	d100      	bne.n	8007cee <memmove+0x2a>
 8007cec:	bd10      	pop	{r4, pc}
 8007cee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cf6:	e7f7      	b.n	8007ce8 <memmove+0x24>

08007cf8 <_free_r>:
 8007cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cfa:	2900      	cmp	r1, #0
 8007cfc:	d044      	beq.n	8007d88 <_free_r+0x90>
 8007cfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d02:	9001      	str	r0, [sp, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f1a1 0404 	sub.w	r4, r1, #4
 8007d0a:	bfb8      	it	lt
 8007d0c:	18e4      	addlt	r4, r4, r3
 8007d0e:	f000 f913 	bl	8007f38 <__malloc_lock>
 8007d12:	4a1e      	ldr	r2, [pc, #120]	; (8007d8c <_free_r+0x94>)
 8007d14:	9801      	ldr	r0, [sp, #4]
 8007d16:	6813      	ldr	r3, [r2, #0]
 8007d18:	b933      	cbnz	r3, 8007d28 <_free_r+0x30>
 8007d1a:	6063      	str	r3, [r4, #4]
 8007d1c:	6014      	str	r4, [r2, #0]
 8007d1e:	b003      	add	sp, #12
 8007d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d24:	f000 b90e 	b.w	8007f44 <__malloc_unlock>
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	d908      	bls.n	8007d3e <_free_r+0x46>
 8007d2c:	6825      	ldr	r5, [r4, #0]
 8007d2e:	1961      	adds	r1, r4, r5
 8007d30:	428b      	cmp	r3, r1
 8007d32:	bf01      	itttt	eq
 8007d34:	6819      	ldreq	r1, [r3, #0]
 8007d36:	685b      	ldreq	r3, [r3, #4]
 8007d38:	1949      	addeq	r1, r1, r5
 8007d3a:	6021      	streq	r1, [r4, #0]
 8007d3c:	e7ed      	b.n	8007d1a <_free_r+0x22>
 8007d3e:	461a      	mov	r2, r3
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	b10b      	cbz	r3, 8007d48 <_free_r+0x50>
 8007d44:	42a3      	cmp	r3, r4
 8007d46:	d9fa      	bls.n	8007d3e <_free_r+0x46>
 8007d48:	6811      	ldr	r1, [r2, #0]
 8007d4a:	1855      	adds	r5, r2, r1
 8007d4c:	42a5      	cmp	r5, r4
 8007d4e:	d10b      	bne.n	8007d68 <_free_r+0x70>
 8007d50:	6824      	ldr	r4, [r4, #0]
 8007d52:	4421      	add	r1, r4
 8007d54:	1854      	adds	r4, r2, r1
 8007d56:	42a3      	cmp	r3, r4
 8007d58:	6011      	str	r1, [r2, #0]
 8007d5a:	d1e0      	bne.n	8007d1e <_free_r+0x26>
 8007d5c:	681c      	ldr	r4, [r3, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	6053      	str	r3, [r2, #4]
 8007d62:	4421      	add	r1, r4
 8007d64:	6011      	str	r1, [r2, #0]
 8007d66:	e7da      	b.n	8007d1e <_free_r+0x26>
 8007d68:	d902      	bls.n	8007d70 <_free_r+0x78>
 8007d6a:	230c      	movs	r3, #12
 8007d6c:	6003      	str	r3, [r0, #0]
 8007d6e:	e7d6      	b.n	8007d1e <_free_r+0x26>
 8007d70:	6825      	ldr	r5, [r4, #0]
 8007d72:	1961      	adds	r1, r4, r5
 8007d74:	428b      	cmp	r3, r1
 8007d76:	bf04      	itt	eq
 8007d78:	6819      	ldreq	r1, [r3, #0]
 8007d7a:	685b      	ldreq	r3, [r3, #4]
 8007d7c:	6063      	str	r3, [r4, #4]
 8007d7e:	bf04      	itt	eq
 8007d80:	1949      	addeq	r1, r1, r5
 8007d82:	6021      	streq	r1, [r4, #0]
 8007d84:	6054      	str	r4, [r2, #4]
 8007d86:	e7ca      	b.n	8007d1e <_free_r+0x26>
 8007d88:	b003      	add	sp, #12
 8007d8a:	bd30      	pop	{r4, r5, pc}
 8007d8c:	20014550 	.word	0x20014550

08007d90 <sbrk_aligned>:
 8007d90:	b570      	push	{r4, r5, r6, lr}
 8007d92:	4e0e      	ldr	r6, [pc, #56]	; (8007dcc <sbrk_aligned+0x3c>)
 8007d94:	460c      	mov	r4, r1
 8007d96:	6831      	ldr	r1, [r6, #0]
 8007d98:	4605      	mov	r5, r0
 8007d9a:	b911      	cbnz	r1, 8007da2 <sbrk_aligned+0x12>
 8007d9c:	f000 f8bc 	bl	8007f18 <_sbrk_r>
 8007da0:	6030      	str	r0, [r6, #0]
 8007da2:	4621      	mov	r1, r4
 8007da4:	4628      	mov	r0, r5
 8007da6:	f000 f8b7 	bl	8007f18 <_sbrk_r>
 8007daa:	1c43      	adds	r3, r0, #1
 8007dac:	d00a      	beq.n	8007dc4 <sbrk_aligned+0x34>
 8007dae:	1cc4      	adds	r4, r0, #3
 8007db0:	f024 0403 	bic.w	r4, r4, #3
 8007db4:	42a0      	cmp	r0, r4
 8007db6:	d007      	beq.n	8007dc8 <sbrk_aligned+0x38>
 8007db8:	1a21      	subs	r1, r4, r0
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f000 f8ac 	bl	8007f18 <_sbrk_r>
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	d101      	bne.n	8007dc8 <sbrk_aligned+0x38>
 8007dc4:	f04f 34ff 	mov.w	r4, #4294967295
 8007dc8:	4620      	mov	r0, r4
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
 8007dcc:	20014554 	.word	0x20014554

08007dd0 <_malloc_r>:
 8007dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd4:	1ccd      	adds	r5, r1, #3
 8007dd6:	f025 0503 	bic.w	r5, r5, #3
 8007dda:	3508      	adds	r5, #8
 8007ddc:	2d0c      	cmp	r5, #12
 8007dde:	bf38      	it	cc
 8007de0:	250c      	movcc	r5, #12
 8007de2:	2d00      	cmp	r5, #0
 8007de4:	4607      	mov	r7, r0
 8007de6:	db01      	blt.n	8007dec <_malloc_r+0x1c>
 8007de8:	42a9      	cmp	r1, r5
 8007dea:	d905      	bls.n	8007df8 <_malloc_r+0x28>
 8007dec:	230c      	movs	r3, #12
 8007dee:	603b      	str	r3, [r7, #0]
 8007df0:	2600      	movs	r6, #0
 8007df2:	4630      	mov	r0, r6
 8007df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007df8:	4e2e      	ldr	r6, [pc, #184]	; (8007eb4 <_malloc_r+0xe4>)
 8007dfa:	f000 f89d 	bl	8007f38 <__malloc_lock>
 8007dfe:	6833      	ldr	r3, [r6, #0]
 8007e00:	461c      	mov	r4, r3
 8007e02:	bb34      	cbnz	r4, 8007e52 <_malloc_r+0x82>
 8007e04:	4629      	mov	r1, r5
 8007e06:	4638      	mov	r0, r7
 8007e08:	f7ff ffc2 	bl	8007d90 <sbrk_aligned>
 8007e0c:	1c43      	adds	r3, r0, #1
 8007e0e:	4604      	mov	r4, r0
 8007e10:	d14d      	bne.n	8007eae <_malloc_r+0xde>
 8007e12:	6834      	ldr	r4, [r6, #0]
 8007e14:	4626      	mov	r6, r4
 8007e16:	2e00      	cmp	r6, #0
 8007e18:	d140      	bne.n	8007e9c <_malloc_r+0xcc>
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	4638      	mov	r0, r7
 8007e20:	eb04 0803 	add.w	r8, r4, r3
 8007e24:	f000 f878 	bl	8007f18 <_sbrk_r>
 8007e28:	4580      	cmp	r8, r0
 8007e2a:	d13a      	bne.n	8007ea2 <_malloc_r+0xd2>
 8007e2c:	6821      	ldr	r1, [r4, #0]
 8007e2e:	3503      	adds	r5, #3
 8007e30:	1a6d      	subs	r5, r5, r1
 8007e32:	f025 0503 	bic.w	r5, r5, #3
 8007e36:	3508      	adds	r5, #8
 8007e38:	2d0c      	cmp	r5, #12
 8007e3a:	bf38      	it	cc
 8007e3c:	250c      	movcc	r5, #12
 8007e3e:	4629      	mov	r1, r5
 8007e40:	4638      	mov	r0, r7
 8007e42:	f7ff ffa5 	bl	8007d90 <sbrk_aligned>
 8007e46:	3001      	adds	r0, #1
 8007e48:	d02b      	beq.n	8007ea2 <_malloc_r+0xd2>
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	442b      	add	r3, r5
 8007e4e:	6023      	str	r3, [r4, #0]
 8007e50:	e00e      	b.n	8007e70 <_malloc_r+0xa0>
 8007e52:	6822      	ldr	r2, [r4, #0]
 8007e54:	1b52      	subs	r2, r2, r5
 8007e56:	d41e      	bmi.n	8007e96 <_malloc_r+0xc6>
 8007e58:	2a0b      	cmp	r2, #11
 8007e5a:	d916      	bls.n	8007e8a <_malloc_r+0xba>
 8007e5c:	1961      	adds	r1, r4, r5
 8007e5e:	42a3      	cmp	r3, r4
 8007e60:	6025      	str	r5, [r4, #0]
 8007e62:	bf18      	it	ne
 8007e64:	6059      	strne	r1, [r3, #4]
 8007e66:	6863      	ldr	r3, [r4, #4]
 8007e68:	bf08      	it	eq
 8007e6a:	6031      	streq	r1, [r6, #0]
 8007e6c:	5162      	str	r2, [r4, r5]
 8007e6e:	604b      	str	r3, [r1, #4]
 8007e70:	4638      	mov	r0, r7
 8007e72:	f104 060b 	add.w	r6, r4, #11
 8007e76:	f000 f865 	bl	8007f44 <__malloc_unlock>
 8007e7a:	f026 0607 	bic.w	r6, r6, #7
 8007e7e:	1d23      	adds	r3, r4, #4
 8007e80:	1af2      	subs	r2, r6, r3
 8007e82:	d0b6      	beq.n	8007df2 <_malloc_r+0x22>
 8007e84:	1b9b      	subs	r3, r3, r6
 8007e86:	50a3      	str	r3, [r4, r2]
 8007e88:	e7b3      	b.n	8007df2 <_malloc_r+0x22>
 8007e8a:	6862      	ldr	r2, [r4, #4]
 8007e8c:	42a3      	cmp	r3, r4
 8007e8e:	bf0c      	ite	eq
 8007e90:	6032      	streq	r2, [r6, #0]
 8007e92:	605a      	strne	r2, [r3, #4]
 8007e94:	e7ec      	b.n	8007e70 <_malloc_r+0xa0>
 8007e96:	4623      	mov	r3, r4
 8007e98:	6864      	ldr	r4, [r4, #4]
 8007e9a:	e7b2      	b.n	8007e02 <_malloc_r+0x32>
 8007e9c:	4634      	mov	r4, r6
 8007e9e:	6876      	ldr	r6, [r6, #4]
 8007ea0:	e7b9      	b.n	8007e16 <_malloc_r+0x46>
 8007ea2:	230c      	movs	r3, #12
 8007ea4:	603b      	str	r3, [r7, #0]
 8007ea6:	4638      	mov	r0, r7
 8007ea8:	f000 f84c 	bl	8007f44 <__malloc_unlock>
 8007eac:	e7a1      	b.n	8007df2 <_malloc_r+0x22>
 8007eae:	6025      	str	r5, [r4, #0]
 8007eb0:	e7de      	b.n	8007e70 <_malloc_r+0xa0>
 8007eb2:	bf00      	nop
 8007eb4:	20014550 	.word	0x20014550

08007eb8 <_realloc_r>:
 8007eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ebc:	4680      	mov	r8, r0
 8007ebe:	4614      	mov	r4, r2
 8007ec0:	460e      	mov	r6, r1
 8007ec2:	b921      	cbnz	r1, 8007ece <_realloc_r+0x16>
 8007ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec8:	4611      	mov	r1, r2
 8007eca:	f7ff bf81 	b.w	8007dd0 <_malloc_r>
 8007ece:	b92a      	cbnz	r2, 8007edc <_realloc_r+0x24>
 8007ed0:	f7ff ff12 	bl	8007cf8 <_free_r>
 8007ed4:	4625      	mov	r5, r4
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007edc:	f000 f838 	bl	8007f50 <_malloc_usable_size_r>
 8007ee0:	4284      	cmp	r4, r0
 8007ee2:	4607      	mov	r7, r0
 8007ee4:	d802      	bhi.n	8007eec <_realloc_r+0x34>
 8007ee6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007eea:	d812      	bhi.n	8007f12 <_realloc_r+0x5a>
 8007eec:	4621      	mov	r1, r4
 8007eee:	4640      	mov	r0, r8
 8007ef0:	f7ff ff6e 	bl	8007dd0 <_malloc_r>
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d0ed      	beq.n	8007ed6 <_realloc_r+0x1e>
 8007efa:	42bc      	cmp	r4, r7
 8007efc:	4622      	mov	r2, r4
 8007efe:	4631      	mov	r1, r6
 8007f00:	bf28      	it	cs
 8007f02:	463a      	movcs	r2, r7
 8007f04:	f7ff fba4 	bl	8007650 <memcpy>
 8007f08:	4631      	mov	r1, r6
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7ff fef4 	bl	8007cf8 <_free_r>
 8007f10:	e7e1      	b.n	8007ed6 <_realloc_r+0x1e>
 8007f12:	4635      	mov	r5, r6
 8007f14:	e7df      	b.n	8007ed6 <_realloc_r+0x1e>
	...

08007f18 <_sbrk_r>:
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	4d06      	ldr	r5, [pc, #24]	; (8007f34 <_sbrk_r+0x1c>)
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	4604      	mov	r4, r0
 8007f20:	4608      	mov	r0, r1
 8007f22:	602b      	str	r3, [r5, #0]
 8007f24:	f000 f81e 	bl	8007f64 <_sbrk>
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	d102      	bne.n	8007f32 <_sbrk_r+0x1a>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	b103      	cbz	r3, 8007f32 <_sbrk_r+0x1a>
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	bd38      	pop	{r3, r4, r5, pc}
 8007f34:	20014558 	.word	0x20014558

08007f38 <__malloc_lock>:
 8007f38:	4801      	ldr	r0, [pc, #4]	; (8007f40 <__malloc_lock+0x8>)
 8007f3a:	f000 b811 	b.w	8007f60 <__retarget_lock_acquire_recursive>
 8007f3e:	bf00      	nop
 8007f40:	2001455c 	.word	0x2001455c

08007f44 <__malloc_unlock>:
 8007f44:	4801      	ldr	r0, [pc, #4]	; (8007f4c <__malloc_unlock+0x8>)
 8007f46:	f000 b80c 	b.w	8007f62 <__retarget_lock_release_recursive>
 8007f4a:	bf00      	nop
 8007f4c:	2001455c 	.word	0x2001455c

08007f50 <_malloc_usable_size_r>:
 8007f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f54:	1f18      	subs	r0, r3, #4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bfbc      	itt	lt
 8007f5a:	580b      	ldrlt	r3, [r1, r0]
 8007f5c:	18c0      	addlt	r0, r0, r3
 8007f5e:	4770      	bx	lr

08007f60 <__retarget_lock_acquire_recursive>:
 8007f60:	4770      	bx	lr

08007f62 <__retarget_lock_release_recursive>:
 8007f62:	4770      	bx	lr

08007f64 <_sbrk>:
 8007f64:	4a04      	ldr	r2, [pc, #16]	; (8007f78 <_sbrk+0x14>)
 8007f66:	6811      	ldr	r1, [r2, #0]
 8007f68:	4603      	mov	r3, r0
 8007f6a:	b909      	cbnz	r1, 8007f70 <_sbrk+0xc>
 8007f6c:	4903      	ldr	r1, [pc, #12]	; (8007f7c <_sbrk+0x18>)
 8007f6e:	6011      	str	r1, [r2, #0]
 8007f70:	6810      	ldr	r0, [r2, #0]
 8007f72:	4403      	add	r3, r0
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	4770      	bx	lr
 8007f78:	20014560 	.word	0x20014560
 8007f7c:	20014568 	.word	0x20014568

08007f80 <_init>:
 8007f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f82:	bf00      	nop
 8007f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f86:	bc08      	pop	{r3}
 8007f88:	469e      	mov	lr, r3
 8007f8a:	4770      	bx	lr

08007f8c <_fini>:
 8007f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8e:	bf00      	nop
 8007f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f92:	bc08      	pop	{r3}
 8007f94:	469e      	mov	lr, r3
 8007f96:	4770      	bx	lr
