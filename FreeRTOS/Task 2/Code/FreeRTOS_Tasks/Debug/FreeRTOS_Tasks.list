
FreeRTOS_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eb4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08007084  08007084  00017084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071fc  080071fc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080071fc  080071fc  000171fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007204  08007204  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007204  08007204  00017204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800720c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001448c  2000001c  08007228  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144a8  08007228  000244a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ca7  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003301  00000000  00000000  00036cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00039ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  0003b440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241c7  00000000  00000000  0003c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e11  00000000  00000000  000608b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df13b  00000000  00000000  000776c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156803  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054b4  00000000  00000000  00156854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800706c 	.word	0x0800706c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	0800706c 	.word	0x0800706c

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012ed4 	.word	0x20012ed4

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b974 	b.w	80005a4 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468e      	mov	lr, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14d      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4694      	mov	ip, r2
 80002e6:	d969      	bls.n	80003bc <__udivmoddi4+0xe8>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b152      	cbz	r2, 8000304 <__udivmoddi4+0x30>
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	f1c2 0120 	rsb	r1, r2, #32
 80002f6:	fa20 f101 	lsr.w	r1, r0, r1
 80002fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000302:	4094      	lsls	r4, r2
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	0c21      	lsrs	r1, r4, #16
 800030a:	fbbe f6f8 	udiv	r6, lr, r8
 800030e:	fa1f f78c 	uxth.w	r7, ip
 8000312:	fb08 e316 	mls	r3, r8, r6, lr
 8000316:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800031a:	fb06 f107 	mul.w	r1, r6, r7
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 30ff 	add.w	r0, r6, #4294967295
 800032a:	f080 811f 	bcs.w	800056c <__udivmoddi4+0x298>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 811c 	bls.w	800056c <__udivmoddi4+0x298>
 8000334:	3e02      	subs	r6, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a5b      	subs	r3, r3, r1
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000340:	fb08 3310 	mls	r3, r8, r0, r3
 8000344:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000348:	fb00 f707 	mul.w	r7, r0, r7
 800034c:	42a7      	cmp	r7, r4
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x92>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 33ff 	add.w	r3, r0, #4294967295
 8000358:	f080 810a 	bcs.w	8000570 <__udivmoddi4+0x29c>
 800035c:	42a7      	cmp	r7, r4
 800035e:	f240 8107 	bls.w	8000570 <__udivmoddi4+0x29c>
 8000362:	4464      	add	r4, ip
 8000364:	3802      	subs	r0, #2
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	1be4      	subs	r4, r4, r7
 800036c:	2600      	movs	r6, #0
 800036e:	b11d      	cbz	r5, 8000378 <__udivmoddi4+0xa4>
 8000370:	40d4      	lsrs	r4, r2
 8000372:	2300      	movs	r3, #0
 8000374:	e9c5 4300 	strd	r4, r3, [r5]
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0xc2>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80ef 	beq.w	8000566 <__udivmoddi4+0x292>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x160>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xd4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80f9 	bhi.w	800059a <__udivmoddi4+0x2c6>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0303 	sbc.w	r3, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	469e      	mov	lr, r3
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e0      	beq.n	8000378 <__udivmoddi4+0xa4>
 80003b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ba:	e7dd      	b.n	8000378 <__udivmoddi4+0xa4>
 80003bc:	b902      	cbnz	r2, 80003c0 <__udivmoddi4+0xec>
 80003be:	deff      	udf	#255	; 0xff
 80003c0:	fab2 f282 	clz	r2, r2
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	f040 8092 	bne.w	80004ee <__udivmoddi4+0x21a>
 80003ca:	eba1 010c 	sub.w	r1, r1, ip
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	2601      	movs	r6, #1
 80003d8:	0c20      	lsrs	r0, r4, #16
 80003da:	fbb1 f3f7 	udiv	r3, r1, r7
 80003de:	fb07 1113 	mls	r1, r7, r3, r1
 80003e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e6:	fb0e f003 	mul.w	r0, lr, r3
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x12c>
 80003ee:	eb1c 0101 	adds.w	r1, ip, r1
 80003f2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x12a>
 80003f8:	4288      	cmp	r0, r1
 80003fa:	f200 80cb 	bhi.w	8000594 <__udivmoddi4+0x2c0>
 80003fe:	4643      	mov	r3, r8
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f7 	udiv	r0, r1, r7
 8000408:	fb07 1110 	mls	r1, r7, r0, r1
 800040c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000410:	fb0e fe00 	mul.w	lr, lr, r0
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x156>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x154>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f200 80bb 	bhi.w	800059e <__udivmoddi4+0x2ca>
 8000428:	4608      	mov	r0, r1
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000432:	e79c      	b.n	800036e <__udivmoddi4+0x9a>
 8000434:	f1c6 0720 	rsb	r7, r6, #32
 8000438:	40b3      	lsls	r3, r6
 800043a:	fa22 fc07 	lsr.w	ip, r2, r7
 800043e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000442:	fa20 f407 	lsr.w	r4, r0, r7
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	431c      	orrs	r4, r3
 800044c:	40f9      	lsrs	r1, r7
 800044e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000452:	fa00 f306 	lsl.w	r3, r0, r6
 8000456:	fbb1 f8f9 	udiv	r8, r1, r9
 800045a:	0c20      	lsrs	r0, r4, #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fb09 1118 	mls	r1, r9, r8, r1
 8000464:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000468:	fb08 f00e 	mul.w	r0, r8, lr
 800046c:	4288      	cmp	r0, r1
 800046e:	fa02 f206 	lsl.w	r2, r2, r6
 8000472:	d90b      	bls.n	800048c <__udivmoddi4+0x1b8>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f108 3aff 	add.w	sl, r8, #4294967295
 800047c:	f080 8088 	bcs.w	8000590 <__udivmoddi4+0x2bc>
 8000480:	4288      	cmp	r0, r1
 8000482:	f240 8085 	bls.w	8000590 <__udivmoddi4+0x2bc>
 8000486:	f1a8 0802 	sub.w	r8, r8, #2
 800048a:	4461      	add	r1, ip
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f9 	udiv	r0, r1, r9
 8000494:	fb09 1110 	mls	r1, r9, r0, r1
 8000498:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800049c:	fb00 fe0e 	mul.w	lr, r0, lr
 80004a0:	458e      	cmp	lr, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x1e2>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ac:	d26c      	bcs.n	8000588 <__udivmoddi4+0x2b4>
 80004ae:	458e      	cmp	lr, r1
 80004b0:	d96a      	bls.n	8000588 <__udivmoddi4+0x2b4>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ba:	fba0 9402 	umull	r9, r4, r0, r2
 80004be:	eba1 010e 	sub.w	r1, r1, lr
 80004c2:	42a1      	cmp	r1, r4
 80004c4:	46c8      	mov	r8, r9
 80004c6:	46a6      	mov	lr, r4
 80004c8:	d356      	bcc.n	8000578 <__udivmoddi4+0x2a4>
 80004ca:	d053      	beq.n	8000574 <__udivmoddi4+0x2a0>
 80004cc:	b15d      	cbz	r5, 80004e6 <__udivmoddi4+0x212>
 80004ce:	ebb3 0208 	subs.w	r2, r3, r8
 80004d2:	eb61 010e 	sbc.w	r1, r1, lr
 80004d6:	fa01 f707 	lsl.w	r7, r1, r7
 80004da:	fa22 f306 	lsr.w	r3, r2, r6
 80004de:	40f1      	lsrs	r1, r6
 80004e0:	431f      	orrs	r7, r3
 80004e2:	e9c5 7100 	strd	r7, r1, [r5]
 80004e6:	2600      	movs	r6, #0
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	40d8      	lsrs	r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa21 f303 	lsr.w	r3, r1, r3
 80004fc:	4091      	lsls	r1, r2
 80004fe:	4301      	orrs	r1, r0
 8000500:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000504:	fa1f fe8c 	uxth.w	lr, ip
 8000508:	fbb3 f0f7 	udiv	r0, r3, r7
 800050c:	fb07 3610 	mls	r6, r7, r0, r3
 8000510:	0c0b      	lsrs	r3, r1, #16
 8000512:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000516:	fb00 f60e 	mul.w	r6, r0, lr
 800051a:	429e      	cmp	r6, r3
 800051c:	fa04 f402 	lsl.w	r4, r4, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x260>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295
 800052a:	d22f      	bcs.n	800058c <__udivmoddi4+0x2b8>
 800052c:	429e      	cmp	r6, r3
 800052e:	d92d      	bls.n	800058c <__udivmoddi4+0x2b8>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1b9b      	subs	r3, r3, r6
 8000536:	b289      	uxth	r1, r1
 8000538:	fbb3 f6f7 	udiv	r6, r3, r7
 800053c:	fb07 3316 	mls	r3, r7, r6, r3
 8000540:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000544:	fb06 f30e 	mul.w	r3, r6, lr
 8000548:	428b      	cmp	r3, r1
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x28a>
 800054c:	eb1c 0101 	adds.w	r1, ip, r1
 8000550:	f106 38ff 	add.w	r8, r6, #4294967295
 8000554:	d216      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000556:	428b      	cmp	r3, r1
 8000558:	d914      	bls.n	8000584 <__udivmoddi4+0x2b0>
 800055a:	3e02      	subs	r6, #2
 800055c:	4461      	add	r1, ip
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000564:	e738      	b.n	80003d8 <__udivmoddi4+0x104>
 8000566:	462e      	mov	r6, r5
 8000568:	4628      	mov	r0, r5
 800056a:	e705      	b.n	8000378 <__udivmoddi4+0xa4>
 800056c:	4606      	mov	r6, r0
 800056e:	e6e3      	b.n	8000338 <__udivmoddi4+0x64>
 8000570:	4618      	mov	r0, r3
 8000572:	e6f8      	b.n	8000366 <__udivmoddi4+0x92>
 8000574:	454b      	cmp	r3, r9
 8000576:	d2a9      	bcs.n	80004cc <__udivmoddi4+0x1f8>
 8000578:	ebb9 0802 	subs.w	r8, r9, r2
 800057c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000580:	3801      	subs	r0, #1
 8000582:	e7a3      	b.n	80004cc <__udivmoddi4+0x1f8>
 8000584:	4646      	mov	r6, r8
 8000586:	e7ea      	b.n	800055e <__udivmoddi4+0x28a>
 8000588:	4620      	mov	r0, r4
 800058a:	e794      	b.n	80004b6 <__udivmoddi4+0x1e2>
 800058c:	4640      	mov	r0, r8
 800058e:	e7d1      	b.n	8000534 <__udivmoddi4+0x260>
 8000590:	46d0      	mov	r8, sl
 8000592:	e77b      	b.n	800048c <__udivmoddi4+0x1b8>
 8000594:	3b02      	subs	r3, #2
 8000596:	4461      	add	r1, ip
 8000598:	e732      	b.n	8000400 <__udivmoddi4+0x12c>
 800059a:	4630      	mov	r0, r6
 800059c:	e709      	b.n	80003b2 <__udivmoddi4+0xde>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	e742      	b.n	800042a <__udivmoddi4+0x156>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fab5 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f86d 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8d7 	bl	8000768 <MX_GPIO_Init>
//  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

	/*Enable CYCLE COUNT REG OF CPU*/

	DWT_CTRL |=1 ;
 80005ba:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <main+0xc8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a2c      	ldr	r2, [pc, #176]	; (8000670 <main+0xc8>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6013      	str	r3, [r2, #0]


	/*For SEGGER SYSVIEW TRACE*/

	SEGGER_UART_init(500000);
 80005c6:	482b      	ldr	r0, [pc, #172]	; (8000674 <main+0xcc>)
 80005c8:	f004 fa90 	bl	8004aec <SEGGER_UART_init>

	/*CONFIG SYSVIEW */
	SEGGER_SYSVIEW_Conf();
 80005cc:	f004 f8b8 	bl	8004740 <SEGGER_SYSVIEW_Conf>
	//SEGGER_SYSVIEW_Start();

	Local_Statue= xTaskCreate(Task1Handler, "Task-1", 200, NULL, 2, &Task1Handle);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2302      	movs	r3, #2
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	22c8      	movs	r2, #200	; 0xc8
 80005de:	4926      	ldr	r1, [pc, #152]	; (8000678 <main+0xd0>)
 80005e0:	4826      	ldr	r0, [pc, #152]	; (800067c <main+0xd4>)
 80005e2:	f002 f9fb 	bl	80029dc <xTaskCreate>
 80005e6:	61f8      	str	r0, [r7, #28]

	configASSERT(Local_Statue == pdPASS);
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d00a      	beq.n	8000604 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f2:	f383 8811 	msr	BASEPRI, r3
 80005f6:	f3bf 8f6f 	isb	sy
 80005fa:	f3bf 8f4f 	dsb	sy
 80005fe:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000600:	bf00      	nop
 8000602:	e7fe      	b.n	8000602 <main+0x5a>

	Local_Statue= xTaskCreate(Task2Handler, "Task-2", 200, NULL, 2, &Task2Handle);
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2302      	movs	r3, #2
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	22c8      	movs	r2, #200	; 0xc8
 8000612:	491b      	ldr	r1, [pc, #108]	; (8000680 <main+0xd8>)
 8000614:	481b      	ldr	r0, [pc, #108]	; (8000684 <main+0xdc>)
 8000616:	f002 f9e1 	bl	80029dc <xTaskCreate>
 800061a:	61f8      	str	r0, [r7, #28]

	configASSERT(Local_Statue == pdPASS);
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d00a      	beq.n	8000638 <main+0x90>
        __asm volatile
 8000622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000626:	f383 8811 	msr	BASEPRI, r3
 800062a:	f3bf 8f6f 	isb	sy
 800062e:	f3bf 8f4f 	dsb	sy
 8000632:	617b      	str	r3, [r7, #20]
    }
 8000634:	bf00      	nop
 8000636:	e7fe      	b.n	8000636 <main+0x8e>

	Local_Statue= xTaskCreate(Task3Handler, "Task-3", 200, NULL, 2, &Task3Handle);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	2302      	movs	r3, #2
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2300      	movs	r3, #0
 8000642:	22c8      	movs	r2, #200	; 0xc8
 8000644:	4910      	ldr	r1, [pc, #64]	; (8000688 <main+0xe0>)
 8000646:	4811      	ldr	r0, [pc, #68]	; (800068c <main+0xe4>)
 8000648:	f002 f9c8 	bl	80029dc <xTaskCreate>
 800064c:	61f8      	str	r0, [r7, #28]

	configASSERT(Local_Statue == pdPASS);
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00a      	beq.n	800066a <main+0xc2>
        __asm volatile
 8000654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000658:	f383 8811 	msr	BASEPRI, r3
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	f3bf 8f4f 	dsb	sy
 8000664:	613b      	str	r3, [r7, #16]
    }
 8000666:	bf00      	nop
 8000668:	e7fe      	b.n	8000668 <main+0xc0>

	vTaskStartScheduler();
 800066a:	f002 fb77 	bl	8002d5c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800066e:	e7fe      	b.n	800066e <main+0xc6>
 8000670:	e0001000 	.word	0xe0001000
 8000674:	0007a120 	.word	0x0007a120
 8000678:	08007084 	.word	0x08007084
 800067c:	08000871 	.word	0x08000871
 8000680:	0800708c 	.word	0x0800708c
 8000684:	0800089d 	.word	0x0800089d
 8000688:	08007094 	.word	0x08007094
 800068c:	080008c5 	.word	0x080008c5

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	; 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f006 fcdc 	bl	800705c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <SystemClock_Config+0xd0>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a28      	ldr	r2, [pc, #160]	; (8000760 <SystemClock_Config+0xd0>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b26      	ldr	r3, [pc, #152]	; (8000760 <SystemClock_Config+0xd0>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <SystemClock_Config+0xd4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a22      	ldr	r2, [pc, #136]	; (8000764 <SystemClock_Config+0xd4>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <SystemClock_Config+0xd4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000700:	2308      	movs	r3, #8
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000704:	23a8      	movs	r3, #168	; 0xa8
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4618      	mov	r0, r3
 800071a:	f001 f853 	bl	80017c4 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000724:	f000 f8f4 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000734:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	2105      	movs	r1, #5
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fcd4 	bl	80010f4 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000752:	f000 f8dd 	bl	8000910 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b38      	ldr	r3, [pc, #224]	; (8000864 <MX_GPIO_Init+0xfc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a37      	ldr	r2, [pc, #220]	; (8000864 <MX_GPIO_Init+0xfc>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b35      	ldr	r3, [pc, #212]	; (8000864 <MX_GPIO_Init+0xfc>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b31      	ldr	r3, [pc, #196]	; (8000864 <MX_GPIO_Init+0xfc>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a30      	ldr	r2, [pc, #192]	; (8000864 <MX_GPIO_Init+0xfc>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <MX_GPIO_Init+0xfc>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <MX_GPIO_Init+0xfc>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a29      	ldr	r2, [pc, #164]	; (8000864 <MX_GPIO_Init+0xfc>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <MX_GPIO_Init+0xfc>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_GPIO_Init+0xfc>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a22      	ldr	r2, [pc, #136]	; (8000864 <MX_GPIO_Init+0xfc>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_GPIO_Init+0xfc>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2120      	movs	r1, #32
 80007f2:	481d      	ldr	r0, [pc, #116]	; (8000868 <MX_GPIO_Init+0x100>)
 80007f4:	f000 fc4a 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80007fe:	481b      	ldr	r0, [pc, #108]	; (800086c <MX_GPIO_Init+0x104>)
 8000800:	f000 fc44 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <MX_GPIO_Init+0x104>)
 800081c:	f000 faa2 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000820:	2320      	movs	r3, #32
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_GPIO_Init+0x100>)
 8000838:	f000 fa94 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 800083c:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_GPIO_Init+0x104>)
 8000856:	f000 fa85 	bl	8000d64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	40020800 	.word	0x40020800

08000870 <Task1Handler>:

/* USER CODE BEGIN 4 */
void Task1Handler(void* parameters)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
//		snprintf(FSting , 100 , "%s\n",(char*)parameters);
//		SEGGER_SYSVIEW_PrintfTarget(FSting);
		//		taskYIELD();


		SEGGER_SYSVIEW_PrintfTarget("Toggling Pin 8");
 8000878:	4806      	ldr	r0, [pc, #24]	; (8000894 <Task1Handler+0x24>)
 800087a:	f006 fb0f 	bl	8006e9c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800087e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <Task1Handler+0x28>)
 8000884:	f000 fc1b 	bl	80010be <HAL_GPIO_TogglePin>
		/*Delay For 1000ms*/
		//HAL_Delay(1000);
		vTaskDelay(1000);
 8000888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800088c:	f002 fa2e 	bl	8002cec <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Pin 8");
 8000890:	e7f2      	b.n	8000878 <Task1Handler+0x8>
 8000892:	bf00      	nop
 8000894:	0800709c 	.word	0x0800709c
 8000898:	40020800 	.word	0x40020800

0800089c <Task2Handler>:

	}

}
void Task2Handler(void* parameters)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
//		snprintf(FSting , 100 , "%s\n",(char*)parameters);
//		SEGGER_SYSVIEW_PrintfTarget(FSting);
		//		taskYIELD();


		SEGGER_SYSVIEW_PrintfTarget("Toggling Pin 6");
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <Task2Handler+0x20>)
 80008a6:	f006 faf9 	bl	8006e9c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80008aa:	2140      	movs	r1, #64	; 0x40
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <Task2Handler+0x24>)
 80008ae:	f000 fc06 	bl	80010be <HAL_GPIO_TogglePin>
			/*Delay For 800ms*/
			//HAL_Delay(800);

		vTaskDelay(800);
 80008b2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80008b6:	f002 fa19 	bl	8002cec <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Pin 6");
 80008ba:	e7f3      	b.n	80008a4 <Task2Handler+0x8>
 80008bc:	080070ac 	.word	0x080070ac
 80008c0:	40020800 	.word	0x40020800

080008c4 <Task3Handler>:

	}

}
void Task3Handler(void* parameters)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	while(1)
	{
//		snprintf(FSting , 100 , "%s\n",(char*)parameters);
//		SEGGER_SYSVIEW_PrintfTarget(FSting);
		//		taskYIELD();
		SEGGER_SYSVIEW_PrintfTarget("Toggling Pin 5");
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <Task3Handler+0x20>)
 80008ce:	f006 fae5 	bl	8006e9c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 80008d2:	2120      	movs	r1, #32
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <Task3Handler+0x24>)
 80008d6:	f000 fbf2 	bl	80010be <HAL_GPIO_TogglePin>
			/*Delay For 250ms*/
			//HAL_Delay(250);

			vTaskDelay(250);
 80008da:	20fa      	movs	r0, #250	; 0xfa
 80008dc:	f002 fa06 	bl	8002cec <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Pin 5");
 80008e0:	e7f4      	b.n	80008cc <Task3Handler+0x8>
 80008e2:	bf00      	nop
 80008e4:	080070bc 	.word	0x080070bc
 80008e8:	40020800 	.word	0x40020800

080008ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fe:	f000 f92f 	bl	8000b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40001000 	.word	0x40001000

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08e      	sub	sp, #56	; 0x38
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <HAL_InitTick+0xe4>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	4a32      	ldr	r2, [pc, #200]	; (8000a50 <HAL_InitTick+0xe4>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6413      	str	r3, [r2, #64]	; 0x40
 800098c:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <HAL_InitTick+0xe4>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	f003 0310 	and.w	r3, r3, #16
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000998:	f107 0210 	add.w	r2, r7, #16
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 fcac 	bl	8001300 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009a8:	6a3b      	ldr	r3, [r7, #32]
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d103      	bne.n	80009ba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009b2:	f000 fc91 	bl	80012d8 <HAL_RCC_GetPCLK1Freq>
 80009b6:	6378      	str	r0, [r7, #52]	; 0x34
 80009b8:	e004      	b.n	80009c4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ba:	f000 fc8d 	bl	80012d8 <HAL_RCC_GetPCLK1Freq>
 80009be:	4603      	mov	r3, r0
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009c6:	4a23      	ldr	r2, [pc, #140]	; (8000a54 <HAL_InitTick+0xe8>)
 80009c8:	fba2 2303 	umull	r2, r3, r2, r3
 80009cc:	0c9b      	lsrs	r3, r3, #18
 80009ce:	3b01      	subs	r3, #1
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <HAL_InitTick+0xec>)
 80009d4:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <HAL_InitTick+0xf0>)
 80009d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009d8:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <HAL_InitTick+0xec>)
 80009da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009de:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009e0:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <HAL_InitTick+0xec>)
 80009e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <HAL_InitTick+0xec>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <HAL_InitTick+0xec>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <HAL_InitTick+0xec>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009f8:	4817      	ldr	r0, [pc, #92]	; (8000a58 <HAL_InitTick+0xec>)
 80009fa:	f001 f981 	bl	8001d00 <HAL_TIM_Base_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d11b      	bne.n	8000a44 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a0c:	4812      	ldr	r0, [pc, #72]	; (8000a58 <HAL_InitTick+0xec>)
 8000a0e:	f001 f9d1 	bl	8001db4 <HAL_TIM_Base_Start_IT>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d111      	bne.n	8000a44 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a20:	2036      	movs	r0, #54	; 0x36
 8000a22:	f000 f991 	bl	8000d48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d808      	bhi.n	8000a3e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	2036      	movs	r0, #54	; 0x36
 8000a32:	f000 f96d 	bl	8000d10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <HAL_InitTick+0xf4>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	e002      	b.n	8000a44 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3738      	adds	r7, #56	; 0x38
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	431bde83 	.word	0x431bde83
 8000a58:	20000038 	.word	0x20000038
 8000a5c:	40001000 	.word	0x40001000
 8000a60:	20000004 	.word	0x20000004

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <TIM6_DAC_IRQHandler+0x10>)
 8000a96:	f001 f9fd 	bl	8001e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000038 	.word	0x20000038

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ace:	490e      	ldr	r1, [pc, #56]	; (8000b08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ae4:	4c0b      	ldr	r4, [pc, #44]	; (8000b14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000af2:	f7ff ffd7 	bl	8000aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f006 fa6f 	bl	8006fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fd55 	bl	80005a8 <main>
  bx  lr    
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b0c:	0800720c 	.word	0x0800720c
  ldr r2, =_sbss
 8000b10:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b14:	200144a8 	.word	0x200144a8

08000b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <HAL_Init+0x40>)
 8000b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_Init+0x40>)
 8000b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <HAL_Init+0x40>)
 8000b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 f8d8 	bl	8000cfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff ff0e 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b50:	f7ff fee4 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023c00 	.word	0x40023c00

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000080 	.word	0x20000080

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000080 	.word	0x20000080

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	; (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ff4c 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d22:	f7ff ff61 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	6978      	ldr	r0, [r7, #20]
 8000d2e:	f7ff ffb1 	bl	8000c94 <NVIC_EncodePriority>
 8000d32:	4602      	mov	r2, r0
 8000d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff80 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff54 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	e165      	b.n	800104c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d80:	2201      	movs	r2, #1
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	f040 8154 	bne.w	8001046 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d005      	beq.n	8000db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d130      	bne.n	8000e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	091b      	lsrs	r3, r3, #4
 8000e02:	f003 0201 	and.w	r2, r3, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d017      	beq.n	8000e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d123      	bne.n	8000ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	691a      	ldr	r2, [r3, #16]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0203 	and.w	r2, r3, #3
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 80ae 	beq.w	8001046 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b5d      	ldr	r3, [pc, #372]	; (8001064 <HAL_GPIO_Init+0x300>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a5c      	ldr	r2, [pc, #368]	; (8001064 <HAL_GPIO_Init+0x300>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b5a      	ldr	r3, [pc, #360]	; (8001064 <HAL_GPIO_Init+0x300>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f06:	4a58      	ldr	r2, [pc, #352]	; (8001068 <HAL_GPIO_Init+0x304>)
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4f      	ldr	r2, [pc, #316]	; (800106c <HAL_GPIO_Init+0x308>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d025      	beq.n	8000f7e <HAL_GPIO_Init+0x21a>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4e      	ldr	r2, [pc, #312]	; (8001070 <HAL_GPIO_Init+0x30c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d01f      	beq.n	8000f7a <HAL_GPIO_Init+0x216>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4d      	ldr	r2, [pc, #308]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d019      	beq.n	8000f76 <HAL_GPIO_Init+0x212>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4c      	ldr	r2, [pc, #304]	; (8001078 <HAL_GPIO_Init+0x314>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <HAL_GPIO_Init+0x20e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4b      	ldr	r2, [pc, #300]	; (800107c <HAL_GPIO_Init+0x318>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d00d      	beq.n	8000f6e <HAL_GPIO_Init+0x20a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4a      	ldr	r2, [pc, #296]	; (8001080 <HAL_GPIO_Init+0x31c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d007      	beq.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a49      	ldr	r2, [pc, #292]	; (8001084 <HAL_GPIO_Init+0x320>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_GPIO_Init+0x202>
 8000f62:	2306      	movs	r3, #6
 8000f64:	e00c      	b.n	8000f80 <HAL_GPIO_Init+0x21c>
 8000f66:	2307      	movs	r3, #7
 8000f68:	e00a      	b.n	8000f80 <HAL_GPIO_Init+0x21c>
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	e008      	b.n	8000f80 <HAL_GPIO_Init+0x21c>
 8000f6e:	2304      	movs	r3, #4
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_Init+0x21c>
 8000f72:	2303      	movs	r3, #3
 8000f74:	e004      	b.n	8000f80 <HAL_GPIO_Init+0x21c>
 8000f76:	2302      	movs	r3, #2
 8000f78:	e002      	b.n	8000f80 <HAL_GPIO_Init+0x21c>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e000      	b.n	8000f80 <HAL_GPIO_Init+0x21c>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	69fa      	ldr	r2, [r7, #28]
 8000f82:	f002 0203 	and.w	r2, r2, #3
 8000f86:	0092      	lsls	r2, r2, #2
 8000f88:	4093      	lsls	r3, r2
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f90:	4935      	ldr	r1, [pc, #212]	; (8001068 <HAL_GPIO_Init+0x304>)
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9e:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <HAL_GPIO_Init+0x324>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fc2:	4a31      	ldr	r2, [pc, #196]	; (8001088 <HAL_GPIO_Init+0x324>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <HAL_GPIO_Init+0x324>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fec:	4a26      	ldr	r2, [pc, #152]	; (8001088 <HAL_GPIO_Init+0x324>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <HAL_GPIO_Init+0x324>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001016:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <HAL_GPIO_Init+0x324>)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_GPIO_Init+0x324>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001040:	4a11      	ldr	r2, [pc, #68]	; (8001088 <HAL_GPIO_Init+0x324>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3301      	adds	r3, #1
 800104a:	61fb      	str	r3, [r7, #28]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	2b0f      	cmp	r3, #15
 8001050:	f67f ae96 	bls.w	8000d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40013800 	.word	0x40013800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400
 8001074:	40020800 	.word	0x40020800
 8001078:	40020c00 	.word	0x40020c00
 800107c:	40021000 	.word	0x40021000
 8001080:	40021400 	.word	0x40021400
 8001084:	40021800 	.word	0x40021800
 8001088:	40013c00 	.word	0x40013c00

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a8:	e003      	b.n	80010b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	041a      	lsls	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d0:	887a      	ldrh	r2, [r7, #2]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4013      	ands	r3, r2
 80010d6:	041a      	lsls	r2, r3, #16
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43d9      	mvns	r1, r3
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	400b      	ands	r3, r1
 80010e0:	431a      	orrs	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	619a      	str	r2, [r3, #24]
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e0cc      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001108:	4b68      	ldr	r3, [pc, #416]	; (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d90c      	bls.n	8001130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001116:	4b65      	ldr	r3, [pc, #404]	; (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800111e:	4b63      	ldr	r3, [pc, #396]	; (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	429a      	cmp	r2, r3
 800112a:	d001      	beq.n	8001130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e0b8      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d020      	beq.n	800117e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001148:	4b59      	ldr	r3, [pc, #356]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	4a58      	ldr	r2, [pc, #352]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800114e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001160:	4b53      	ldr	r3, [pc, #332]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	4a52      	ldr	r2, [pc, #328]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800116a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800116c:	4b50      	ldr	r3, [pc, #320]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	494d      	ldr	r1, [pc, #308]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	4313      	orrs	r3, r2
 800117c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d044      	beq.n	8001214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d107      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d119      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e07f      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d003      	beq.n	80011b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d107      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b2:	4b3f      	ldr	r3, [pc, #252]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d109      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e06f      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e067      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011d2:	4b37      	ldr	r3, [pc, #220]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f023 0203 	bic.w	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	4934      	ldr	r1, [pc, #208]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011e4:	f7ff fcd0 	bl	8000b88 <HAL_GetTick>
 80011e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ea:	e00a      	b.n	8001202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ec:	f7ff fccc 	bl	8000b88 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e04f      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001202:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 020c 	and.w	r2, r3, #12
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	429a      	cmp	r2, r3
 8001212:	d1eb      	bne.n	80011ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	d20c      	bcs.n	800123c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d001      	beq.n	800123c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e032      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	4916      	ldr	r1, [pc, #88]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	4313      	orrs	r3, r2
 8001258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d009      	beq.n	800127a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	490e      	ldr	r1, [pc, #56]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	4313      	orrs	r3, r2
 8001278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800127a:	f000 f873 	bl	8001364 <HAL_RCC_GetSysClockFreq>
 800127e:	4602      	mov	r2, r0
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	490a      	ldr	r1, [pc, #40]	; (80012b4 <HAL_RCC_ClockConfig+0x1c0>)
 800128c:	5ccb      	ldrb	r3, [r1, r3]
 800128e:	fa22 f303 	lsr.w	r3, r2, r3
 8001292:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_RCC_ClockConfig+0x1c8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fb66 	bl	800096c <HAL_InitTick>

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023c00 	.word	0x40023c00
 80012b0:	40023800 	.word	0x40023800
 80012b4:	080071a8 	.word	0x080071a8
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000000 	.word	0x20000000

080012d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012dc:	f7ff fff0 	bl	80012c0 <HAL_RCC_GetHCLKFreq>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	0a9b      	lsrs	r3, r3, #10
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	4903      	ldr	r1, [pc, #12]	; (80012fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80012ee:	5ccb      	ldrb	r3, [r1, r3]
 80012f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	080071b8 	.word	0x080071b8

08001300 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	220f      	movs	r2, #15
 800130e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_RCC_GetClockConfig+0x5c>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 0203 	and.w	r2, r3, #3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_RCC_GetClockConfig+0x5c>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <HAL_RCC_GetClockConfig+0x5c>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_RCC_GetClockConfig+0x5c>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	08db      	lsrs	r3, r3, #3
 800133a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_RCC_GetClockConfig+0x60>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 020f 	and.w	r2, r3, #15
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	601a      	str	r2, [r3, #0]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40023c00 	.word	0x40023c00

08001364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001368:	b0ae      	sub	sp, #184	; 0xb8
 800136a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800138a:	4bcb      	ldr	r3, [pc, #812]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b0c      	cmp	r3, #12
 8001394:	f200 8206 	bhi.w	80017a4 <HAL_RCC_GetSysClockFreq+0x440>
 8001398:	a201      	add	r2, pc, #4	; (adr r2, 80013a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800139a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139e:	bf00      	nop
 80013a0:	080013d5 	.word	0x080013d5
 80013a4:	080017a5 	.word	0x080017a5
 80013a8:	080017a5 	.word	0x080017a5
 80013ac:	080017a5 	.word	0x080017a5
 80013b0:	080013dd 	.word	0x080013dd
 80013b4:	080017a5 	.word	0x080017a5
 80013b8:	080017a5 	.word	0x080017a5
 80013bc:	080017a5 	.word	0x080017a5
 80013c0:	080013e5 	.word	0x080013e5
 80013c4:	080017a5 	.word	0x080017a5
 80013c8:	080017a5 	.word	0x080017a5
 80013cc:	080017a5 	.word	0x080017a5
 80013d0:	080015d5 	.word	0x080015d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013d4:	4bb9      	ldr	r3, [pc, #740]	; (80016bc <HAL_RCC_GetSysClockFreq+0x358>)
 80013d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80013da:	e1e7      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013dc:	4bb8      	ldr	r3, [pc, #736]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013e2:	e1e3      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013e4:	4bb4      	ldr	r3, [pc, #720]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013f0:	4bb1      	ldr	r3, [pc, #708]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d071      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013fc:	4bae      	ldr	r3, [pc, #696]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	099b      	lsrs	r3, r3, #6
 8001402:	2200      	movs	r2, #0
 8001404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001408:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800140c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001414:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800141e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001422:	4622      	mov	r2, r4
 8001424:	462b      	mov	r3, r5
 8001426:	f04f 0000 	mov.w	r0, #0
 800142a:	f04f 0100 	mov.w	r1, #0
 800142e:	0159      	lsls	r1, r3, #5
 8001430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001434:	0150      	lsls	r0, r2, #5
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4621      	mov	r1, r4
 800143c:	1a51      	subs	r1, r2, r1
 800143e:	6439      	str	r1, [r7, #64]	; 0x40
 8001440:	4629      	mov	r1, r5
 8001442:	eb63 0301 	sbc.w	r3, r3, r1
 8001446:	647b      	str	r3, [r7, #68]	; 0x44
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001454:	4649      	mov	r1, r9
 8001456:	018b      	lsls	r3, r1, #6
 8001458:	4641      	mov	r1, r8
 800145a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800145e:	4641      	mov	r1, r8
 8001460:	018a      	lsls	r2, r1, #6
 8001462:	4641      	mov	r1, r8
 8001464:	1a51      	subs	r1, r2, r1
 8001466:	63b9      	str	r1, [r7, #56]	; 0x38
 8001468:	4649      	mov	r1, r9
 800146a:	eb63 0301 	sbc.w	r3, r3, r1
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800147c:	4649      	mov	r1, r9
 800147e:	00cb      	lsls	r3, r1, #3
 8001480:	4641      	mov	r1, r8
 8001482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001486:	4641      	mov	r1, r8
 8001488:	00ca      	lsls	r2, r1, #3
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	4603      	mov	r3, r0
 8001490:	4622      	mov	r2, r4
 8001492:	189b      	adds	r3, r3, r2
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
 8001496:	462b      	mov	r3, r5
 8001498:	460a      	mov	r2, r1
 800149a:	eb42 0303 	adc.w	r3, r2, r3
 800149e:	637b      	str	r3, [r7, #52]	; 0x34
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014ac:	4629      	mov	r1, r5
 80014ae:	024b      	lsls	r3, r1, #9
 80014b0:	4621      	mov	r1, r4
 80014b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014b6:	4621      	mov	r1, r4
 80014b8:	024a      	lsls	r2, r1, #9
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014c2:	2200      	movs	r2, #0
 80014c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80014d0:	f7fe fee8 	bl	80002a4 <__aeabi_uldivmod>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4613      	mov	r3, r2
 80014da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014de:	e067      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e0:	4b75      	ldr	r3, [pc, #468]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	2200      	movs	r2, #0
 80014e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80014ec:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80014f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80014fa:	2300      	movs	r3, #0
 80014fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001502:	4622      	mov	r2, r4
 8001504:	462b      	mov	r3, r5
 8001506:	f04f 0000 	mov.w	r0, #0
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	0159      	lsls	r1, r3, #5
 8001510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001514:	0150      	lsls	r0, r2, #5
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4621      	mov	r1, r4
 800151c:	1a51      	subs	r1, r2, r1
 800151e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001520:	4629      	mov	r1, r5
 8001522:	eb63 0301 	sbc.w	r3, r3, r1
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001534:	4649      	mov	r1, r9
 8001536:	018b      	lsls	r3, r1, #6
 8001538:	4641      	mov	r1, r8
 800153a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800153e:	4641      	mov	r1, r8
 8001540:	018a      	lsls	r2, r1, #6
 8001542:	4641      	mov	r1, r8
 8001544:	ebb2 0a01 	subs.w	sl, r2, r1
 8001548:	4649      	mov	r1, r9
 800154a:	eb63 0b01 	sbc.w	fp, r3, r1
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800155a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800155e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001562:	4692      	mov	sl, r2
 8001564:	469b      	mov	fp, r3
 8001566:	4623      	mov	r3, r4
 8001568:	eb1a 0303 	adds.w	r3, sl, r3
 800156c:	623b      	str	r3, [r7, #32]
 800156e:	462b      	mov	r3, r5
 8001570:	eb4b 0303 	adc.w	r3, fp, r3
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001582:	4629      	mov	r1, r5
 8001584:	028b      	lsls	r3, r1, #10
 8001586:	4621      	mov	r1, r4
 8001588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800158c:	4621      	mov	r1, r4
 800158e:	028a      	lsls	r2, r1, #10
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001598:	2200      	movs	r2, #0
 800159a:	673b      	str	r3, [r7, #112]	; 0x70
 800159c:	677a      	str	r2, [r7, #116]	; 0x74
 800159e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015a2:	f7fe fe7f 	bl	80002a4 <__aeabi_uldivmod>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4613      	mov	r3, r2
 80015ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015b0:	4b41      	ldr	r3, [pc, #260]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	0c1b      	lsrs	r3, r3, #16
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	3301      	adds	r3, #1
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80015c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015d2:	e0eb      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015d4:	4b38      	ldr	r3, [pc, #224]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015e0:	4b35      	ldr	r3, [pc, #212]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d06b      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ec:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	099b      	lsrs	r3, r3, #6
 80015f2:	2200      	movs	r2, #0
 80015f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80015f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80015f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015fe:	663b      	str	r3, [r7, #96]	; 0x60
 8001600:	2300      	movs	r3, #0
 8001602:	667b      	str	r3, [r7, #100]	; 0x64
 8001604:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001608:	4622      	mov	r2, r4
 800160a:	462b      	mov	r3, r5
 800160c:	f04f 0000 	mov.w	r0, #0
 8001610:	f04f 0100 	mov.w	r1, #0
 8001614:	0159      	lsls	r1, r3, #5
 8001616:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800161a:	0150      	lsls	r0, r2, #5
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4621      	mov	r1, r4
 8001622:	1a51      	subs	r1, r2, r1
 8001624:	61b9      	str	r1, [r7, #24]
 8001626:	4629      	mov	r1, r5
 8001628:	eb63 0301 	sbc.w	r3, r3, r1
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800163a:	4659      	mov	r1, fp
 800163c:	018b      	lsls	r3, r1, #6
 800163e:	4651      	mov	r1, sl
 8001640:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001644:	4651      	mov	r1, sl
 8001646:	018a      	lsls	r2, r1, #6
 8001648:	4651      	mov	r1, sl
 800164a:	ebb2 0801 	subs.w	r8, r2, r1
 800164e:	4659      	mov	r1, fp
 8001650:	eb63 0901 	sbc.w	r9, r3, r1
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001660:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001664:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001668:	4690      	mov	r8, r2
 800166a:	4699      	mov	r9, r3
 800166c:	4623      	mov	r3, r4
 800166e:	eb18 0303 	adds.w	r3, r8, r3
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	462b      	mov	r3, r5
 8001676:	eb49 0303 	adc.w	r3, r9, r3
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001688:	4629      	mov	r1, r5
 800168a:	024b      	lsls	r3, r1, #9
 800168c:	4621      	mov	r1, r4
 800168e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001692:	4621      	mov	r1, r4
 8001694:	024a      	lsls	r2, r1, #9
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800169e:	2200      	movs	r2, #0
 80016a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80016a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016a8:	f7fe fdfc 	bl	80002a4 <__aeabi_uldivmod>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4613      	mov	r3, r2
 80016b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016b6:	e065      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x420>
 80016b8:	40023800 	.word	0x40023800
 80016bc:	00f42400 	.word	0x00f42400
 80016c0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c4:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <HAL_RCC_GetSysClockFreq+0x458>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	099b      	lsrs	r3, r3, #6
 80016ca:	2200      	movs	r2, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	4611      	mov	r1, r2
 80016d0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016d4:	653b      	str	r3, [r7, #80]	; 0x50
 80016d6:	2300      	movs	r3, #0
 80016d8:	657b      	str	r3, [r7, #84]	; 0x54
 80016da:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80016de:	4642      	mov	r2, r8
 80016e0:	464b      	mov	r3, r9
 80016e2:	f04f 0000 	mov.w	r0, #0
 80016e6:	f04f 0100 	mov.w	r1, #0
 80016ea:	0159      	lsls	r1, r3, #5
 80016ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016f0:	0150      	lsls	r0, r2, #5
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4641      	mov	r1, r8
 80016f8:	1a51      	subs	r1, r2, r1
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	4649      	mov	r1, r9
 80016fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001710:	4659      	mov	r1, fp
 8001712:	018b      	lsls	r3, r1, #6
 8001714:	4651      	mov	r1, sl
 8001716:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800171a:	4651      	mov	r1, sl
 800171c:	018a      	lsls	r2, r1, #6
 800171e:	4651      	mov	r1, sl
 8001720:	1a54      	subs	r4, r2, r1
 8001722:	4659      	mov	r1, fp
 8001724:	eb63 0501 	sbc.w	r5, r3, r1
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	00eb      	lsls	r3, r5, #3
 8001732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001736:	00e2      	lsls	r2, r4, #3
 8001738:	4614      	mov	r4, r2
 800173a:	461d      	mov	r5, r3
 800173c:	4643      	mov	r3, r8
 800173e:	18e3      	adds	r3, r4, r3
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	464b      	mov	r3, r9
 8001744:	eb45 0303 	adc.w	r3, r5, r3
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001756:	4629      	mov	r1, r5
 8001758:	028b      	lsls	r3, r1, #10
 800175a:	4621      	mov	r1, r4
 800175c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001760:	4621      	mov	r1, r4
 8001762:	028a      	lsls	r2, r1, #10
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800176c:	2200      	movs	r2, #0
 800176e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001770:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001772:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001776:	f7fe fd95 	bl	80002a4 <__aeabi_uldivmod>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4613      	mov	r3, r2
 8001780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_RCC_GetSysClockFreq+0x458>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	0f1b      	lsrs	r3, r3, #28
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001792:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001796:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017a2:	e003      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	37b8      	adds	r7, #184	; 0xb8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	00f42400 	.word	0x00f42400

080017c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e28d      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8083 	beq.w	80018ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017e4:	4b94      	ldr	r3, [pc, #592]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d019      	beq.n	8001824 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017f0:	4b91      	ldr	r3, [pc, #580]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017fc:	4b8e      	ldr	r3, [pc, #568]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001808:	d00c      	beq.n	8001824 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180a:	4b8b      	ldr	r3, [pc, #556]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d112      	bne.n	800183c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001816:	4b88      	ldr	r3, [pc, #544]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001822:	d10b      	bne.n	800183c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	4b84      	ldr	r3, [pc, #528]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d05b      	beq.n	80018e8 <HAL_RCC_OscConfig+0x124>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d157      	bne.n	80018e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e25a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001844:	d106      	bne.n	8001854 <HAL_RCC_OscConfig+0x90>
 8001846:	4b7c      	ldr	r3, [pc, #496]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a7b      	ldr	r2, [pc, #492]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e01d      	b.n	8001890 <HAL_RCC_OscConfig+0xcc>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0xb4>
 800185e:	4b76      	ldr	r3, [pc, #472]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a75      	ldr	r2, [pc, #468]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a72      	ldr	r2, [pc, #456]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0xcc>
 8001878:	4b6f      	ldr	r3, [pc, #444]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a6e      	ldr	r2, [pc, #440]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 800187e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b6c      	ldr	r3, [pc, #432]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a6b      	ldr	r2, [pc, #428]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 800188a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d013      	beq.n	80018c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff f976 	bl	8000b88 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff f972 	bl	8000b88 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e21f      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b61      	ldr	r3, [pc, #388]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0xdc>
 80018be:	e014      	b.n	80018ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff f962 	bl	8000b88 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff f95e 	bl	8000b88 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	; 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e20b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x104>
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d06f      	beq.n	80019d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018f6:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d017      	beq.n	8001932 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001902:	4b4d      	ldr	r3, [pc, #308]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800190a:	2b08      	cmp	r3, #8
 800190c:	d105      	bne.n	800191a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800190e:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800191a:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001922:	2b0c      	cmp	r3, #12
 8001924:	d11c      	bne.n	8001960 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001926:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d116      	bne.n	8001960 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x186>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e1d3      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4937      	ldr	r1, [pc, #220]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	e03a      	b.n	80019d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001968:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <HAL_RCC_OscConfig+0x278>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff f90b 	bl	8000b88 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001976:	f7ff f907 	bl	8000b88 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e1b4      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001994:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4925      	ldr	r1, [pc, #148]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
 80019a8:	e015      	b.n	80019d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019aa:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_RCC_OscConfig+0x278>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff f8ea 	bl	8000b88 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b8:	f7ff f8e6 	bl	8000b88 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e193      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d036      	beq.n	8001a50 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d016      	beq.n	8001a18 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_RCC_OscConfig+0x27c>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff f8ca 	bl	8000b88 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff f8c6 	bl	8000b88 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e173      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x234>
 8001a16:	e01b      	b.n	8001a50 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_RCC_OscConfig+0x27c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1e:	f7ff f8b3 	bl	8000b88 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a24:	e00e      	b.n	8001a44 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a26:	f7ff f8af 	bl	8000b88 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d907      	bls.n	8001a44 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e15c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	42470000 	.word	0x42470000
 8001a40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	4b8a      	ldr	r3, [pc, #552]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ea      	bne.n	8001a26 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 8097 	beq.w	8001b8c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a62:	4b83      	ldr	r3, [pc, #524]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10f      	bne.n	8001a8e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	4b7f      	ldr	r3, [pc, #508]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a7e      	ldr	r2, [pc, #504]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b7c      	ldr	r3, [pc, #496]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8e:	4b79      	ldr	r3, [pc, #484]	; (8001c74 <HAL_RCC_OscConfig+0x4b0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d118      	bne.n	8001acc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a9a:	4b76      	ldr	r3, [pc, #472]	; (8001c74 <HAL_RCC_OscConfig+0x4b0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a75      	ldr	r2, [pc, #468]	; (8001c74 <HAL_RCC_OscConfig+0x4b0>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff f86f 	bl	8000b88 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aae:	f7ff f86b 	bl	8000b88 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e118      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <HAL_RCC_OscConfig+0x4b0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x31e>
 8001ad4:	4b66      	ldr	r3, [pc, #408]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	4a65      	ldr	r2, [pc, #404]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae0:	e01c      	b.n	8001b1c <HAL_RCC_OscConfig+0x358>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x340>
 8001aea:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aee:	4a60      	ldr	r2, [pc, #384]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	6713      	str	r3, [r2, #112]	; 0x70
 8001af6:	4b5e      	ldr	r3, [pc, #376]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	4a5d      	ldr	r2, [pc, #372]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6713      	str	r3, [r2, #112]	; 0x70
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0x358>
 8001b04:	4b5a      	ldr	r3, [pc, #360]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	4a59      	ldr	r2, [pc, #356]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b10:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	4a56      	ldr	r2, [pc, #344]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b16:	f023 0304 	bic.w	r3, r3, #4
 8001b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d015      	beq.n	8001b50 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7ff f830 	bl	8000b88 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f82c 	bl	8000b88 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e0d7      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b42:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0ee      	beq.n	8001b2c <HAL_RCC_OscConfig+0x368>
 8001b4e:	e014      	b.n	8001b7a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7ff f81a 	bl	8000b88 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7ff f816 	bl	8000b88 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e0c1      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6e:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1ee      	bne.n	8001b58 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b80:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	4a3a      	ldr	r2, [pc, #232]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80ad 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b96:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d060      	beq.n	8001c64 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d145      	bne.n	8001c36 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <HAL_RCC_OscConfig+0x4b4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7fe ffea 	bl	8000b88 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7fe ffe6 	bl	8000b88 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e093      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69da      	ldr	r2, [r3, #28]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	019b      	lsls	r3, r3, #6
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	041b      	lsls	r3, r3, #16
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	071b      	lsls	r3, r3, #28
 8001c02:	491b      	ldr	r1, [pc, #108]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_RCC_OscConfig+0x4b4>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0e:	f7fe ffbb 	bl	8000b88 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c16:	f7fe ffb7 	bl	8000b88 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e064      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x452>
 8001c34:	e05c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_RCC_OscConfig+0x4b4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7fe ffa4 	bl	8000b88 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c44:	f7fe ffa0 	bl	8000b88 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e04d      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x480>
 8001c62:	e045      	b.n	8001cf0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d107      	bne.n	8001c7c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e040      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000
 8001c78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <HAL_RCC_OscConfig+0x538>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d030      	beq.n	8001cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d129      	bne.n	8001cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d122      	bne.n	8001cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cac:	4013      	ands	r3, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d119      	bne.n	8001cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	085b      	lsrs	r3, r3, #1
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d10f      	bne.n	8001cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e041      	b.n	8001d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f839 	bl	8001d9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4610      	mov	r0, r2
 8001d40:	f000 f9d8 	bl	80020f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d001      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e04e      	b.n	8001e6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d022      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df6:	d01d      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <HAL_TIM_Base_Start_IT+0xc8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d018      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d013      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00e      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <HAL_TIM_Base_Start_IT+0xd8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d004      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a18      	ldr	r2, [pc, #96]	; (8001e90 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d111      	bne.n	8001e58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d010      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0201 	orr.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e56:	e007      	b.n	8001e68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40000800 	.word	0x40000800
 8001e84:	40000c00 	.word	0x40000c00
 8001e88:	40010400 	.word	0x40010400
 8001e8c:	40014000 	.word	0x40014000
 8001e90:	40001800 	.word	0x40001800

08001e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d122      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0202 	mvn.w	r2, #2
 8001ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f8ee 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8e0 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f8f1 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d122      	bne.n	8001f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d11b      	bne.n	8001f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0204 	mvn.w	r2, #4
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8c4 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8b6 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f8c7 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d122      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d11b      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0208 	mvn.w	r2, #8
 8001f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f89a 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001f84:	e005      	b.n	8001f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f88c 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f89d 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b10      	cmp	r3, #16
 8001fa4:	d122      	bne.n	8001fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b10      	cmp	r3, #16
 8001fb2:	d11b      	bne.n	8001fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0210 	mvn.w	r2, #16
 8001fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f870 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f862 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f873 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10e      	bne.n	8002018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d107      	bne.n	8002018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0201 	mvn.w	r2, #1
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fc6a 	bl	80008ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002022:	2b80      	cmp	r3, #128	; 0x80
 8002024:	d10e      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d107      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f902 	bl	8002248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	2b40      	cmp	r3, #64	; 0x40
 8002050:	d10e      	bne.n	8002070 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205c:	2b40      	cmp	r3, #64	; 0x40
 800205e:	d107      	bne.n	8002070 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f838 	bl	80020e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b20      	cmp	r3, #32
 800207c:	d10e      	bne.n	800209c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	2b20      	cmp	r3, #32
 800208a:	d107      	bne.n	800209c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0220 	mvn.w	r2, #32
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f8cc 	bl	8002234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a40      	ldr	r2, [pc, #256]	; (8002208 <TIM_Base_SetConfig+0x114>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d013      	beq.n	8002134 <TIM_Base_SetConfig+0x40>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002112:	d00f      	beq.n	8002134 <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3d      	ldr	r2, [pc, #244]	; (800220c <TIM_Base_SetConfig+0x118>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00b      	beq.n	8002134 <TIM_Base_SetConfig+0x40>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3c      	ldr	r2, [pc, #240]	; (8002210 <TIM_Base_SetConfig+0x11c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d007      	beq.n	8002134 <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3b      	ldr	r2, [pc, #236]	; (8002214 <TIM_Base_SetConfig+0x120>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d003      	beq.n	8002134 <TIM_Base_SetConfig+0x40>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a3a      	ldr	r2, [pc, #232]	; (8002218 <TIM_Base_SetConfig+0x124>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d108      	bne.n	8002146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <TIM_Base_SetConfig+0x114>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d02b      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002154:	d027      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a2c      	ldr	r2, [pc, #176]	; (800220c <TIM_Base_SetConfig+0x118>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d023      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2b      	ldr	r2, [pc, #172]	; (8002210 <TIM_Base_SetConfig+0x11c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01f      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a2a      	ldr	r2, [pc, #168]	; (8002214 <TIM_Base_SetConfig+0x120>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01b      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a29      	ldr	r2, [pc, #164]	; (8002218 <TIM_Base_SetConfig+0x124>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d017      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a28      	ldr	r2, [pc, #160]	; (800221c <TIM_Base_SetConfig+0x128>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a27      	ldr	r2, [pc, #156]	; (8002220 <TIM_Base_SetConfig+0x12c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00f      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a26      	ldr	r2, [pc, #152]	; (8002224 <TIM_Base_SetConfig+0x130>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00b      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a25      	ldr	r2, [pc, #148]	; (8002228 <TIM_Base_SetConfig+0x134>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a24      	ldr	r2, [pc, #144]	; (800222c <TIM_Base_SetConfig+0x138>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d003      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a23      	ldr	r2, [pc, #140]	; (8002230 <TIM_Base_SetConfig+0x13c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d108      	bne.n	80021b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <TIM_Base_SetConfig+0x114>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d003      	beq.n	80021ec <TIM_Base_SetConfig+0xf8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a0c      	ldr	r2, [pc, #48]	; (8002218 <TIM_Base_SetConfig+0x124>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d103      	bne.n	80021f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	615a      	str	r2, [r3, #20]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40010000 	.word	0x40010000
 800220c:	40000400 	.word	0x40000400
 8002210:	40000800 	.word	0x40000800
 8002214:	40000c00 	.word	0x40000c00
 8002218:	40010400 	.word	0x40010400
 800221c:	40014000 	.word	0x40014000
 8002220:	40014400 	.word	0x40014400
 8002224:	40014800 	.word	0x40014800
 8002228:	40001800 	.word	0x40001800
 800222c:	40001c00 	.word	0x40001c00
 8002230:	40002000 	.word	0x40002000

08002234 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f103 0208 	add.w	r2, r3, #8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f04f 32ff 	mov.w	r2, #4294967295
 8002274:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f103 0208 	add.w	r2, r3, #8
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f103 0208 	add.w	r2, r3, #8
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022b6:	b480      	push	{r7}
 80022b8:	b085      	sub	sp, #20
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d103      	bne.n	80022d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	e00c      	b.n	80022f0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3308      	adds	r3, #8
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	e002      	b.n	80022e4 <vListInsert+0x2e>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d2f6      	bcs.n	80022de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	601a      	str	r2, [r3, #0]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6892      	ldr	r2, [r2, #8]
 800233e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6852      	ldr	r2, [r2, #4]
 8002348:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	d103      	bne.n	800235c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	1e5a      	subs	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002386:	2301      	movs	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10a      	bne.n	80023aa <xQueueGenericReset+0x2e>
        __asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	60fb      	str	r3, [r7, #12]
    }
 80023a6:	bf00      	nop
 80023a8:	e7fe      	b.n	80023a8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d05d      	beq.n	800246c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d059      	beq.n	800246c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c0:	2100      	movs	r1, #0
 80023c2:	fba3 2302 	umull	r2, r3, r3, r2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d000      	beq.n	80023cc <xQueueGenericReset+0x50>
 80023ca:	2101      	movs	r1, #1
 80023cc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d14c      	bne.n	800246c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80023d2:	f001 feb1 	bl	8004138 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023de:	6939      	ldr	r1, [r7, #16]
 80023e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	441a      	add	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2200      	movs	r2, #0
 80023f0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002402:	3b01      	subs	r3, #1
 8002404:	6939      	ldr	r1, [r7, #16]
 8002406:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	441a      	add	r2, r3
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	22ff      	movs	r2, #255	; 0xff
 8002416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	22ff      	movs	r2, #255	; 0xff
 800241e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d114      	bne.n	8002452 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01a      	beq.n	8002466 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	3310      	adds	r3, #16
 8002434:	4618      	mov	r0, r3
 8002436:	f001 f81b 	bl	8003470 <xTaskRemoveFromEventList>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d012      	beq.n	8002466 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002440:	4b15      	ldr	r3, [pc, #84]	; (8002498 <xQueueGenericReset+0x11c>)
 8002442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	f3bf 8f4f 	dsb	sy
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	e009      	b.n	8002466 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	3310      	adds	r3, #16
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ff00 	bl	800225c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	3324      	adds	r3, #36	; 0x24
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fefb 	bl	800225c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002466:	f001 fe97 	bl	8004198 <vPortExitCritical>
 800246a:	e001      	b.n	8002470 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10a      	bne.n	800248c <xQueueGenericReset+0x110>
        __asm volatile
 8002476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	60bb      	str	r3, [r7, #8]
    }
 8002488:	bf00      	nop
 800248a:	e7fe      	b.n	800248a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800248c:	697b      	ldr	r3, [r7, #20]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	e000ed04 	.word	0xe000ed04

0800249c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	4613      	mov	r3, r2
 80024a8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d02e      	beq.n	8002512 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024b4:	2100      	movs	r1, #0
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	fba3 2302 	umull	r2, r3, r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d000      	beq.n	80024c4 <xQueueGenericCreate+0x28>
 80024c2:	2101      	movs	r1, #1
 80024c4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d123      	bne.n	8002512 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024d2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80024d6:	d81c      	bhi.n	8002512 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	fb02 f303 	mul.w	r3, r2, r3
 80024e0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	3350      	adds	r3, #80	; 0x50
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 ff50 	bl	800438c <pvPortMalloc>
 80024ec:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d01c      	beq.n	800252e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3350      	adds	r3, #80	; 0x50
 80024fc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024fe:	79fa      	ldrb	r2, [r7, #7]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f814 	bl	8002538 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002510:	e00d      	b.n	800252e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <xQueueGenericCreate+0x92>
        __asm volatile
 8002518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	613b      	str	r3, [r7, #16]
    }
 800252a:	bf00      	nop
 800252c:	e7fe      	b.n	800252c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800252e:	69fb      	ldr	r3, [r7, #28]
    }
 8002530:	4618      	mov	r0, r3
 8002532:	3720      	adds	r7, #32
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d103      	bne.n	8002554 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	e002      	b.n	800255a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002566:	2101      	movs	r1, #1
 8002568:	69b8      	ldr	r0, [r7, #24]
 800256a:	f7ff ff07 	bl	800237c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	68f9      	ldr	r1, [r7, #12]
 800257c:	2073      	movs	r0, #115	; 0x73
 800257e:	f003 fe69 	bl	8006254 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b08f      	sub	sp, #60	; 0x3c
 8002590:	af02      	add	r7, sp, #8
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002598:	2300      	movs	r3, #0
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10a      	bne.n	80025bc <xQueueReceive+0x30>
        __asm volatile
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	623b      	str	r3, [r7, #32]
    }
 80025b8:	bf00      	nop
 80025ba:	e7fe      	b.n	80025ba <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d103      	bne.n	80025ca <xQueueReceive+0x3e>
 80025c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <xQueueReceive+0x42>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <xQueueReceive+0x44>
 80025ce:	2300      	movs	r3, #0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <xQueueReceive+0x5e>
        __asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	61fb      	str	r3, [r7, #28]
    }
 80025e6:	bf00      	nop
 80025e8:	e7fe      	b.n	80025e8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025ea:	f001 f953 	bl	8003894 <xTaskGetSchedulerState>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <xQueueReceive+0x6e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <xQueueReceive+0x72>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <xQueueReceive+0x74>
 80025fe:	2300      	movs	r3, #0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <xQueueReceive+0x8e>
        __asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	61bb      	str	r3, [r7, #24]
    }
 8002616:	bf00      	nop
 8002618:	e7fe      	b.n	8002618 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800261a:	f001 fd8d 	bl	8004138 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	2b00      	cmp	r3, #0
 8002628:	d02f      	beq.n	800268a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800262a:	68b9      	ldr	r1, [r7, #8]
 800262c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800262e:	f000 f8bd 	bl	80027ac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	4618      	mov	r0, r3
 8002636:	f004 fb3b 	bl	8006cb0 <SEGGER_SYSVIEW_ShrinkId>
 800263a:	4604      	mov	r4, r0
 800263c:	2000      	movs	r0, #0
 800263e:	f004 fb37 	bl	8006cb0 <SEGGER_SYSVIEW_ShrinkId>
 8002642:	4602      	mov	r2, r0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2101      	movs	r1, #1
 8002648:	9100      	str	r1, [sp, #0]
 800264a:	4621      	mov	r1, r4
 800264c:	205c      	movs	r0, #92	; 0x5c
 800264e:	f003 fe77 	bl	8006340 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	1e5a      	subs	r2, r3, #1
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00f      	beq.n	8002682 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	3310      	adds	r3, #16
 8002666:	4618      	mov	r0, r3
 8002668:	f000 ff02 	bl	8003470 <xTaskRemoveFromEventList>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002672:	4b4d      	ldr	r3, [pc, #308]	; (80027a8 <xQueueReceive+0x21c>)
 8002674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002682:	f001 fd89 	bl	8004198 <vPortExitCritical>
                return pdPASS;
 8002686:	2301      	movs	r3, #1
 8002688:	e08a      	b.n	80027a0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d113      	bne.n	80026b8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002690:	f001 fd82 	bl	8004198 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	4618      	mov	r0, r3
 8002698:	f004 fb0a 	bl	8006cb0 <SEGGER_SYSVIEW_ShrinkId>
 800269c:	4604      	mov	r4, r0
 800269e:	2000      	movs	r0, #0
 80026a0:	f004 fb06 	bl	8006cb0 <SEGGER_SYSVIEW_ShrinkId>
 80026a4:	4602      	mov	r2, r0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2101      	movs	r1, #1
 80026aa:	9100      	str	r1, [sp, #0]
 80026ac:	4621      	mov	r1, r4
 80026ae:	205c      	movs	r0, #92	; 0x5c
 80026b0:	f003 fe46 	bl	8006340 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e073      	b.n	80027a0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026be:	f107 0310 	add.w	r3, r7, #16
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 ffac 	bl	8003620 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026c8:	2301      	movs	r3, #1
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026cc:	f001 fd64 	bl	8004198 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026d0:	f000 fbaa 	bl	8002e28 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026d4:	f001 fd30 	bl	8004138 <vPortEnterCritical>
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026de:	b25b      	sxtb	r3, r3
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d103      	bne.n	80026ee <xQueueReceive+0x162>
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026f4:	b25b      	sxtb	r3, r3
 80026f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fa:	d103      	bne.n	8002704 <xQueueReceive+0x178>
 80026fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002704:	f001 fd48 	bl	8004198 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002708:	1d3a      	adds	r2, r7, #4
 800270a:	f107 0310 	add.w	r3, r7, #16
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f000 ff9b 	bl	800364c <xTaskCheckForTimeOut>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d124      	bne.n	8002766 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800271c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800271e:	f000 f8bd 	bl	800289c <prvIsQueueEmpty>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d018      	beq.n	800275a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	3324      	adds	r3, #36	; 0x24
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fe31 	bl	8003398 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002738:	f000 f85e 	bl	80027f8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800273c:	f000 fb82 	bl	8002e44 <xTaskResumeAll>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	f47f af69 	bne.w	800261a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <xQueueReceive+0x21c>)
 800274a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	e75f      	b.n	800261a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800275a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800275c:	f000 f84c 	bl	80027f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002760:	f000 fb70 	bl	8002e44 <xTaskResumeAll>
 8002764:	e759      	b.n	800261a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002768:	f000 f846 	bl	80027f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800276c:	f000 fb6a 	bl	8002e44 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002772:	f000 f893 	bl	800289c <prvIsQueueEmpty>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	f43f af4e 	beq.w	800261a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002780:	4618      	mov	r0, r3
 8002782:	f004 fa95 	bl	8006cb0 <SEGGER_SYSVIEW_ShrinkId>
 8002786:	4604      	mov	r4, r0
 8002788:	2000      	movs	r0, #0
 800278a:	f004 fa91 	bl	8006cb0 <SEGGER_SYSVIEW_ShrinkId>
 800278e:	4602      	mov	r2, r0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2101      	movs	r1, #1
 8002794:	9100      	str	r1, [sp, #0]
 8002796:	4621      	mov	r1, r4
 8002798:	205c      	movs	r0, #92	; 0x5c
 800279a:	f003 fdd1 	bl	8006340 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800279e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3734      	adds	r7, #52	; 0x34
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}
 80027a8:	e000ed04 	.word	0xe000ed04

080027ac <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d018      	beq.n	80027f0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	441a      	add	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d303      	bcc.n	80027e0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68d9      	ldr	r1, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	461a      	mov	r2, r3
 80027ea:	6838      	ldr	r0, [r7, #0]
 80027ec:	f004 fc28 	bl	8007040 <memcpy>
    }
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002800:	f001 fc9a 	bl	8004138 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800280a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800280c:	e011      	b.n	8002832 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	2b00      	cmp	r3, #0
 8002814:	d012      	beq.n	800283c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3324      	adds	r3, #36	; 0x24
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fe28 	bl	8003470 <xTaskRemoveFromEventList>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002826:	f000 ff77 	bl	8003718 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	3b01      	subs	r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002836:	2b00      	cmp	r3, #0
 8002838:	dce9      	bgt.n	800280e <prvUnlockQueue+0x16>
 800283a:	e000      	b.n	800283e <prvUnlockQueue+0x46>
                    break;
 800283c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	22ff      	movs	r2, #255	; 0xff
 8002842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002846:	f001 fca7 	bl	8004198 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800284a:	f001 fc75 	bl	8004138 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002854:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002856:	e011      	b.n	800287c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3310      	adds	r3, #16
 8002864:	4618      	mov	r0, r3
 8002866:	f000 fe03 	bl	8003470 <xTaskRemoveFromEventList>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002870:	f000 ff52 	bl	8003718 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002874:	7bbb      	ldrb	r3, [r7, #14]
 8002876:	3b01      	subs	r3, #1
 8002878:	b2db      	uxtb	r3, r3
 800287a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800287c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002880:	2b00      	cmp	r3, #0
 8002882:	dce9      	bgt.n	8002858 <prvUnlockQueue+0x60>
 8002884:	e000      	b.n	8002888 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002886:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	22ff      	movs	r2, #255	; 0xff
 800288c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002890:	f001 fc82 	bl	8004198 <vPortExitCritical>
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80028a4:	f001 fc48 	bl	8004138 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028b0:	2301      	movs	r3, #1
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	e001      	b.n	80028ba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028ba:	f001 fc6d 	bl	8004198 <vPortExitCritical>

    return xReturn;
 80028be:	68fb      	ldr	r3, [r7, #12]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	60fb      	str	r3, [r7, #12]
    }
 80028ee:	bf00      	nop
 80028f0:	e7fe      	b.n	80028f0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d024      	beq.n	8002942 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	e01e      	b.n	800293c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80028fe:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <vQueueAddToRegistry+0xa8>)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	429a      	cmp	r2, r3
 800290c:	d105      	bne.n	800291a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4a17      	ldr	r2, [pc, #92]	; (8002970 <vQueueAddToRegistry+0xa8>)
 8002914:	4413      	add	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
                    break;
 8002918:	e013      	b.n	8002942 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <vQueueAddToRegistry+0x6e>
 8002920:	4a13      	ldr	r2, [pc, #76]	; (8002970 <vQueueAddToRegistry+0xa8>)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d104      	bne.n	8002936 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4a0f      	ldr	r2, [pc, #60]	; (8002970 <vQueueAddToRegistry+0xa8>)
 8002932:	4413      	add	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3301      	adds	r3, #1
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b07      	cmp	r3, #7
 8002940:	d9dd      	bls.n	80028fe <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00f      	beq.n	8002968 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4618      	mov	r0, r3
 8002958:	f004 f9aa 	bl	8006cb0 <SEGGER_SYSVIEW_ShrinkId>
 800295c:	4601      	mov	r1, r0
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	2071      	movs	r0, #113	; 0x71
 8002964:	f003 fc1c 	bl	80061a0 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002968:	bf00      	nop
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000084 	.word	0x20000084

08002974 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002984:	f001 fbd8 	bl	8004138 <vPortEnterCritical>
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800298e:	b25b      	sxtb	r3, r3
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d103      	bne.n	800299e <vQueueWaitForMessageRestricted+0x2a>
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029a4:	b25b      	sxtb	r3, r3
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029aa:	d103      	bne.n	80029b4 <vQueueWaitForMessageRestricted+0x40>
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029b4:	f001 fbf0 	bl	8004198 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3324      	adds	r3, #36	; 0x24
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fd09 	bl	80033e0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80029ce:	6978      	ldr	r0, [r7, #20]
 80029d0:	f7ff ff12 	bl	80027f8 <prvUnlockQueue>
    }
 80029d4:	bf00      	nop
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08c      	sub	sp, #48	; 0x30
 80029e0:	af04      	add	r7, sp, #16
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f001 fccb 	bl	800438c <pvPortMalloc>
 80029f6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d013      	beq.n	8002a26 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029fe:	2058      	movs	r0, #88	; 0x58
 8002a00:	f001 fcc4 	bl	800438c <pvPortMalloc>
 8002a04:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002a0c:	2258      	movs	r2, #88	; 0x58
 8002a0e:	2100      	movs	r1, #0
 8002a10:	69f8      	ldr	r0, [r7, #28]
 8002a12:	f004 fb23 	bl	800705c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a1c:	e005      	b.n	8002a2a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f001 fd6e 	bl	8004500 <vPortFree>
 8002a24:	e001      	b.n	8002a2a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d013      	beq.n	8002a58 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a30:	88fa      	ldrh	r2, [r7, #6]
 8002a32:	2300      	movs	r3, #0
 8002a34:	9303      	str	r3, [sp, #12]
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	9302      	str	r3, [sp, #8]
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f80e 	bl	8002a68 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a4c:	69f8      	ldr	r0, [r7, #28]
 8002a4e:	f000 f899 	bl	8002b84 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	e002      	b.n	8002a5e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a5e:	69bb      	ldr	r3, [r7, #24]
    }
 8002a60:	4618      	mov	r0, r3
 8002a62:	3720      	adds	r7, #32
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	461a      	mov	r2, r3
 8002a80:	21a5      	movs	r1, #165	; 0xa5
 8002a82:	f004 faeb 	bl	800705c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a90:	3b01      	subs	r3, #1
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f023 0307 	bic.w	r3, r3, #7
 8002a9e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aae:	f383 8811 	msr	BASEPRI, r3
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	617b      	str	r3, [r7, #20]
    }
 8002abc:	bf00      	nop
 8002abe:	e7fe      	b.n	8002abe <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d01e      	beq.n	8002b04 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	e012      	b.n	8002af2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	7819      	ldrb	r1, [r3, #0]
 8002ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	4413      	add	r3, r2
 8002ada:	3334      	adds	r3, #52	; 0x34
 8002adc:	460a      	mov	r2, r1
 8002ade:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d006      	beq.n	8002afa <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	3301      	adds	r3, #1
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	2b09      	cmp	r3, #9
 8002af6:	d9e9      	bls.n	8002acc <prvInitialiseNewTask+0x64>
 8002af8:	e000      	b.n	8002afc <prvInitialiseNewTask+0x94>
            {
                break;
 8002afa:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d90a      	bls.n	8002b20 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	613b      	str	r3, [r7, #16]
    }
 8002b1c:	bf00      	nop
 8002b1e:	e7fe      	b.n	8002b1e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d901      	bls.n	8002b2a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b26:	2304      	movs	r3, #4
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b34:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b38:	3304      	adds	r3, #4
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fbae 	bl	800229c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	3318      	adds	r3, #24
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fba9 	bl	800229c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b4e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	f1c3 0205 	rsb	r2, r3, #5
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	68f9      	ldr	r1, [r7, #12]
 8002b64:	69b8      	ldr	r0, [r7, #24]
 8002b66:	f001 f9b7 	bl	8003ed8 <pxPortInitialiseStack>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b7a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b7c:	bf00      	nop
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b84:	b5b0      	push	{r4, r5, r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b8c:	f001 fad4 	bl	8004138 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b90:	4b4f      	ldr	r3, [pc, #316]	; (8002cd0 <prvAddNewTaskToReadyList+0x14c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	4a4e      	ldr	r2, [pc, #312]	; (8002cd0 <prvAddNewTaskToReadyList+0x14c>)
 8002b98:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b9a:	4b4e      	ldr	r3, [pc, #312]	; (8002cd4 <prvAddNewTaskToReadyList+0x150>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002ba2:	4a4c      	ldr	r2, [pc, #304]	; (8002cd4 <prvAddNewTaskToReadyList+0x150>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ba8:	4b49      	ldr	r3, [pc, #292]	; (8002cd0 <prvAddNewTaskToReadyList+0x14c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d110      	bne.n	8002bd2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002bb0:	f000 fdd6 	bl	8003760 <prvInitialiseTaskLists>
 8002bb4:	e00d      	b.n	8002bd2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002bb6:	4b48      	ldr	r3, [pc, #288]	; (8002cd8 <prvAddNewTaskToReadyList+0x154>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bbe:	4b45      	ldr	r3, [pc, #276]	; (8002cd4 <prvAddNewTaskToReadyList+0x150>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d802      	bhi.n	8002bd2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002bcc:	4a41      	ldr	r2, [pc, #260]	; (8002cd4 <prvAddNewTaskToReadyList+0x150>)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002bd2:	4b42      	ldr	r3, [pc, #264]	; (8002cdc <prvAddNewTaskToReadyList+0x158>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	4a40      	ldr	r2, [pc, #256]	; (8002cdc <prvAddNewTaskToReadyList+0x158>)
 8002bda:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bdc:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <prvAddNewTaskToReadyList+0x158>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d016      	beq.n	8002c18 <prvAddNewTaskToReadyList+0x94>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f003 ff99 	bl	8006b24 <SEGGER_SYSVIEW_OnTaskCreate>
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	461d      	mov	r5, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461c      	mov	r4, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	1ae3      	subs	r3, r4, r3
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	462b      	mov	r3, r5
 8002c14:	f001 fe36 	bl	8004884 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f004 f806 	bl	8006c2c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	2201      	movs	r2, #1
 8002c26:	409a      	lsls	r2, r3
 8002c28:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <prvAddNewTaskToReadyList+0x15c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	4a2c      	ldr	r2, [pc, #176]	; (8002ce0 <prvAddNewTaskToReadyList+0x15c>)
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c36:	492b      	ldr	r1, [pc, #172]	; (8002ce4 <prvAddNewTaskToReadyList+0x160>)
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	3304      	adds	r3, #4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	3204      	adds	r2, #4
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	1d1a      	adds	r2, r3, #4
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4a1b      	ldr	r2, [pc, #108]	; (8002ce4 <prvAddNewTaskToReadyList+0x160>)
 8002c76:	441a      	add	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	615a      	str	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c80:	4918      	ldr	r1, [pc, #96]	; (8002ce4 <prvAddNewTaskToReadyList+0x160>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	1c59      	adds	r1, r3, #1
 8002c90:	4814      	ldr	r0, [pc, #80]	; (8002ce4 <prvAddNewTaskToReadyList+0x160>)
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4403      	add	r3, r0
 8002c9c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c9e:	f001 fa7b 	bl	8004198 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <prvAddNewTaskToReadyList+0x154>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00e      	beq.n	8002cc8 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <prvAddNewTaskToReadyList+0x150>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d207      	bcs.n	8002cc8 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <prvAddNewTaskToReadyList+0x164>)
 8002cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cc8:	bf00      	nop
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd0:	2000019c 	.word	0x2000019c
 8002cd4:	200000c4 	.word	0x200000c4
 8002cd8:	200001a8 	.word	0x200001a8
 8002cdc:	200001b8 	.word	0x200001b8
 8002ce0:	200001a4 	.word	0x200001a4
 8002ce4:	200000c8 	.word	0x200000c8
 8002ce8:	e000ed04 	.word	0xe000ed04

08002cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01b      	beq.n	8002d36 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <vTaskDelay+0x68>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <vTaskDelay+0x30>
        __asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	60bb      	str	r3, [r7, #8]
    }
 8002d18:	bf00      	nop
 8002d1a:	e7fe      	b.n	8002d1a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002d1c:	f000 f884 	bl	8002e28 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	2023      	movs	r0, #35	; 0x23
 8002d24:	f003 fa00 	bl	8006128 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d28:	2100      	movs	r1, #0
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fdd0 	bl	80038d0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002d30:	f000 f888 	bl	8002e44 <xTaskResumeAll>
 8002d34:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d107      	bne.n	8002d4c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <vTaskDelay+0x6c>)
 8002d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002d4c:	bf00      	nop
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	200001c4 	.word	0x200001c4
 8002d58:	e000ed04 	.word	0xe000ed04

08002d5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002d62:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <vTaskStartScheduler+0xac>)
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	2300      	movs	r3, #0
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2282      	movs	r2, #130	; 0x82
 8002d6e:	4927      	ldr	r1, [pc, #156]	; (8002e0c <vTaskStartScheduler+0xb0>)
 8002d70:	4827      	ldr	r0, [pc, #156]	; (8002e10 <vTaskStartScheduler+0xb4>)
 8002d72:	f7ff fe33 	bl	80029dc <xTaskCreate>
 8002d76:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d102      	bne.n	8002d84 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002d7e:	f000 fe27 	bl	80039d0 <xTimerCreateTimerTask>
 8002d82:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d129      	bne.n	8002dde <vTaskStartScheduler+0x82>
        __asm volatile
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	60bb      	str	r3, [r7, #8]
    }
 8002d9c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <vTaskStartScheduler+0xb8>)
 8002da0:	f04f 32ff 	mov.w	r2, #4294967295
 8002da4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002da6:	4b1c      	ldr	r3, [pc, #112]	; (8002e18 <vTaskStartScheduler+0xbc>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <vTaskStartScheduler+0xc0>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002db2:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <vTaskStartScheduler+0xc4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3334      	adds	r3, #52	; 0x34
 8002db8:	2205      	movs	r2, #5
 8002dba:	4914      	ldr	r1, [pc, #80]	; (8002e0c <vTaskStartScheduler+0xb0>)
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f004 f92f 	bl	8007020 <memcmp>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <vTaskStartScheduler+0x78>
 8002dc8:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <vTaskStartScheduler+0xc4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f003 feeb 	bl	8006ba8 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002dd2:	e001      	b.n	8002dd8 <vTaskStartScheduler+0x7c>
 8002dd4:	f003 fe8a 	bl	8006aec <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002dd8:	f001 f90c 	bl	8003ff4 <xPortStartScheduler>
 8002ddc:	e00e      	b.n	8002dfc <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d10a      	bne.n	8002dfc <vTaskStartScheduler+0xa0>
        __asm volatile
 8002de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dea:	f383 8811 	msr	BASEPRI, r3
 8002dee:	f3bf 8f6f 	isb	sy
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	607b      	str	r3, [r7, #4]
    }
 8002df8:	bf00      	nop
 8002dfa:	e7fe      	b.n	8002dfa <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <vTaskStartScheduler+0xc8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	bf00      	nop
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	200001c0 	.word	0x200001c0
 8002e0c:	080070cc 	.word	0x080070cc
 8002e10:	08003731 	.word	0x08003731
 8002e14:	200001bc 	.word	0x200001bc
 8002e18:	200001a8 	.word	0x200001a8
 8002e1c:	200001a0 	.word	0x200001a0
 8002e20:	200000c4 	.word	0x200000c4
 8002e24:	2000000c 	.word	0x2000000c

08002e28 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <vTaskSuspendAll+0x18>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	4a03      	ldr	r2, [pc, #12]	; (8002e40 <vTaskSuspendAll+0x18>)
 8002e34:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e36:	bf00      	nop
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	200001c4 	.word	0x200001c4

08002e44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e52:	4b73      	ldr	r3, [pc, #460]	; (8003020 <xTaskResumeAll+0x1dc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <xTaskResumeAll+0x2c>
        __asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	607b      	str	r3, [r7, #4]
    }
 8002e6c:	bf00      	nop
 8002e6e:	e7fe      	b.n	8002e6e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e70:	f001 f962 	bl	8004138 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e74:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <xTaskResumeAll+0x1dc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	4a69      	ldr	r2, [pc, #420]	; (8003020 <xTaskResumeAll+0x1dc>)
 8002e7c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e7e:	4b68      	ldr	r3, [pc, #416]	; (8003020 <xTaskResumeAll+0x1dc>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 80c4 	bne.w	8003010 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e88:	4b66      	ldr	r3, [pc, #408]	; (8003024 <xTaskResumeAll+0x1e0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80bf 	beq.w	8003010 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e92:	e08e      	b.n	8002fb2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e94:	4b64      	ldr	r3, [pc, #400]	; (8003028 <xTaskResumeAll+0x1e4>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	6a12      	ldr	r2, [r2, #32]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	69d2      	ldr	r2, [r2, #28]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3318      	adds	r3, #24
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d103      	bne.n	8002eca <xTaskResumeAll+0x86>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	6a1a      	ldr	r2, [r3, #32]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	1e5a      	subs	r2, r3, #1
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	68d2      	ldr	r2, [r2, #12]
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	6892      	ldr	r2, [r2, #8]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3304      	adds	r3, #4
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d103      	bne.n	8002f08 <xTaskResumeAll+0xc4>
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	615a      	str	r2, [r3, #20]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	1e5a      	subs	r2, r3, #1
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f003 fe86 	bl	8006c2c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	2201      	movs	r2, #1
 8002f26:	409a      	lsls	r2, r3
 8002f28:	4b40      	ldr	r3, [pc, #256]	; (800302c <xTaskResumeAll+0x1e8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	4a3f      	ldr	r2, [pc, #252]	; (800302c <xTaskResumeAll+0x1e8>)
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f36:	493e      	ldr	r1, [pc, #248]	; (8003030 <xTaskResumeAll+0x1ec>)
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	3304      	adds	r3, #4
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	3204      	adds	r2, #4
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	1d1a      	adds	r2, r3, #4
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4a2e      	ldr	r2, [pc, #184]	; (8003030 <xTaskResumeAll+0x1ec>)
 8002f76:	441a      	add	r2, r3
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	615a      	str	r2, [r3, #20]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f80:	492b      	ldr	r1, [pc, #172]	; (8003030 <xTaskResumeAll+0x1ec>)
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	1c59      	adds	r1, r3, #1
 8002f90:	4827      	ldr	r0, [pc, #156]	; (8003030 <xTaskResumeAll+0x1ec>)
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4403      	add	r3, r0
 8002f9c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa2:	4b24      	ldr	r3, [pc, #144]	; (8003034 <xTaskResumeAll+0x1f0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d302      	bcc.n	8002fb2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002fac:	4b22      	ldr	r3, [pc, #136]	; (8003038 <xTaskResumeAll+0x1f4>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <xTaskResumeAll+0x1e4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f47f af6c 	bne.w	8002e94 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fc2:	f000 fc4b 	bl	800385c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	; (800303c <xTaskResumeAll+0x1f8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d010      	beq.n	8002ff4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002fd2:	f000 f859 	bl	8003088 <xTaskIncrementTick>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002fdc:	4b16      	ldr	r3, [pc, #88]	; (8003038 <xTaskResumeAll+0x1f4>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f1      	bne.n	8002fd2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <xTaskResumeAll+0x1f8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <xTaskResumeAll+0x1f4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d009      	beq.n	8003010 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <xTaskResumeAll+0x1fc>)
 8003002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003010:	f001 f8c2 	bl	8004198 <vPortExitCritical>

    return xAlreadyYielded;
 8003014:	69bb      	ldr	r3, [r7, #24]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	200001c4 	.word	0x200001c4
 8003024:	2000019c 	.word	0x2000019c
 8003028:	2000015c 	.word	0x2000015c
 800302c:	200001a4 	.word	0x200001a4
 8003030:	200000c8 	.word	0x200000c8
 8003034:	200000c4 	.word	0x200000c4
 8003038:	200001b0 	.word	0x200001b0
 800303c:	200001ac 	.word	0x200001ac
 8003040:	e000ed04 	.word	0xe000ed04

08003044 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <xTaskGetTickCount+0x1c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003050:	687b      	ldr	r3, [r7, #4]
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	200001a0 	.word	0x200001a0

08003064 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800306a:	f001 f94f 	bl	800430c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003072:	4b04      	ldr	r3, [pc, #16]	; (8003084 <xTaskGetTickCountFromISR+0x20>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003078:	683b      	ldr	r3, [r7, #0]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200001a0 	.word	0x200001a0

08003088 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	; 0x28
 800308c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003092:	4b7f      	ldr	r3, [pc, #508]	; (8003290 <xTaskIncrementTick+0x208>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 80f0 	bne.w	800327c <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800309c:	4b7d      	ldr	r3, [pc, #500]	; (8003294 <xTaskIncrementTick+0x20c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80030a4:	4a7b      	ldr	r2, [pc, #492]	; (8003294 <xTaskIncrementTick+0x20c>)
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d120      	bne.n	80030f2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80030b0:	4b79      	ldr	r3, [pc, #484]	; (8003298 <xTaskIncrementTick+0x210>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <xTaskIncrementTick+0x48>
        __asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	607b      	str	r3, [r7, #4]
    }
 80030cc:	bf00      	nop
 80030ce:	e7fe      	b.n	80030ce <xTaskIncrementTick+0x46>
 80030d0:	4b71      	ldr	r3, [pc, #452]	; (8003298 <xTaskIncrementTick+0x210>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	4b71      	ldr	r3, [pc, #452]	; (800329c <xTaskIncrementTick+0x214>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a6f      	ldr	r2, [pc, #444]	; (8003298 <xTaskIncrementTick+0x210>)
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4a6f      	ldr	r2, [pc, #444]	; (800329c <xTaskIncrementTick+0x214>)
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b6e      	ldr	r3, [pc, #440]	; (80032a0 <xTaskIncrementTick+0x218>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3301      	adds	r3, #1
 80030ea:	4a6d      	ldr	r2, [pc, #436]	; (80032a0 <xTaskIncrementTick+0x218>)
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	f000 fbb5 	bl	800385c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030f2:	4b6c      	ldr	r3, [pc, #432]	; (80032a4 <xTaskIncrementTick+0x21c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6a3a      	ldr	r2, [r7, #32]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	f0c0 80aa 	bcc.w	8003252 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030fe:	4b66      	ldr	r3, [pc, #408]	; (8003298 <xTaskIncrementTick+0x210>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d104      	bne.n	8003112 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003108:	4b66      	ldr	r3, [pc, #408]	; (80032a4 <xTaskIncrementTick+0x21c>)
 800310a:	f04f 32ff 	mov.w	r2, #4294967295
 800310e:	601a      	str	r2, [r3, #0]
                    break;
 8003110:	e09f      	b.n	8003252 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003112:	4b61      	ldr	r3, [pc, #388]	; (8003298 <xTaskIncrementTick+0x210>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003122:	6a3a      	ldr	r2, [r7, #32]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	429a      	cmp	r2, r3
 8003128:	d203      	bcs.n	8003132 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800312a:	4a5e      	ldr	r2, [pc, #376]	; (80032a4 <xTaskIncrementTick+0x21c>)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003130:	e08f      	b.n	8003252 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	68d2      	ldr	r2, [r2, #12]
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	6892      	ldr	r2, [r2, #8]
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	3304      	adds	r3, #4
 8003154:	429a      	cmp	r2, r3
 8003156:	d103      	bne.n	8003160 <xTaskIncrementTick+0xd8>
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2200      	movs	r2, #0
 8003164:	615a      	str	r2, [r3, #20]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	1e5a      	subs	r2, r3, #1
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01e      	beq.n	80031b6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	6a12      	ldr	r2, [r2, #32]
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	69d2      	ldr	r2, [r2, #28]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	3318      	adds	r3, #24
 800319a:	429a      	cmp	r2, r3
 800319c:	d103      	bne.n	80031a6 <xTaskIncrementTick+0x11e>
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	6a1a      	ldr	r2, [r3, #32]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2200      	movs	r2, #0
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	1e5a      	subs	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f003 fd37 	bl	8006c2c <SEGGER_SYSVIEW_OnTaskStartReady>
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	2201      	movs	r2, #1
 80031c4:	409a      	lsls	r2, r3
 80031c6:	4b38      	ldr	r3, [pc, #224]	; (80032a8 <xTaskIncrementTick+0x220>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	4a36      	ldr	r2, [pc, #216]	; (80032a8 <xTaskIncrementTick+0x220>)
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d4:	4935      	ldr	r1, [pc, #212]	; (80032ac <xTaskIncrementTick+0x224>)
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	3304      	adds	r3, #4
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	60da      	str	r2, [r3, #12]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	3204      	adds	r2, #4
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	1d1a      	adds	r2, r3, #4
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4a26      	ldr	r2, [pc, #152]	; (80032ac <xTaskIncrementTick+0x224>)
 8003214:	441a      	add	r2, r3
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	615a      	str	r2, [r3, #20]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321e:	4923      	ldr	r1, [pc, #140]	; (80032ac <xTaskIncrementTick+0x224>)
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	1c59      	adds	r1, r3, #1
 800322e:	481f      	ldr	r0, [pc, #124]	; (80032ac <xTaskIncrementTick+0x224>)
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4403      	add	r3, r0
 800323a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <xTaskIncrementTick+0x228>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	429a      	cmp	r2, r3
 8003248:	f67f af59 	bls.w	80030fe <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800324c:	2301      	movs	r3, #1
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003250:	e755      	b.n	80030fe <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003252:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <xTaskIncrementTick+0x228>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003258:	4914      	ldr	r1, [pc, #80]	; (80032ac <xTaskIncrementTick+0x224>)
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d901      	bls.n	800326e <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800326a:	2301      	movs	r3, #1
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800326e:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <xTaskIncrementTick+0x22c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003276:	2301      	movs	r3, #1
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
 800327a:	e004      	b.n	8003286 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800327c:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <xTaskIncrementTick+0x230>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3301      	adds	r3, #1
 8003282:	4a0d      	ldr	r2, [pc, #52]	; (80032b8 <xTaskIncrementTick+0x230>)
 8003284:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003288:	4618      	mov	r0, r3
 800328a:	3728      	adds	r7, #40	; 0x28
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	200001c4 	.word	0x200001c4
 8003294:	200001a0 	.word	0x200001a0
 8003298:	20000154 	.word	0x20000154
 800329c:	20000158 	.word	0x20000158
 80032a0:	200001b4 	.word	0x200001b4
 80032a4:	200001bc 	.word	0x200001bc
 80032a8:	200001a4 	.word	0x200001a4
 80032ac:	200000c8 	.word	0x200000c8
 80032b0:	200000c4 	.word	0x200000c4
 80032b4:	200001b0 	.word	0x200001b0
 80032b8:	200001ac 	.word	0x200001ac

080032bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032c2:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <vTaskSwitchContext+0xc4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80032ca:	4b2e      	ldr	r3, [pc, #184]	; (8003384 <vTaskSwitchContext+0xc8>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80032d0:	e052      	b.n	8003378 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 80032d2:	4b2c      	ldr	r3, [pc, #176]	; (8003384 <vTaskSwitchContext+0xc8>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d8:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <vTaskSwitchContext+0xcc>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	fab3 f383 	clz	r3, r3
 80032e4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80032e6:	7afb      	ldrb	r3, [r7, #11]
 80032e8:	f1c3 031f 	rsb	r3, r3, #31
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	4927      	ldr	r1, [pc, #156]	; (800338c <vTaskSwitchContext+0xd0>)
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10a      	bne.n	8003318 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	607b      	str	r3, [r7, #4]
    }
 8003314:	bf00      	nop
 8003316:	e7fe      	b.n	8003316 <vTaskSwitchContext+0x5a>
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4a1a      	ldr	r2, [pc, #104]	; (800338c <vTaskSwitchContext+0xd0>)
 8003324:	4413      	add	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	3308      	adds	r3, #8
 800333a:	429a      	cmp	r2, r3
 800333c:	d104      	bne.n	8003348 <vTaskSwitchContext+0x8c>
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	605a      	str	r2, [r3, #4]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	4a10      	ldr	r2, [pc, #64]	; (8003390 <vTaskSwitchContext+0xd4>)
 8003350:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003352:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <vTaskSwitchContext+0xd4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3334      	adds	r3, #52	; 0x34
 8003358:	2205      	movs	r2, #5
 800335a:	490e      	ldr	r1, [pc, #56]	; (8003394 <vTaskSwitchContext+0xd8>)
 800335c:	4618      	mov	r0, r3
 800335e:	f003 fe5f 	bl	8007020 <memcmp>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <vTaskSwitchContext+0xb8>
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <vTaskSwitchContext+0xd4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f003 fc1b 	bl	8006ba8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003372:	e001      	b.n	8003378 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8003374:	f003 fbba 	bl	8006aec <SEGGER_SYSVIEW_OnIdle>
}
 8003378:	bf00      	nop
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	200001c4 	.word	0x200001c4
 8003384:	200001b0 	.word	0x200001b0
 8003388:	200001a4 	.word	0x200001a4
 800338c:	200000c8 	.word	0x200000c8
 8003390:	200000c4 	.word	0x200000c4
 8003394:	080070cc 	.word	0x080070cc

08003398 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	60fb      	str	r3, [r7, #12]
    }
 80033ba:	bf00      	nop
 80033bc:	e7fe      	b.n	80033bc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033be:	4b07      	ldr	r3, [pc, #28]	; (80033dc <vTaskPlaceOnEventList+0x44>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3318      	adds	r3, #24
 80033c4:	4619      	mov	r1, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fe ff75 	bl	80022b6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033cc:	2101      	movs	r1, #1
 80033ce:	6838      	ldr	r0, [r7, #0]
 80033d0:	f000 fa7e 	bl	80038d0 <prvAddCurrentTaskToDelayedList>
}
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	200000c4 	.word	0x200000c4

080033e0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	613b      	str	r3, [r7, #16]
    }
 8003404:	bf00      	nop
 8003406:	e7fe      	b.n	8003406 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	4b17      	ldr	r3, [pc, #92]	; (800346c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	61da      	str	r2, [r3, #28]
 8003416:	4b15      	ldr	r3, [pc, #84]	; (800346c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	6892      	ldr	r2, [r2, #8]
 800341e:	621a      	str	r2, [r3, #32]
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	3218      	adds	r2, #24
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <vTaskPlaceOnEventListRestricted+0x8c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f103 0218 	add.w	r2, r3, #24
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <vTaskPlaceOnEventListRestricted+0x8c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	629a      	str	r2, [r3, #40]	; 0x28
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003450:	f04f 33ff 	mov.w	r3, #4294967295
 8003454:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003456:	2024      	movs	r0, #36	; 0x24
 8003458:	f002 fe48 	bl	80060ec <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	68b8      	ldr	r0, [r7, #8]
 8003460:	f000 fa36 	bl	80038d0 <prvAddCurrentTaskToDelayedList>
    }
 8003464:	bf00      	nop
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	200000c4 	.word	0x200000c4

08003470 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	60fb      	str	r3, [r7, #12]
    }
 8003498:	bf00      	nop
 800349a:	e7fe      	b.n	800349a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	6a3a      	ldr	r2, [r7, #32]
 80034a8:	6a12      	ldr	r2, [r2, #32]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	6a3a      	ldr	r2, [r7, #32]
 80034b2:	69d2      	ldr	r2, [r2, #28]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	3318      	adds	r3, #24
 80034be:	429a      	cmp	r2, r3
 80034c0:	d103      	bne.n	80034ca <xTaskRemoveFromEventList+0x5a>
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	6a1a      	ldr	r2, [r3, #32]
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	2200      	movs	r2, #0
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	1e5a      	subs	r2, r3, #1
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034da:	4b4b      	ldr	r3, [pc, #300]	; (8003608 <xTaskRemoveFromEventList+0x198>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d162      	bne.n	80035a8 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	6a3a      	ldr	r2, [r7, #32]
 80034ee:	68d2      	ldr	r2, [r2, #12]
 80034f0:	609a      	str	r2, [r3, #8]
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	6a3a      	ldr	r2, [r7, #32]
 80034f8:	6892      	ldr	r2, [r2, #8]
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	3304      	adds	r3, #4
 8003504:	429a      	cmp	r2, r3
 8003506:	d103      	bne.n	8003510 <xTaskRemoveFromEventList+0xa0>
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	2200      	movs	r2, #0
 8003514:	615a      	str	r2, [r3, #20]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	1e5a      	subs	r2, r3, #1
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	4618      	mov	r0, r3
 8003524:	f003 fb82 	bl	8006c2c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	2201      	movs	r2, #1
 800352e:	409a      	lsls	r2, r3
 8003530:	4b36      	ldr	r3, [pc, #216]	; (800360c <xTaskRemoveFromEventList+0x19c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4313      	orrs	r3, r2
 8003536:	4a35      	ldr	r2, [pc, #212]	; (800360c <xTaskRemoveFromEventList+0x19c>)
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353e:	4934      	ldr	r1, [pc, #208]	; (8003610 <xTaskRemoveFromEventList+0x1a0>)
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3304      	adds	r3, #4
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	6a3a      	ldr	r2, [r7, #32]
 8003564:	3204      	adds	r2, #4
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	1d1a      	adds	r2, r3, #4
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4a24      	ldr	r2, [pc, #144]	; (8003610 <xTaskRemoveFromEventList+0x1a0>)
 800357e:	441a      	add	r2, r3
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	615a      	str	r2, [r3, #20]
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003588:	4921      	ldr	r1, [pc, #132]	; (8003610 <xTaskRemoveFromEventList+0x1a0>)
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	1c59      	adds	r1, r3, #1
 8003598:	481d      	ldr	r0, [pc, #116]	; (8003610 <xTaskRemoveFromEventList+0x1a0>)
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4403      	add	r3, r0
 80035a4:	6019      	str	r1, [r3, #0]
 80035a6:	e01b      	b.n	80035e0 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035a8:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <xTaskRemoveFromEventList+0x1a4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	61da      	str	r2, [r3, #28]
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	621a      	str	r2, [r3, #32]
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	6a3a      	ldr	r2, [r7, #32]
 80035c2:	3218      	adds	r2, #24
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	f103 0218 	add.w	r2, r3, #24
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	4a10      	ldr	r2, [pc, #64]	; (8003614 <xTaskRemoveFromEventList+0x1a4>)
 80035d4:	629a      	str	r2, [r3, #40]	; 0x28
 80035d6:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <xTaskRemoveFromEventList+0x1a4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3301      	adds	r3, #1
 80035dc:	4a0d      	ldr	r2, [pc, #52]	; (8003614 <xTaskRemoveFromEventList+0x1a4>)
 80035de:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <xTaskRemoveFromEventList+0x1a8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d905      	bls.n	80035fa <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80035ee:	2301      	movs	r3, #1
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <xTaskRemoveFromEventList+0x1ac>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e001      	b.n	80035fe <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003600:	4618      	mov	r0, r3
 8003602:	3728      	adds	r7, #40	; 0x28
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	200001c4 	.word	0x200001c4
 800360c:	200001a4 	.word	0x200001a4
 8003610:	200000c8 	.word	0x200000c8
 8003614:	2000015c 	.word	0x2000015c
 8003618:	200000c4 	.word	0x200000c4
 800361c:	200001b0 	.word	0x200001b0

08003620 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <vTaskInternalSetTimeOutState+0x24>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <vTaskInternalSetTimeOutState+0x28>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	605a      	str	r2, [r3, #4]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	200001b4 	.word	0x200001b4
 8003648:	200001a0 	.word	0x200001a0

0800364c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	613b      	str	r3, [r7, #16]
    }
 800366e:	bf00      	nop
 8003670:	e7fe      	b.n	8003670 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	60fb      	str	r3, [r7, #12]
    }
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800368e:	f000 fd53 	bl	8004138 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003692:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <xTaskCheckForTimeOut+0xc4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036aa:	d102      	bne.n	80036b2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	e026      	b.n	8003700 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b17      	ldr	r3, [pc, #92]	; (8003714 <xTaskCheckForTimeOut+0xc8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d00a      	beq.n	80036d4 <xTaskCheckForTimeOut+0x88>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d305      	bcc.n	80036d4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80036c8:	2301      	movs	r3, #1
 80036ca:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	e015      	b.n	8003700 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d20b      	bcs.n	80036f6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	1ad2      	subs	r2, r2, r3
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ff98 	bl	8003620 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	e004      	b.n	8003700 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036fc:	2301      	movs	r3, #1
 80036fe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003700:	f000 fd4a 	bl	8004198 <vPortExitCritical>

    return xReturn;
 8003704:	69fb      	ldr	r3, [r7, #28]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	200001a0 	.word	0x200001a0
 8003714:	200001b4 	.word	0x200001b4

08003718 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <vTaskMissedYield+0x14>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]
}
 8003722:	bf00      	nop
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	200001b0 	.word	0x200001b0

08003730 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003738:	f000 f852 	bl	80037e0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <prvIdleTask+0x28>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d9f9      	bls.n	8003738 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <prvIdleTask+0x2c>)
 8003746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003754:	e7f0      	b.n	8003738 <prvIdleTask+0x8>
 8003756:	bf00      	nop
 8003758:	200000c8 	.word	0x200000c8
 800375c:	e000ed04 	.word	0xe000ed04

08003760 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	e00c      	b.n	8003786 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <prvInitialiseTaskLists+0x60>)
 8003778:	4413      	add	r3, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe fd6e 	bl	800225c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3301      	adds	r3, #1
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b04      	cmp	r3, #4
 800378a:	d9ef      	bls.n	800376c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800378c:	480d      	ldr	r0, [pc, #52]	; (80037c4 <prvInitialiseTaskLists+0x64>)
 800378e:	f7fe fd65 	bl	800225c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003792:	480d      	ldr	r0, [pc, #52]	; (80037c8 <prvInitialiseTaskLists+0x68>)
 8003794:	f7fe fd62 	bl	800225c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003798:	480c      	ldr	r0, [pc, #48]	; (80037cc <prvInitialiseTaskLists+0x6c>)
 800379a:	f7fe fd5f 	bl	800225c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800379e:	480c      	ldr	r0, [pc, #48]	; (80037d0 <prvInitialiseTaskLists+0x70>)
 80037a0:	f7fe fd5c 	bl	800225c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80037a4:	480b      	ldr	r0, [pc, #44]	; (80037d4 <prvInitialiseTaskLists+0x74>)
 80037a6:	f7fe fd59 	bl	800225c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80037aa:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <prvInitialiseTaskLists+0x78>)
 80037ac:	4a05      	ldr	r2, [pc, #20]	; (80037c4 <prvInitialiseTaskLists+0x64>)
 80037ae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037b0:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <prvInitialiseTaskLists+0x7c>)
 80037b2:	4a05      	ldr	r2, [pc, #20]	; (80037c8 <prvInitialiseTaskLists+0x68>)
 80037b4:	601a      	str	r2, [r3, #0]
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	200000c8 	.word	0x200000c8
 80037c4:	2000012c 	.word	0x2000012c
 80037c8:	20000140 	.word	0x20000140
 80037cc:	2000015c 	.word	0x2000015c
 80037d0:	20000170 	.word	0x20000170
 80037d4:	20000188 	.word	0x20000188
 80037d8:	20000154 	.word	0x20000154
 80037dc:	20000158 	.word	0x20000158

080037e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037e6:	e019      	b.n	800381c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80037e8:	f000 fca6 	bl	8004138 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037ec:	4b10      	ldr	r3, [pc, #64]	; (8003830 <prvCheckTasksWaitingTermination+0x50>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3304      	adds	r3, #4
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe fd95 	bl	8002328 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80037fe:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <prvCheckTasksWaitingTermination+0x54>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3b01      	subs	r3, #1
 8003804:	4a0b      	ldr	r2, [pc, #44]	; (8003834 <prvCheckTasksWaitingTermination+0x54>)
 8003806:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <prvCheckTasksWaitingTermination+0x58>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3b01      	subs	r3, #1
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <prvCheckTasksWaitingTermination+0x58>)
 8003810:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003812:	f000 fcc1 	bl	8004198 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f810 	bl	800383c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <prvCheckTasksWaitingTermination+0x58>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e1      	bne.n	80037e8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000170 	.word	0x20000170
 8003834:	2000019c 	.word	0x2000019c
 8003838:	20000184 	.word	0x20000184

0800383c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fe59 	bl	8004500 <vPortFree>
            vPortFree( pxTCB );
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fe56 	bl	8004500 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003860:	4b0a      	ldr	r3, [pc, #40]	; (800388c <prvResetNextTaskUnblockTime+0x30>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d104      	bne.n	8003874 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <prvResetNextTaskUnblockTime+0x34>)
 800386c:	f04f 32ff 	mov.w	r2, #4294967295
 8003870:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003872:	e005      	b.n	8003880 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <prvResetNextTaskUnblockTime+0x30>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a04      	ldr	r2, [pc, #16]	; (8003890 <prvResetNextTaskUnblockTime+0x34>)
 800387e:	6013      	str	r3, [r2, #0]
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000154 	.word	0x20000154
 8003890:	200001bc 	.word	0x200001bc

08003894 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <xTaskGetSchedulerState+0x34>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80038a2:	2301      	movs	r3, #1
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	e008      	b.n	80038ba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <xTaskGetSchedulerState+0x38>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d102      	bne.n	80038b6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80038b0:	2302      	movs	r3, #2
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	e001      	b.n	80038ba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80038b6:	2300      	movs	r3, #0
 80038b8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80038ba:	687b      	ldr	r3, [r7, #4]
    }
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	200001a8 	.word	0x200001a8
 80038cc:	200001c4 	.word	0x200001c4

080038d0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80038da:	4b36      	ldr	r3, [pc, #216]	; (80039b4 <prvAddCurrentTaskToDelayedList+0xe4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038e0:	4b35      	ldr	r3, [pc, #212]	; (80039b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe fd1e 	bl	8002328 <uxListRemove>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10b      	bne.n	800390a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80038f2:	4b31      	ldr	r3, [pc, #196]	; (80039b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	2201      	movs	r2, #1
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	4b2e      	ldr	r3, [pc, #184]	; (80039bc <prvAddCurrentTaskToDelayedList+0xec>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4013      	ands	r3, r2
 8003906:	4a2d      	ldr	r2, [pc, #180]	; (80039bc <prvAddCurrentTaskToDelayedList+0xec>)
 8003908:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d124      	bne.n	800395c <prvAddCurrentTaskToDelayedList+0x8c>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d021      	beq.n	800395c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003918:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	4b26      	ldr	r3, [pc, #152]	; (80039b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	609a      	str	r2, [r3, #8]
 8003926:	4b24      	ldr	r3, [pc, #144]	; (80039b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	6892      	ldr	r2, [r2, #8]
 800392e:	60da      	str	r2, [r3, #12]
 8003930:	4b21      	ldr	r3, [pc, #132]	; (80039b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	3204      	adds	r2, #4
 800393a:	605a      	str	r2, [r3, #4]
 800393c:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	1d1a      	adds	r2, r3, #4
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800394c:	615a      	str	r2, [r3, #20]
 800394e:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3301      	adds	r3, #1
 8003954:	4a1a      	ldr	r2, [pc, #104]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800395a:	e026      	b.n	80039aa <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003964:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	429a      	cmp	r2, r3
 8003972:	d209      	bcs.n	8003988 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003974:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3304      	adds	r3, #4
 800397e:	4619      	mov	r1, r3
 8003980:	4610      	mov	r0, r2
 8003982:	f7fe fc98 	bl	80022b6 <vListInsert>
}
 8003986:	e010      	b.n	80039aa <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003988:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3304      	adds	r3, #4
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f7fe fc8e 	bl	80022b6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800399a:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <prvAddCurrentTaskToDelayedList+0xfc>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d202      	bcs.n	80039aa <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80039a4:	4a09      	ldr	r2, [pc, #36]	; (80039cc <prvAddCurrentTaskToDelayedList+0xfc>)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6013      	str	r3, [r2, #0]
}
 80039aa:	bf00      	nop
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	200001a0 	.word	0x200001a0
 80039b8:	200000c4 	.word	0x200000c4
 80039bc:	200001a4 	.word	0x200001a4
 80039c0:	20000188 	.word	0x20000188
 80039c4:	20000158 	.word	0x20000158
 80039c8:	20000154 	.word	0x20000154
 80039cc:	200001bc 	.word	0x200001bc

080039d0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80039da:	f000 fa47 	bl	8003e6c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <xTimerCreateTimerTask+0x54>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <xTimerCreateTimerTask+0x58>)
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	2302      	movs	r3, #2
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2300      	movs	r3, #0
 80039f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039f4:	490d      	ldr	r1, [pc, #52]	; (8003a2c <xTimerCreateTimerTask+0x5c>)
 80039f6:	480e      	ldr	r0, [pc, #56]	; (8003a30 <xTimerCreateTimerTask+0x60>)
 80039f8:	f7fe fff0 	bl	80029dc <xTaskCreate>
 80039fc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	603b      	str	r3, [r7, #0]
    }
 8003a16:	bf00      	nop
 8003a18:	e7fe      	b.n	8003a18 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003a1a:	687b      	ldr	r3, [r7, #4]
    }
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	200001f8 	.word	0x200001f8
 8003a28:	200001fc 	.word	0x200001fc
 8003a2c:	080070d4 	.word	0x080070d4
 8003a30:	08003ad9 	.word	0x08003ad9

08003a34 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a40:	e008      	b.n	8003a54 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	4413      	add	r3, r2
 8003a4a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	699a      	ldr	r2, [r3, #24]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	18d1      	adds	r1, r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f8dd 	bl	8003c20 <prvInsertTimerInActiveList>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1ea      	bne.n	8003a42 <prvReloadTimer+0xe>
        }
    }
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a82:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <prvProcessExpiredTimer+0x5c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fe fc49 	bl	8002328 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f7ff ffc3 	bl	8003a34 <prvReloadTimer>
 8003aae:	e008      	b.n	8003ac2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	4798      	blx	r3
    }
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200001f0 	.word	0x200001f0

08003ad8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ae0:	f107 0308 	add.w	r3, r7, #8
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 f857 	bl	8003b98 <prvGetNextExpireTime>
 8003aea:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4619      	mov	r1, r3
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f803 	bl	8003afc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003af6:	f000 f8d5 	bl	8003ca4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003afa:	e7f1      	b.n	8003ae0 <prvTimerTask+0x8>

08003afc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003b06:	f7ff f98f 	bl	8002e28 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b0a:	f107 0308 	add.w	r3, r7, #8
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f866 	bl	8003be0 <prvSampleTimeNow>
 8003b14:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d130      	bne.n	8003b7e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <prvProcessTimerOrBlockTask+0x3c>
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d806      	bhi.n	8003b38 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003b2a:	f7ff f98b 	bl	8002e44 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b2e:	68f9      	ldr	r1, [r7, #12]
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff ffa1 	bl	8003a78 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003b36:	e024      	b.n	8003b82 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d008      	beq.n	8003b50 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <prvProcessTimerOrBlockTask+0x90>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <prvProcessTimerOrBlockTask+0x50>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <prvProcessTimerOrBlockTask+0x52>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b50:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <prvProcessTimerOrBlockTask+0x94>)
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f7fe ff09 	bl	8002974 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003b62:	f7ff f96f 	bl	8002e44 <xTaskResumeAll>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10a      	bne.n	8003b82 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003b6c:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <prvProcessTimerOrBlockTask+0x98>)
 8003b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	f3bf 8f6f 	isb	sy
    }
 8003b7c:	e001      	b.n	8003b82 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003b7e:	f7ff f961 	bl	8002e44 <xTaskResumeAll>
    }
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200001f4 	.word	0x200001f4
 8003b90:	200001f8 	.word	0x200001f8
 8003b94:	e000ed04 	.word	0xe000ed04

08003b98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <prvGetNextExpireTime+0x44>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <prvGetNextExpireTime+0x16>
 8003baa:	2201      	movs	r2, #1
 8003bac:	e000      	b.n	8003bb0 <prvGetNextExpireTime+0x18>
 8003bae:	2200      	movs	r2, #0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d105      	bne.n	8003bc8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bbc:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <prvGetNextExpireTime+0x44>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	e001      	b.n	8003bcc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
    }
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	200001f0 	.word	0x200001f0

08003be0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003be8:	f7ff fa2c 	bl	8003044 <xTaskGetTickCount>
 8003bec:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003bee:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <prvSampleTimeNow+0x3c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d205      	bcs.n	8003c04 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003bf8:	f000 f912 	bl	8003e20 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e002      	b.n	8003c0a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003c0a:	4a04      	ldr	r2, [pc, #16]	; (8003c1c <prvSampleTimeNow+0x3c>)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003c10:	68fb      	ldr	r3, [r7, #12]
    }
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000200 	.word	0x20000200

08003c20 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d812      	bhi.n	8003c6c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	1ad2      	subs	r2, r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d302      	bcc.n	8003c5a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003c54:	2301      	movs	r3, #1
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	e01b      	b.n	8003c92 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <prvInsertTimerInActiveList+0x7c>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3304      	adds	r3, #4
 8003c62:	4619      	mov	r1, r3
 8003c64:	4610      	mov	r0, r2
 8003c66:	f7fe fb26 	bl	80022b6 <vListInsert>
 8003c6a:	e012      	b.n	8003c92 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d206      	bcs.n	8003c82 <prvInsertTimerInActiveList+0x62>
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d302      	bcc.n	8003c82 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e007      	b.n	8003c92 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <prvInsertTimerInActiveList+0x80>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f7fe fb12 	bl	80022b6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003c92:	697b      	ldr	r3, [r7, #20]
    }
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	200001f4 	.word	0x200001f4
 8003ca0:	200001f0 	.word	0x200001f0

08003ca4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003caa:	e0a6      	b.n	8003dfa <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f2c0 80a2 	blt.w	8003df8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d004      	beq.n	8003cca <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe fb2f 	bl	8002328 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cca:	1d3b      	adds	r3, r7, #4
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff ff87 	bl	8003be0 <prvSampleTimeNow>
 8003cd2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	f200 808e 	bhi.w	8003dfa <prvProcessReceivedCommands+0x156>
 8003cde:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <prvProcessReceivedCommands+0x40>)
 8003ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce4:	08003d09 	.word	0x08003d09
 8003ce8:	08003d09 	.word	0x08003d09
 8003cec:	08003d71 	.word	0x08003d71
 8003cf0:	08003d85 	.word	0x08003d85
 8003cf4:	08003dcf 	.word	0x08003dcf
 8003cf8:	08003d09 	.word	0x08003d09
 8003cfc:	08003d09 	.word	0x08003d09
 8003d00:	08003d71 	.word	0x08003d71
 8003d04:	08003d85 	.word	0x08003d85
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	18d1      	adds	r1, r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	69f8      	ldr	r0, [r7, #28]
 8003d28:	f7ff ff7a 	bl	8003c20 <prvInsertTimerInActiveList>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d063      	beq.n	8003dfa <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d009      	beq.n	8003d54 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	4413      	add	r3, r2
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	69f8      	ldr	r0, [r7, #28]
 8003d4e:	f7ff fe71 	bl	8003a34 <prvReloadTimer>
 8003d52:	e008      	b.n	8003d66 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	69f8      	ldr	r0, [r7, #28]
 8003d6c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003d6e:	e044      	b.n	8003dfa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003d82:	e03a      	b.n	8003dfa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10a      	bne.n	8003dba <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	617b      	str	r3, [r7, #20]
    }
 8003db6:	bf00      	nop
 8003db8:	e7fe      	b.n	8003db8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	18d1      	adds	r1, r2, r3
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	69f8      	ldr	r0, [r7, #28]
 8003dc8:	f7ff ff2a 	bl	8003c20 <prvInsertTimerInActiveList>
                        break;
 8003dcc:	e015      	b.n	8003dfa <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d103      	bne.n	8003de4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003ddc:	69f8      	ldr	r0, [r7, #28]
 8003dde:	f000 fb8f 	bl	8004500 <vPortFree>
 8003de2:	e00a      	b.n	8003dfa <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003df6:	e000      	b.n	8003dfa <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003df8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dfa:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <prvProcessReceivedCommands+0x178>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f107 0108 	add.w	r1, r7, #8
 8003e02:	2200      	movs	r2, #0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe fbc1 	bl	800258c <xQueueReceive>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f47f af4d 	bne.w	8003cac <prvProcessReceivedCommands+0x8>
        }
    }
 8003e12:	bf00      	nop
 8003e14:	bf00      	nop
 8003e16:	3720      	adds	r7, #32
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	200001f8 	.word	0x200001f8

08003e20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e26:	e009      	b.n	8003e3c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e28:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <prvSwitchTimerLists+0x44>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003e32:	f04f 31ff 	mov.w	r1, #4294967295
 8003e36:	6838      	ldr	r0, [r7, #0]
 8003e38:	f7ff fe1e 	bl	8003a78 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e3c:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <prvSwitchTimerLists+0x44>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003e46:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <prvSwitchTimerLists+0x44>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003e4c:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <prvSwitchTimerLists+0x48>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <prvSwitchTimerLists+0x44>)
 8003e52:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003e54:	4a04      	ldr	r2, [pc, #16]	; (8003e68 <prvSwitchTimerLists+0x48>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6013      	str	r3, [r2, #0]
    }
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	200001f0 	.word	0x200001f0
 8003e68:	200001f4 	.word	0x200001f4

08003e6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003e70:	f000 f962 	bl	8004138 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003e74:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <prvCheckForValidListAndQueue+0x54>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11d      	bne.n	8003eb8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003e7c:	4811      	ldr	r0, [pc, #68]	; (8003ec4 <prvCheckForValidListAndQueue+0x58>)
 8003e7e:	f7fe f9ed 	bl	800225c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003e82:	4811      	ldr	r0, [pc, #68]	; (8003ec8 <prvCheckForValidListAndQueue+0x5c>)
 8003e84:	f7fe f9ea 	bl	800225c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003e88:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <prvCheckForValidListAndQueue+0x60>)
 8003e8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ec4 <prvCheckForValidListAndQueue+0x58>)
 8003e8c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003e8e:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <prvCheckForValidListAndQueue+0x64>)
 8003e90:	4a0d      	ldr	r2, [pc, #52]	; (8003ec8 <prvCheckForValidListAndQueue+0x5c>)
 8003e92:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003e94:	2200      	movs	r2, #0
 8003e96:	210c      	movs	r1, #12
 8003e98:	200a      	movs	r0, #10
 8003e9a:	f7fe faff 	bl	800249c <xQueueGenericCreate>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <prvCheckForValidListAndQueue+0x54>)
 8003ea2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <prvCheckForValidListAndQueue+0x54>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003eac:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <prvCheckForValidListAndQueue+0x54>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4908      	ldr	r1, [pc, #32]	; (8003ed4 <prvCheckForValidListAndQueue+0x68>)
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe fd08 	bl	80028c8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003eb8:	f000 f96e 	bl	8004198 <vPortExitCritical>
    }
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	200001f8 	.word	0x200001f8
 8003ec4:	200001c8 	.word	0x200001c8
 8003ec8:	200001dc 	.word	0x200001dc
 8003ecc:	200001f0 	.word	0x200001f0
 8003ed0:	200001f4 	.word	0x200001f4
 8003ed4:	080070dc 	.word	0x080070dc

08003ed8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3b04      	subs	r3, #4
 8003ee8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ef0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3b04      	subs	r3, #4
 8003ef6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f023 0201 	bic.w	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	3b04      	subs	r3, #4
 8003f06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003f08:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <pxPortInitialiseStack+0x64>)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3b14      	subs	r3, #20
 8003f12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	3b04      	subs	r3, #4
 8003f1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f06f 0202 	mvn.w	r2, #2
 8003f26:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	3b20      	subs	r3, #32
 8003f2c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	08003f41 	.word	0x08003f41

08003f40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <prvTaskExitError+0x54>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d00a      	beq.n	8003f6a <prvTaskExitError+0x2a>
        __asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	60fb      	str	r3, [r7, #12]
    }
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <prvTaskExitError+0x28>
        __asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	60bb      	str	r3, [r7, #8]
    }
 8003f7c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003f7e:	bf00      	nop
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0fc      	beq.n	8003f80 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003f86:	bf00      	nop
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	20000010 	.word	0x20000010
	...

08003fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003fa0:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <pxCurrentTCBConst2>)
 8003fa2:	6819      	ldr	r1, [r3, #0]
 8003fa4:	6808      	ldr	r0, [r1, #0]
 8003fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003faa:	f380 8809 	msr	PSP, r0
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f380 8811 	msr	BASEPRI, r0
 8003fba:	4770      	bx	lr
 8003fbc:	f3af 8000 	nop.w

08003fc0 <pxCurrentTCBConst2>:
 8003fc0:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop

08003fc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003fc8:	4808      	ldr	r0, [pc, #32]	; (8003fec <prvPortStartFirstTask+0x24>)
 8003fca:	6800      	ldr	r0, [r0, #0]
 8003fcc:	6800      	ldr	r0, [r0, #0]
 8003fce:	f380 8808 	msr	MSP, r0
 8003fd2:	f04f 0000 	mov.w	r0, #0
 8003fd6:	f380 8814 	msr	CONTROL, r0
 8003fda:	b662      	cpsie	i
 8003fdc:	b661      	cpsie	f
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	df00      	svc	0
 8003fe8:	bf00      	nop
 8003fea:	0000      	.short	0x0000
 8003fec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop

08003ff4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ffa:	4b46      	ldr	r3, [pc, #280]	; (8004114 <xPortStartScheduler+0x120>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a46      	ldr	r2, [pc, #280]	; (8004118 <xPortStartScheduler+0x124>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d10a      	bne.n	800401a <xPortStartScheduler+0x26>
        __asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	613b      	str	r3, [r7, #16]
    }
 8004016:	bf00      	nop
 8004018:	e7fe      	b.n	8004018 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800401a:	4b3e      	ldr	r3, [pc, #248]	; (8004114 <xPortStartScheduler+0x120>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a3f      	ldr	r2, [pc, #252]	; (800411c <xPortStartScheduler+0x128>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d10a      	bne.n	800403a <xPortStartScheduler+0x46>
        __asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	60fb      	str	r3, [r7, #12]
    }
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800403a:	4b39      	ldr	r3, [pc, #228]	; (8004120 <xPortStartScheduler+0x12c>)
 800403c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	22ff      	movs	r2, #255	; 0xff
 800404a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800405c:	b2da      	uxtb	r2, r3
 800405e:	4b31      	ldr	r3, [pc, #196]	; (8004124 <xPortStartScheduler+0x130>)
 8004060:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004062:	4b31      	ldr	r3, [pc, #196]	; (8004128 <xPortStartScheduler+0x134>)
 8004064:	2207      	movs	r2, #7
 8004066:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004068:	e009      	b.n	800407e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800406a:	4b2f      	ldr	r3, [pc, #188]	; (8004128 <xPortStartScheduler+0x134>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3b01      	subs	r3, #1
 8004070:	4a2d      	ldr	r2, [pc, #180]	; (8004128 <xPortStartScheduler+0x134>)
 8004072:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	b2db      	uxtb	r3, r3
 800407c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800407e:	78fb      	ldrb	r3, [r7, #3]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004086:	2b80      	cmp	r3, #128	; 0x80
 8004088:	d0ef      	beq.n	800406a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800408a:	4b27      	ldr	r3, [pc, #156]	; (8004128 <xPortStartScheduler+0x134>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f1c3 0307 	rsb	r3, r3, #7
 8004092:	2b04      	cmp	r3, #4
 8004094:	d00a      	beq.n	80040ac <xPortStartScheduler+0xb8>
        __asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	60bb      	str	r3, [r7, #8]
    }
 80040a8:	bf00      	nop
 80040aa:	e7fe      	b.n	80040aa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040ac:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <xPortStartScheduler+0x134>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	021b      	lsls	r3, r3, #8
 80040b2:	4a1d      	ldr	r2, [pc, #116]	; (8004128 <xPortStartScheduler+0x134>)
 80040b4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040b6:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <xPortStartScheduler+0x134>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040be:	4a1a      	ldr	r2, [pc, #104]	; (8004128 <xPortStartScheduler+0x134>)
 80040c0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80040ca:	4b18      	ldr	r3, [pc, #96]	; (800412c <xPortStartScheduler+0x138>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a17      	ldr	r2, [pc, #92]	; (800412c <xPortStartScheduler+0x138>)
 80040d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80040d6:	4b15      	ldr	r3, [pc, #84]	; (800412c <xPortStartScheduler+0x138>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a14      	ldr	r2, [pc, #80]	; (800412c <xPortStartScheduler+0x138>)
 80040dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80040e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80040e2:	f000 f8e3 	bl	80042ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80040e6:	4b12      	ldr	r3, [pc, #72]	; (8004130 <xPortStartScheduler+0x13c>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80040ec:	f000 f902 	bl	80042f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040f0:	4b10      	ldr	r3, [pc, #64]	; (8004134 <xPortStartScheduler+0x140>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0f      	ldr	r2, [pc, #60]	; (8004134 <xPortStartScheduler+0x140>)
 80040f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80040fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80040fc:	f7ff ff64 	bl	8003fc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004100:	f7ff f8dc 	bl	80032bc <vTaskSwitchContext>
    prvTaskExitError();
 8004104:	f7ff ff1c 	bl	8003f40 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	e000ed00 	.word	0xe000ed00
 8004118:	410fc271 	.word	0x410fc271
 800411c:	410fc270 	.word	0x410fc270
 8004120:	e000e400 	.word	0xe000e400
 8004124:	20000204 	.word	0x20000204
 8004128:	20000208 	.word	0x20000208
 800412c:	e000ed20 	.word	0xe000ed20
 8004130:	20000010 	.word	0x20000010
 8004134:	e000ef34 	.word	0xe000ef34

08004138 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
        __asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	607b      	str	r3, [r7, #4]
    }
 8004150:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004152:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <vPortEnterCritical+0x58>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3301      	adds	r3, #1
 8004158:	4a0d      	ldr	r2, [pc, #52]	; (8004190 <vPortEnterCritical+0x58>)
 800415a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <vPortEnterCritical+0x58>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10f      	bne.n	8004184 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004164:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <vPortEnterCritical+0x5c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <vPortEnterCritical+0x4c>
        __asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	603b      	str	r3, [r7, #0]
    }
 8004180:	bf00      	nop
 8004182:	e7fe      	b.n	8004182 <vPortEnterCritical+0x4a>
    }
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	20000010 	.word	0x20000010
 8004194:	e000ed04 	.word	0xe000ed04

08004198 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800419e:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <vPortExitCritical+0x50>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <vPortExitCritical+0x24>
        __asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	607b      	str	r3, [r7, #4]
    }
 80041b8:	bf00      	nop
 80041ba:	e7fe      	b.n	80041ba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <vPortExitCritical+0x50>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	4a09      	ldr	r2, [pc, #36]	; (80041e8 <vPortExitCritical+0x50>)
 80041c4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80041c6:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <vPortExitCritical+0x50>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d105      	bne.n	80041da <vPortExitCritical+0x42>
 80041ce:	2300      	movs	r3, #0
 80041d0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80041d8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	20000010 	.word	0x20000010
 80041ec:	00000000 	.word	0x00000000

080041f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80041f0:	f3ef 8009 	mrs	r0, PSP
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	4b15      	ldr	r3, [pc, #84]	; (8004250 <pxCurrentTCBConst>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	f01e 0f10 	tst.w	lr, #16
 8004200:	bf08      	it	eq
 8004202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420a:	6010      	str	r0, [r2, #0]
 800420c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004214:	f380 8811 	msr	BASEPRI, r0
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f7ff f84c 	bl	80032bc <vTaskSwitchContext>
 8004224:	f04f 0000 	mov.w	r0, #0
 8004228:	f380 8811 	msr	BASEPRI, r0
 800422c:	bc09      	pop	{r0, r3}
 800422e:	6819      	ldr	r1, [r3, #0]
 8004230:	6808      	ldr	r0, [r1, #0]
 8004232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004236:	f01e 0f10 	tst.w	lr, #16
 800423a:	bf08      	it	eq
 800423c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004240:	f380 8809 	msr	PSP, r0
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	f3af 8000 	nop.w

08004250 <pxCurrentTCBConst>:
 8004250:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop

08004258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
        __asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	607b      	str	r3, [r7, #4]
    }
 8004270:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004272:	f002 fbc1 	bl	80069f8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004276:	f7fe ff07 	bl	8003088 <xTaskIncrementTick>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d006      	beq.n	800428e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004280:	f002 fc18 	bl	8006ab4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <SysTick_Handler+0x50>)
 8004286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	e001      	b.n	8004292 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800428e:	f002 fbf5 	bl	8006a7c <SEGGER_SYSVIEW_RecordExitISR>
 8004292:	2300      	movs	r3, #0
 8004294:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f383 8811 	msr	BASEPRI, r3
    }
 800429c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	e000ed04 	.word	0xe000ed04

080042ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <vPortSetupTimerInterrupt+0x34>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <vPortSetupTimerInterrupt+0x38>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <vPortSetupTimerInterrupt+0x3c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <vPortSetupTimerInterrupt+0x40>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	099b      	lsrs	r3, r3, #6
 80042c8:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <vPortSetupTimerInterrupt+0x44>)
 80042ca:	3b01      	subs	r3, #1
 80042cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042ce:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <vPortSetupTimerInterrupt+0x34>)
 80042d0:	2207      	movs	r2, #7
 80042d2:	601a      	str	r2, [r3, #0]
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	e000e010 	.word	0xe000e010
 80042e4:	e000e018 	.word	0xe000e018
 80042e8:	20000000 	.word	0x20000000
 80042ec:	10624dd3 	.word	0x10624dd3
 80042f0:	e000e014 	.word	0xe000e014

080042f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80042f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004304 <vPortEnableVFP+0x10>
 80042f8:	6801      	ldr	r1, [r0, #0]
 80042fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80042fe:	6001      	str	r1, [r0, #0]
 8004300:	4770      	bx	lr
 8004302:	0000      	.short	0x0000
 8004304:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop

0800430c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004312:	f3ef 8305 	mrs	r3, IPSR
 8004316:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b0f      	cmp	r3, #15
 800431c:	d914      	bls.n	8004348 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800431e:	4a17      	ldr	r2, [pc, #92]	; (800437c <vPortValidateInterruptPriority+0x70>)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004328:	4b15      	ldr	r3, [pc, #84]	; (8004380 <vPortValidateInterruptPriority+0x74>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	7afa      	ldrb	r2, [r7, #11]
 800432e:	429a      	cmp	r2, r3
 8004330:	d20a      	bcs.n	8004348 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	607b      	str	r3, [r7, #4]
    }
 8004344:	bf00      	nop
 8004346:	e7fe      	b.n	8004346 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004348:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <vPortValidateInterruptPriority+0x78>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004350:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <vPortValidateInterruptPriority+0x7c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d90a      	bls.n	800436e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	603b      	str	r3, [r7, #0]
    }
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <vPortValidateInterruptPriority+0x60>
    }
 800436e:	bf00      	nop
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	e000e3f0 	.word	0xe000e3f0
 8004380:	20000204 	.word	0x20000204
 8004384:	e000ed0c 	.word	0xe000ed0c
 8004388:	20000208 	.word	0x20000208

0800438c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	; 0x28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004398:	f7fe fd46 	bl	8002e28 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800439c:	4b53      	ldr	r3, [pc, #332]	; (80044ec <pvPortMalloc+0x160>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80043a4:	f000 f908 	bl	80045b8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d012      	beq.n	80043d4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80043ae:	2208      	movs	r2, #8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	3308      	adds	r3, #8
 80043ba:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	43db      	mvns	r3, r3
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d804      	bhi.n	80043d0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	4413      	add	r3, r2
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	e001      	b.n	80043d4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	db70      	blt.n	80044bc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d06d      	beq.n	80044bc <pvPortMalloc+0x130>
 80043e0:	4b43      	ldr	r3, [pc, #268]	; (80044f0 <pvPortMalloc+0x164>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d868      	bhi.n	80044bc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80043ea:	4b42      	ldr	r3, [pc, #264]	; (80044f4 <pvPortMalloc+0x168>)
 80043ec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80043ee:	4b41      	ldr	r3, [pc, #260]	; (80044f4 <pvPortMalloc+0x168>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043f4:	e004      	b.n	8004400 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	429a      	cmp	r2, r3
 8004408:	d903      	bls.n	8004412 <pvPortMalloc+0x86>
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f1      	bne.n	80043f6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004412:	4b36      	ldr	r3, [pc, #216]	; (80044ec <pvPortMalloc+0x160>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004418:	429a      	cmp	r2, r3
 800441a:	d04f      	beq.n	80044bc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2208      	movs	r2, #8
 8004422:	4413      	add	r3, r2
 8004424:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	1ad2      	subs	r2, r2, r3
 8004436:	2308      	movs	r3, #8
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	429a      	cmp	r2, r3
 800443c:	d91f      	bls.n	800447e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800443e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4413      	add	r3, r2
 8004444:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <pvPortMalloc+0xda>
        __asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	613b      	str	r3, [r7, #16]
    }
 8004462:	bf00      	nop
 8004464:	e7fe      	b.n	8004464 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	1ad2      	subs	r2, r2, r3
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004478:	6978      	ldr	r0, [r7, #20]
 800447a:	f000 f8f9 	bl	8004670 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800447e:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <pvPortMalloc+0x164>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <pvPortMalloc+0x164>)
 800448a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800448c:	4b18      	ldr	r3, [pc, #96]	; (80044f0 <pvPortMalloc+0x164>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <pvPortMalloc+0x16c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d203      	bcs.n	80044a0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004498:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <pvPortMalloc+0x164>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a16      	ldr	r2, [pc, #88]	; (80044f8 <pvPortMalloc+0x16c>)
 800449e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80044b2:	4b12      	ldr	r3, [pc, #72]	; (80044fc <pvPortMalloc+0x170>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3301      	adds	r3, #1
 80044b8:	4a10      	ldr	r2, [pc, #64]	; (80044fc <pvPortMalloc+0x170>)
 80044ba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80044bc:	f7fe fcc2 	bl	8002e44 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <pvPortMalloc+0x154>
        __asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	60fb      	str	r3, [r7, #12]
    }
 80044dc:	bf00      	nop
 80044de:	e7fe      	b.n	80044de <pvPortMalloc+0x152>
    return pvReturn;
 80044e0:	69fb      	ldr	r3, [r7, #28]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3728      	adds	r7, #40	; 0x28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20012e14 	.word	0x20012e14
 80044f0:	20012e18 	.word	0x20012e18
 80044f4:	20012e0c 	.word	0x20012e0c
 80044f8:	20012e1c 	.word	0x20012e1c
 80044fc:	20012e20 	.word	0x20012e20

08004500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d049      	beq.n	80045a6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004512:	2308      	movs	r3, #8
 8004514:	425b      	negs	r3, r3
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4413      	add	r3, r2
 800451a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	db0a      	blt.n	800453e <vPortFree+0x3e>
        __asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	60fb      	str	r3, [r7, #12]
    }
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <vPortFree+0x5c>
        __asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	60bb      	str	r3, [r7, #8]
    }
 8004558:	bf00      	nop
 800455a:	e7fe      	b.n	800455a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	0fdb      	lsrs	r3, r3, #31
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01c      	beq.n	80045a6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d118      	bne.n	80045a6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004580:	f7fe fc52 	bl	8002e28 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <vPortFree+0xb0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4413      	add	r3, r2
 800458e:	4a08      	ldr	r2, [pc, #32]	; (80045b0 <vPortFree+0xb0>)
 8004590:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004592:	6938      	ldr	r0, [r7, #16]
 8004594:	f000 f86c 	bl	8004670 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <vPortFree+0xb4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3301      	adds	r3, #1
 800459e:	4a05      	ldr	r2, [pc, #20]	; (80045b4 <vPortFree+0xb4>)
 80045a0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80045a2:	f7fe fc4f 	bl	8002e44 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80045a6:	bf00      	nop
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20012e18 	.word	0x20012e18
 80045b4:	20012e24 	.word	0x20012e24

080045b8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045be:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80045c2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80045c4:	4b25      	ldr	r3, [pc, #148]	; (800465c <prvHeapInit+0xa4>)
 80045c6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00c      	beq.n	80045ec <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3307      	adds	r3, #7
 80045d6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0307 	bic.w	r3, r3, #7
 80045de:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	4a1d      	ldr	r2, [pc, #116]	; (800465c <prvHeapInit+0xa4>)
 80045e8:	4413      	add	r3, r2
 80045ea:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045f0:	4a1b      	ldr	r2, [pc, #108]	; (8004660 <prvHeapInit+0xa8>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80045f6:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <prvHeapInit+0xa8>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	4413      	add	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004604:	2208      	movs	r2, #8
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0307 	bic.w	r3, r3, #7
 8004612:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a13      	ldr	r2, [pc, #76]	; (8004664 <prvHeapInit+0xac>)
 8004618:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <prvHeapInit+0xac>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <prvHeapInit+0xac>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	1ad2      	subs	r2, r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <prvHeapInit+0xac>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4a08      	ldr	r2, [pc, #32]	; (8004668 <prvHeapInit+0xb0>)
 8004646:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4a07      	ldr	r2, [pc, #28]	; (800466c <prvHeapInit+0xb4>)
 800464e:	6013      	str	r3, [r2, #0]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	2000020c 	.word	0x2000020c
 8004660:	20012e0c 	.word	0x20012e0c
 8004664:	20012e14 	.word	0x20012e14
 8004668:	20012e1c 	.word	0x20012e1c
 800466c:	20012e18 	.word	0x20012e18

08004670 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004678:	4b28      	ldr	r3, [pc, #160]	; (800471c <prvInsertBlockIntoFreeList+0xac>)
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e002      	b.n	8004684 <prvInsertBlockIntoFreeList+0x14>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d8f7      	bhi.n	800467e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	4413      	add	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	429a      	cmp	r2, r3
 800469e:	d108      	bne.n	80046b2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	441a      	add	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	441a      	add	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d118      	bne.n	80046f8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <prvInsertBlockIntoFreeList+0xb0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d00d      	beq.n	80046ee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	441a      	add	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	e008      	b.n	8004700 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046ee:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <prvInsertBlockIntoFreeList+0xb0>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	e003      	b.n	8004700 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	429a      	cmp	r2, r3
 8004706:	d002      	beq.n	800470e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800470e:	bf00      	nop
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20012e0c 	.word	0x20012e0c
 8004720:	20012e14 	.word	0x20012e14

08004724 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004728:	4803      	ldr	r0, [pc, #12]	; (8004738 <_cbSendSystemDesc+0x14>)
 800472a:	f002 f90f 	bl	800694c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800472e:	4803      	ldr	r0, [pc, #12]	; (800473c <_cbSendSystemDesc+0x18>)
 8004730:	f002 f90c 	bl	800694c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004734:	bf00      	nop
 8004736:	bd80      	pop	{r7, pc}
 8004738:	080070e4 	.word	0x080070e4
 800473c:	08007124 	.word	0x08007124

08004740 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004744:	4b06      	ldr	r3, [pc, #24]	; (8004760 <SEGGER_SYSVIEW_Conf+0x20>)
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <SEGGER_SYSVIEW_Conf+0x20>)
 800474a:	6819      	ldr	r1, [r3, #0]
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <SEGGER_SYSVIEW_Conf+0x24>)
 800474e:	4a06      	ldr	r2, [pc, #24]	; (8004768 <SEGGER_SYSVIEW_Conf+0x28>)
 8004750:	f001 fc78 	bl	8006044 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004754:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004758:	f001 fcb8 	bl	80060cc <SEGGER_SYSVIEW_SetRAMBase>
}
 800475c:	bf00      	nop
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20000000 	.word	0x20000000
 8004764:	08004725 	.word	0x08004725
 8004768:	080071c0 	.word	0x080071c0

0800476c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800476c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800476e:	b085      	sub	sp, #20
 8004770:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004772:	2300      	movs	r3, #0
 8004774:	607b      	str	r3, [r7, #4]
 8004776:	e033      	b.n	80047e0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004778:	491e      	ldr	r1, [pc, #120]	; (80047f4 <_cbSendTaskList+0x88>)
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	491a      	ldr	r1, [pc, #104]	; (80047f4 <_cbSendTaskList+0x88>)
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	3304      	adds	r3, #4
 8004798:	6819      	ldr	r1, [r3, #0]
 800479a:	4c16      	ldr	r4, [pc, #88]	; (80047f4 <_cbSendTaskList+0x88>)
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4423      	add	r3, r4
 80047a8:	3308      	adds	r3, #8
 80047aa:	681c      	ldr	r4, [r3, #0]
 80047ac:	4d11      	ldr	r5, [pc, #68]	; (80047f4 <_cbSendTaskList+0x88>)
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	442b      	add	r3, r5
 80047ba:	330c      	adds	r3, #12
 80047bc:	681d      	ldr	r5, [r3, #0]
 80047be:	4e0d      	ldr	r6, [pc, #52]	; (80047f4 <_cbSendTaskList+0x88>)
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4433      	add	r3, r6
 80047cc:	3310      	adds	r3, #16
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	462b      	mov	r3, r5
 80047d4:	4622      	mov	r2, r4
 80047d6:	f000 f8bd 	bl	8004954 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3301      	adds	r3, #1
 80047de:	607b      	str	r3, [r7, #4]
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <_cbSendTaskList+0x8c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d3c6      	bcc.n	8004778 <_cbSendTaskList+0xc>
  }
}
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047f4:	20012e28 	.word	0x20012e28
 80047f8:	20012ec8 	.word	0x20012ec8

080047fc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80047fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004804:	f7fe fc2e 	bl	8003064 <xTaskGetTickCountFromISR>
 8004808:	4603      	mov	r3, r0
 800480a:	2200      	movs	r2, #0
 800480c:	469a      	mov	sl, r3
 800480e:	4693      	mov	fp, r2
 8004810:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004814:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	f04f 0a00 	mov.w	sl, #0
 8004820:	f04f 0b00 	mov.w	fp, #0
 8004824:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004828:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800482c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004830:	4652      	mov	r2, sl
 8004832:	465b      	mov	r3, fp
 8004834:	1a14      	subs	r4, r2, r0
 8004836:	eb63 0501 	sbc.w	r5, r3, r1
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	00ab      	lsls	r3, r5, #2
 8004844:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004848:	00a2      	lsls	r2, r4, #2
 800484a:	4614      	mov	r4, r2
 800484c:	461d      	mov	r5, r3
 800484e:	eb14 0800 	adds.w	r8, r4, r0
 8004852:	eb45 0901 	adc.w	r9, r5, r1
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800486a:	4690      	mov	r8, r2
 800486c:	4699      	mov	r9, r3
 800486e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004872:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004884 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004892:	2205      	movs	r2, #5
 8004894:	492b      	ldr	r1, [pc, #172]	; (8004944 <SYSVIEW_AddTask+0xc0>)
 8004896:	68b8      	ldr	r0, [r7, #8]
 8004898:	f002 fbc2 	bl	8007020 <memcmp>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d04b      	beq.n	800493a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80048a2:	4b29      	ldr	r3, [pc, #164]	; (8004948 <SYSVIEW_AddTask+0xc4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b07      	cmp	r3, #7
 80048a8:	d903      	bls.n	80048b2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80048aa:	4828      	ldr	r0, [pc, #160]	; (800494c <SYSVIEW_AddTask+0xc8>)
 80048ac:	f002 fb0a 	bl	8006ec4 <SEGGER_SYSVIEW_Warn>
    return;
 80048b0:	e044      	b.n	800493c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80048b2:	4b25      	ldr	r3, [pc, #148]	; (8004948 <SYSVIEW_AddTask+0xc4>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4926      	ldr	r1, [pc, #152]	; (8004950 <SYSVIEW_AddTask+0xcc>)
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80048c6:	4b20      	ldr	r3, [pc, #128]	; (8004948 <SYSVIEW_AddTask+0xc4>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4921      	ldr	r1, [pc, #132]	; (8004950 <SYSVIEW_AddTask+0xcc>)
 80048cc:	4613      	mov	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	3304      	adds	r3, #4
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80048dc:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <SYSVIEW_AddTask+0xc4>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	491b      	ldr	r1, [pc, #108]	; (8004950 <SYSVIEW_AddTask+0xcc>)
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	3308      	adds	r3, #8
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <SYSVIEW_AddTask+0xc4>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4916      	ldr	r1, [pc, #88]	; (8004950 <SYSVIEW_AddTask+0xcc>)
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	330c      	adds	r3, #12
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004908:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <SYSVIEW_AddTask+0xc4>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	4910      	ldr	r1, [pc, #64]	; (8004950 <SYSVIEW_AddTask+0xcc>)
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	3310      	adds	r3, #16
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <SYSVIEW_AddTask+0xc4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3301      	adds	r3, #1
 8004924:	4a08      	ldr	r2, [pc, #32]	; (8004948 <SYSVIEW_AddTask+0xc4>)
 8004926:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f80e 	bl	8004954 <SYSVIEW_SendTaskInfo>
 8004938:	e000      	b.n	800493c <SYSVIEW_AddTask+0xb8>
    return;
 800493a:	bf00      	nop

}
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	08007134 	.word	0x08007134
 8004948:	20012ec8 	.word	0x20012ec8
 800494c:	0800713c 	.word	0x0800713c
 8004950:	20012e28 	.word	0x20012e28

08004954 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	; 0x28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004962:	f107 0314 	add.w	r3, r7, #20
 8004966:	2214      	movs	r2, #20
 8004968:	2100      	movs	r1, #0
 800496a:	4618      	mov	r0, r3
 800496c:	f002 fb76 	bl	800705c <memset>
  TaskInfo.TaskID     = TaskID;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004984:	f107 0314 	add.w	r3, r7, #20
 8004988:	4618      	mov	r0, r3
 800498a:	f001 fee7 	bl	800675c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800498e:	bf00      	nop
 8004990:	3728      	adds	r7, #40	; 0x28
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <__NVIC_EnableIRQ>:
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	db0b      	blt.n	80049c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	f003 021f 	and.w	r2, r3, #31
 80049b0:	4907      	ldr	r1, [pc, #28]	; (80049d0 <__NVIC_EnableIRQ+0x38>)
 80049b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2001      	movs	r0, #1
 80049ba:	fa00 f202 	lsl.w	r2, r0, r2
 80049be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	e000e100 	.word	0xe000e100

080049d4 <__NVIC_SetPriority>:
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	6039      	str	r1, [r7, #0]
 80049de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	db0a      	blt.n	80049fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	490c      	ldr	r1, [pc, #48]	; (8004a20 <__NVIC_SetPriority+0x4c>)
 80049ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f2:	0112      	lsls	r2, r2, #4
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	440b      	add	r3, r1
 80049f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049fc:	e00a      	b.n	8004a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	4908      	ldr	r1, [pc, #32]	; (8004a24 <__NVIC_SetPriority+0x50>)
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	3b04      	subs	r3, #4
 8004a0c:	0112      	lsls	r2, r2, #4
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	440b      	add	r3, r1
 8004a12:	761a      	strb	r2, [r3, #24]
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	e000e100 	.word	0xe000e100
 8004a24:	e000ed00 	.word	0xe000ed00

08004a28 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004a2e:	f002 faa5 	bl	8006f7c <SEGGER_SYSVIEW_IsStarted>
 8004a32:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004a3a:	f001 fd13 	bl	8006464 <SEGGER_SYSVIEW_Start>
  }
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004a52:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <_cbOnUARTRx+0x3c>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d806      	bhi.n	8004a68 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004a5a:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <_cbOnUARTRx+0x3c>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	4b08      	ldr	r3, [pc, #32]	; (8004a84 <_cbOnUARTRx+0x3c>)
 8004a64:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004a66:	e009      	b.n	8004a7c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004a68:	f7ff ffde 	bl	8004a28 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <_cbOnUARTRx+0x3c>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	4618      	mov	r0, r3
 8004a72:	1dfb      	adds	r3, r7, #7
 8004a74:	2201      	movs	r2, #1
 8004a76:	4619      	mov	r1, r3
 8004a78:	f000 fb9c 	bl	80051b4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004a7c:	bf00      	nop
}
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20000014 	.word	0x20000014

08004a88 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004a90:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <_cbOnUARTTx+0x5c>)
 8004a92:	785b      	ldrb	r3, [r3, #1]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d80f      	bhi.n	8004ab8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004a98:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <_cbOnUARTTx+0x5c>)
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <_cbOnUARTTx+0x60>)
 8004aa0:	5c9a      	ldrb	r2, [r3, r2]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004aa6:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <_cbOnUARTTx+0x5c>)
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <_cbOnUARTTx+0x5c>)
 8004ab0:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004ab6:	e00f      	b.n	8004ad8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <_cbOnUARTTx+0x5c>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fa1b 	bl	8004efc <SEGGER_RTT_ReadUpBufferNoLock>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	da02      	bge.n	8004ad6 <_cbOnUARTTx+0x4e>
    r = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	e000      	b.n	8004ad8 <_cbOnUARTTx+0x50>
  }
Done:
 8004ad6:	bf00      	nop
  return r;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000014 	.word	0x20000014
 8004ae8:	080071c8 	.word	0x080071c8

08004aec <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004af4:	4a04      	ldr	r2, [pc, #16]	; (8004b08 <SEGGER_UART_init+0x1c>)
 8004af6:	4905      	ldr	r1, [pc, #20]	; (8004b0c <SEGGER_UART_init+0x20>)
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f863 	bl	8004bc4 <HIF_UART_Init>
}
 8004afe:	bf00      	nop
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	08004a49 	.word	0x08004a49
 8004b0c:	08004a89 	.word	0x08004a89

08004b10 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004b16:	4b1e      	ldr	r3, [pc, #120]	; (8004b90 <USART2_IRQHandler+0x80>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d011      	beq.n	8004b4a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004b26:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <USART2_IRQHandler+0x84>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f003 030b 	and.w	r3, r3, #11
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d108      	bne.n	8004b4a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004b38:	4b17      	ldr	r3, [pc, #92]	; (8004b98 <USART2_IRQHandler+0x88>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d004      	beq.n	8004b4a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004b40:	4b15      	ldr	r3, [pc, #84]	; (8004b98 <USART2_IRQHandler+0x88>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	79fa      	ldrb	r2, [r7, #7]
 8004b46:	4610      	mov	r0, r2
 8004b48:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01a      	beq.n	8004b8a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004b54:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <USART2_IRQHandler+0x8c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d015      	beq.n	8004b88 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <USART2_IRQHandler+0x8c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	1dfa      	adds	r2, r7, #7
 8004b62:	4610      	mov	r0, r2
 8004b64:	4798      	blx	r3
 8004b66:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <USART2_IRQHandler+0x90>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a0b      	ldr	r2, [pc, #44]	; (8004ba0 <USART2_IRQHandler+0x90>)
 8004b74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	e006      	b.n	8004b8a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004b7c:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <USART2_IRQHandler+0x80>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004b80:	79fa      	ldrb	r2, [r7, #7]
 8004b82:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <USART2_IRQHandler+0x84>)
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	e000      	b.n	8004b8a <USART2_IRQHandler+0x7a>
      return;
 8004b88:	bf00      	nop
    }
  }
}
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40004400 	.word	0x40004400
 8004b94:	40004404 	.word	0x40004404
 8004b98:	20012ecc 	.word	0x20012ecc
 8004b9c:	20012ed0 	.word	0x20012ed0
 8004ba0:	4000440c 	.word	0x4000440c

08004ba4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004ba8:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb2:	6013      	str	r3, [r2, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	4000440c 	.word	0x4000440c

08004bc4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004bd0:	4b2e      	ldr	r3, [pc, #184]	; (8004c8c <HIF_UART_Init+0xc8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a2d      	ldr	r2, [pc, #180]	; (8004c8c <HIF_UART_Init+0xc8>)
 8004bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bda:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004bdc:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <HIF_UART_Init+0xcc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a2b      	ldr	r2, [pc, #172]	; (8004c90 <HIF_UART_Init+0xcc>)
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004be8:	4b2a      	ldr	r3, [pc, #168]	; (8004c94 <HIF_UART_Init+0xd0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bf4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004bfc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004bfe:	4a25      	ldr	r2, [pc, #148]	; (8004c94 <HIF_UART_Init+0xd0>)
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004c04:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <HIF_UART_Init+0xd4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c10:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004c18:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004c1a:	4a1f      	ldr	r2, [pc, #124]	; (8004c98 <HIF_UART_Init+0xd4>)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004c20:	4b1e      	ldr	r3, [pc, #120]	; (8004c9c <HIF_UART_Init+0xd8>)
 8004c22:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004c26:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004c28:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <HIF_UART_Init+0xdc>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004c2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <HIF_UART_Init+0xe0>)
 8004c30:	2280      	movs	r2, #128	; 0x80
 8004c32:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004c3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ca8 <HIF_UART_Init+0xe4>)
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	3301      	adds	r3, #1
 8004c44:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c52:	d302      	bcc.n	8004c5a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004c54:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004c58:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d004      	beq.n	8004c6a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	4a11      	ldr	r2, [pc, #68]	; (8004cac <HIF_UART_Init+0xe8>)
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004c6a:	4a11      	ldr	r2, [pc, #68]	; (8004cb0 <HIF_UART_Init+0xec>)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004c70:	4a10      	ldr	r2, [pc, #64]	; (8004cb4 <HIF_UART_Init+0xf0>)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004c76:	2106      	movs	r1, #6
 8004c78:	2026      	movs	r0, #38	; 0x26
 8004c7a:	f7ff feab 	bl	80049d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004c7e:	2026      	movs	r0, #38	; 0x26
 8004c80:	f7ff fe8a 	bl	8004998 <__NVIC_EnableIRQ>
}
 8004c84:	bf00      	nop
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40023840 	.word	0x40023840
 8004c90:	40023830 	.word	0x40023830
 8004c94:	40020020 	.word	0x40020020
 8004c98:	40020000 	.word	0x40020000
 8004c9c:	4000440c 	.word	0x4000440c
 8004ca0:	40004410 	.word	0x40004410
 8004ca4:	40004414 	.word	0x40004414
 8004ca8:	0501bd00 	.word	0x0501bd00
 8004cac:	40004408 	.word	0x40004408
 8004cb0:	20012ecc 	.word	0x20012ecc
 8004cb4:	20012ed0 	.word	0x20012ed0

08004cb8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004cbe:	4b26      	ldr	r3, [pc, #152]	; (8004d58 <_DoInit+0xa0>)
 8004cc0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004cc2:	22a8      	movs	r2, #168	; 0xa8
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	6838      	ldr	r0, [r7, #0]
 8004cc8:	f002 f9c8 	bl	800705c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2203      	movs	r2, #3
 8004cd0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2203      	movs	r2, #3
 8004cd6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	4a20      	ldr	r2, [pc, #128]	; (8004d5c <_DoInit+0xa4>)
 8004cdc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <_DoInit+0xa8>)
 8004ce2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cea:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <_DoInit+0xa4>)
 8004d02:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	4a17      	ldr	r2, [pc, #92]	; (8004d64 <_DoInit+0xac>)
 8004d08:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2210      	movs	r2, #16
 8004d0e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004d22:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004d26:	2300      	movs	r3, #0
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	e00c      	b.n	8004d46 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f1c3 030f 	rsb	r3, r3, #15
 8004d32:	4a0d      	ldr	r2, [pc, #52]	; (8004d68 <_DoInit+0xb0>)
 8004d34:	5cd1      	ldrb	r1, [r2, r3]
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	460a      	mov	r2, r1
 8004d3e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3301      	adds	r3, #1
 8004d44:	607b      	str	r3, [r7, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b0f      	cmp	r3, #15
 8004d4a:	d9ef      	bls.n	8004d2c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004d4c:	f3bf 8f5f 	dmb	sy
}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20012ed4 	.word	0x20012ed4
 8004d5c:	0800718c 	.word	0x0800718c
 8004d60:	20012f7c 	.word	0x20012f7c
 8004d64:	2001337c 	.word	0x2001337c
 8004d68:	080071cc 	.word	0x080071cc

08004d6c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	; 0x28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d905      	bls.n	8004d9c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9a:	e007      	b.n	8004dac <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	69b9      	ldr	r1, [r7, #24]
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	1acb      	subs	r3, r1, r3
 8004da6:	4413      	add	r3, r2
 8004da8:	3b01      	subs	r3, #1
 8004daa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db6:	4293      	cmp	r3, r2
 8004db8:	bf28      	it	cs
 8004dba:	4613      	movcs	r3, r2
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	bf28      	it	cs
 8004dc6:	4613      	movcs	r3, r2
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	6978      	ldr	r0, [r7, #20]
 8004dda:	f002 f931 	bl	8007040 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004dde:	6a3a      	ldr	r2, [r7, #32]
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	4413      	add	r3, r2
 8004de4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	4413      	add	r3, r2
 8004dec:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	4413      	add	r3, r2
 8004dfc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d101      	bne.n	8004e0c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e0c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1b2      	bne.n	8004d82 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3728      	adds	r7, #40	; 0x28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b088      	sub	sp, #32
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	60f8      	str	r0, [r7, #12]
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d911      	bls.n	8004e6e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	6938      	ldr	r0, [r7, #16]
 8004e5a:	f002 f8f1 	bl	8007040 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e5e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	441a      	add	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004e6c:	e01f      	b.n	8004eae <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	6938      	ldr	r0, [r7, #16]
 8004e82:	f002 f8dd 	bl	8007040 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	4413      	add	r3, r2
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6938      	ldr	r0, [r7, #16]
 8004ea0:	f002 f8ce 	bl	8007040 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ea4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	60da      	str	r2, [r3, #12]
}
 8004eae:	bf00      	nop
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004eb6:	b480      	push	{r7}
 8004eb8:	b087      	sub	sp, #28
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d808      	bhi.n	8004ee4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad2      	subs	r2, r2, r3
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	4413      	add	r3, r2
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	e004      	b.n	8004eee <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004eee:	697b      	ldr	r3, [r7, #20]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	371c      	adds	r7, #28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08c      	sub	sp, #48	; 0x30
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004f08:	4b3e      	ldr	r3, [pc, #248]	; (8005004 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004f0a:	623b      	str	r3, [r7, #32]
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b53      	cmp	r3, #83	; 0x53
 8004f14:	d001      	beq.n	8004f1a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004f16:	f7ff fecf 	bl	8004cb8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	4613      	mov	r3, r2
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	4413      	add	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4a37      	ldr	r2, [pc, #220]	; (8005004 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004f28:	4413      	add	r3, r2
 8004f2a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d92b      	bls.n	8004fa0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4293      	cmp	r3, r2
 8004f58:	bf28      	it	cs
 8004f5a:	4613      	movcs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	4413      	add	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	6939      	ldr	r1, [r7, #16]
 8004f6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f6e:	f002 f867 	bl	8007040 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	4413      	add	r3, r2
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	4413      	add	r3, r2
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4413      	add	r3, r2
 8004f90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d101      	bne.n	8004fa0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4293      	cmp	r3, r2
 8004fae:	bf28      	it	cs
 8004fb0:	4613      	movcs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d019      	beq.n	8004fee <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	4413      	add	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	6939      	ldr	r1, [r7, #16]
 8004fc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fca:	f002 f839 	bl	8007040 <memcpy>
    NumBytesRead += NumBytesRem;
 8004fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	4413      	add	r3, r2
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	4413      	add	r3, r2
 8004fec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3730      	adds	r7, #48	; 0x30
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20012ed4 	.word	0x20012ed4

08005008 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b08c      	sub	sp, #48	; 0x30
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005014:	4b3e      	ldr	r3, [pc, #248]	; (8005110 <SEGGER_RTT_ReadNoLock+0x108>)
 8005016:	623b      	str	r3, [r7, #32]
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b53      	cmp	r3, #83	; 0x53
 8005020:	d001      	beq.n	8005026 <SEGGER_RTT_ReadNoLock+0x1e>
 8005022:	f7ff fe49 	bl	8004cb8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4613      	mov	r3, r2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	4413      	add	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	3360      	adds	r3, #96	; 0x60
 8005032:	4a37      	ldr	r2, [pc, #220]	; (8005110 <SEGGER_RTT_ReadNoLock+0x108>)
 8005034:	4413      	add	r3, r2
 8005036:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005048:	2300      	movs	r3, #0
 800504a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800504c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	429a      	cmp	r2, r3
 8005052:	d92b      	bls.n	80050ac <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4293      	cmp	r3, r2
 8005064:	bf28      	it	cs
 8005066:	4613      	movcs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005070:	4413      	add	r3, r2
 8005072:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	6939      	ldr	r1, [r7, #16]
 8005078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800507a:	f001 ffe1 	bl	8007040 <memcpy>
    NumBytesRead += NumBytesRem;
 800507e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	4413      	add	r3, r2
 8005084:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	4413      	add	r3, r2
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	4413      	add	r3, r2
 800509c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d101      	bne.n	80050ac <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80050a8:	2300      	movs	r3, #0
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4293      	cmp	r3, r2
 80050ba:	bf28      	it	cs
 80050bc:	4613      	movcs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d019      	beq.n	80050fa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	4413      	add	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	6939      	ldr	r1, [r7, #16]
 80050d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050d6:	f001 ffb3 	bl	8007040 <memcpy>
    NumBytesRead += NumBytesRem;
 80050da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	4413      	add	r3, r2
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80050e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	4413      	add	r3, r2
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4413      	add	r3, r2
 80050f8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005104:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005108:	4618      	mov	r0, r3
 800510a:	3730      	adds	r7, #48	; 0x30
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20012ed4 	.word	0x20012ed4

08005114 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4613      	mov	r3, r2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	4413      	add	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	3360      	adds	r3, #96	; 0x60
 8005130:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005132:	4413      	add	r3, r2
 8005134:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d029      	beq.n	8005192 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800513e:	2b02      	cmp	r3, #2
 8005140:	d82e      	bhi.n	80051a0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005146:	2b01      	cmp	r3, #1
 8005148:	d013      	beq.n	8005172 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800514a:	e029      	b.n	80051a0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800514c:	6978      	ldr	r0, [r7, #20]
 800514e:	f7ff feb2 	bl	8004eb6 <_GetAvailWriteSpace>
 8005152:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	429a      	cmp	r2, r3
 800515a:	d202      	bcs.n	8005162 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800515c:	2300      	movs	r3, #0
 800515e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005160:	e021      	b.n	80051a6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	69b9      	ldr	r1, [r7, #24]
 800516a:	6978      	ldr	r0, [r7, #20]
 800516c:	f7ff fe5b 	bl	8004e26 <_WriteNoCheck>
    break;
 8005170:	e019      	b.n	80051a6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005172:	6978      	ldr	r0, [r7, #20]
 8005174:	f7ff fe9f 	bl	8004eb6 <_GetAvailWriteSpace>
 8005178:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4293      	cmp	r3, r2
 8005180:	bf28      	it	cs
 8005182:	4613      	movcs	r3, r2
 8005184:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	69b9      	ldr	r1, [r7, #24]
 800518a:	6978      	ldr	r0, [r7, #20]
 800518c:	f7ff fe4b 	bl	8004e26 <_WriteNoCheck>
    break;
 8005190:	e009      	b.n	80051a6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	69b9      	ldr	r1, [r7, #24]
 8005196:	6978      	ldr	r0, [r7, #20]
 8005198:	f7ff fde8 	bl	8004d6c <_WriteBlocking>
 800519c:	61f8      	str	r0, [r7, #28]
    break;
 800519e:	e002      	b.n	80051a6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80051a0:	2300      	movs	r3, #0
 80051a2:	61fb      	str	r3, [r7, #28]
    break;
 80051a4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80051a6:	69fb      	ldr	r3, [r7, #28]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3720      	adds	r7, #32
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20012ed4 	.word	0x20012ed4

080051b4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80051c0:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <SEGGER_RTT_WriteDownBuffer+0x48>)
 80051c2:	61fb      	str	r3, [r7, #28]
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b53      	cmp	r3, #83	; 0x53
 80051cc:	d001      	beq.n	80051d2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80051ce:	f7ff fd73 	bl	8004cb8 <_DoInit>
  SEGGER_RTT_LOCK();
 80051d2:	f3ef 8311 	mrs	r3, BASEPRI
 80051d6:	f04f 0120 	mov.w	r1, #32
 80051da:	f381 8811 	msr	BASEPRI, r1
 80051de:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff ff95 	bl	8005114 <SEGGER_RTT_WriteDownBufferNoLock>
 80051ea:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80051f2:	697b      	ldr	r3, [r7, #20]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3720      	adds	r7, #32
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20012ed4 	.word	0x20012ed4

08005200 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b088      	sub	sp, #32
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800520e:	4b3d      	ldr	r3, [pc, #244]	; (8005304 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b53      	cmp	r3, #83	; 0x53
 800521a:	d001      	beq.n	8005220 <SEGGER_RTT_AllocUpBuffer+0x20>
 800521c:	f7ff fd4c 	bl	8004cb8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005220:	f3ef 8311 	mrs	r3, BASEPRI
 8005224:	f04f 0120 	mov.w	r1, #32
 8005228:	f381 8811 	msr	BASEPRI, r1
 800522c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800522e:	4b35      	ldr	r3, [pc, #212]	; (8005304 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005230:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005236:	6939      	ldr	r1, [r7, #16]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	4613      	mov	r3, r2
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	4413      	add	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	440b      	add	r3, r1
 8005246:	3304      	adds	r3, #4
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d008      	beq.n	8005260 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	3301      	adds	r3, #1
 8005252:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	429a      	cmp	r2, r3
 800525c:	dbeb      	blt.n	8005236 <SEGGER_RTT_AllocUpBuffer+0x36>
 800525e:	e000      	b.n	8005262 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005260:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	429a      	cmp	r2, r3
 800526a:	da3f      	bge.n	80052ec <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800526c:	6939      	ldr	r1, [r7, #16]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	4613      	mov	r3, r2
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	4413      	add	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	440b      	add	r3, r1
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005280:	6939      	ldr	r1, [r7, #16]
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	4613      	mov	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	4413      	add	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	440b      	add	r3, r1
 8005290:	3304      	adds	r3, #4
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005296:	6939      	ldr	r1, [r7, #16]
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	4613      	mov	r3, r2
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	4413      	add	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	440b      	add	r3, r1
 80052a4:	3320      	adds	r3, #32
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80052aa:	6939      	ldr	r1, [r7, #16]
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	4613      	mov	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	4413      	add	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	440b      	add	r3, r1
 80052b8:	3328      	adds	r3, #40	; 0x28
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80052be:	6939      	ldr	r1, [r7, #16]
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	4613      	mov	r3, r2
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	4413      	add	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	440b      	add	r3, r1
 80052cc:	3324      	adds	r3, #36	; 0x24
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80052d2:	6939      	ldr	r1, [r7, #16]
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	4613      	mov	r3, r2
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	4413      	add	r3, r2
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	440b      	add	r3, r1
 80052e0:	332c      	adds	r3, #44	; 0x2c
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052e6:	f3bf 8f5f 	dmb	sy
 80052ea:	e002      	b.n	80052f2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80052ec:	f04f 33ff 	mov.w	r3, #4294967295
 80052f0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80052f8:	69fb      	ldr	r3, [r7, #28]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3720      	adds	r7, #32
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20012ed4 	.word	0x20012ed4

08005308 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b08a      	sub	sp, #40	; 0x28
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005316:	4b21      	ldr	r3, [pc, #132]	; (800539c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005318:	623b      	str	r3, [r7, #32]
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b53      	cmp	r3, #83	; 0x53
 8005322:	d001      	beq.n	8005328 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005324:	f7ff fcc8 	bl	8004cb8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005328:	4b1c      	ldr	r3, [pc, #112]	; (800539c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800532a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d82c      	bhi.n	800538c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005332:	f3ef 8311 	mrs	r3, BASEPRI
 8005336:	f04f 0120 	mov.w	r1, #32
 800533a:	f381 8811 	msr	BASEPRI, r1
 800533e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4613      	mov	r3, r2
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	4413      	add	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	3360      	adds	r3, #96	; 0x60
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	4413      	add	r3, r2
 8005350:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00e      	beq.n	8005376 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2200      	movs	r2, #0
 800536e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2200      	movs	r2, #0
 8005374:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800537c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005386:	2300      	movs	r3, #0
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
 800538a:	e002      	b.n	8005392 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800538c:	f04f 33ff 	mov.w	r3, #4294967295
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005394:	4618      	mov	r0, r3
 8005396:	3728      	adds	r7, #40	; 0x28
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20012ed4 	.word	0x20012ed4

080053a0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	60fa      	str	r2, [r7, #12]
 80053b6:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b80      	cmp	r3, #128	; 0x80
 80053bc:	d90a      	bls.n	80053d4 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80053c2:	e007      	b.n	80053d4 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	1c53      	adds	r3, r2, #1
 80053c8:	60bb      	str	r3, [r7, #8]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1c59      	adds	r1, r3, #1
 80053ce:	60f9      	str	r1, [r7, #12]
 80053d0:	7812      	ldrb	r2, [r2, #0]
 80053d2:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	1e5a      	subs	r2, r3, #1
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <_EncodeStr+0x46>
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1ee      	bne.n	80053c4 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80053f2:	68fb      	ldr	r3, [r7, #12]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3307      	adds	r3, #7
}
 800540c:	4618      	mov	r0, r3
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800541e:	4b35      	ldr	r3, [pc, #212]	; (80054f4 <_HandleIncomingPacket+0xdc>)
 8005420:	7e1b      	ldrb	r3, [r3, #24]
 8005422:	4618      	mov	r0, r3
 8005424:	1cfb      	adds	r3, r7, #3
 8005426:	2201      	movs	r2, #1
 8005428:	4619      	mov	r1, r3
 800542a:	f7ff fded 	bl	8005008 <SEGGER_RTT_ReadNoLock>
 800542e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d052      	beq.n	80054dc <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	2b80      	cmp	r3, #128	; 0x80
 800543a:	d031      	beq.n	80054a0 <_HandleIncomingPacket+0x88>
 800543c:	2b80      	cmp	r3, #128	; 0x80
 800543e:	dc40      	bgt.n	80054c2 <_HandleIncomingPacket+0xaa>
 8005440:	2b07      	cmp	r3, #7
 8005442:	dc15      	bgt.n	8005470 <_HandleIncomingPacket+0x58>
 8005444:	2b00      	cmp	r3, #0
 8005446:	dd3c      	ble.n	80054c2 <_HandleIncomingPacket+0xaa>
 8005448:	3b01      	subs	r3, #1
 800544a:	2b06      	cmp	r3, #6
 800544c:	d839      	bhi.n	80054c2 <_HandleIncomingPacket+0xaa>
 800544e:	a201      	add	r2, pc, #4	; (adr r2, 8005454 <_HandleIncomingPacket+0x3c>)
 8005450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005454:	08005477 	.word	0x08005477
 8005458:	0800547d 	.word	0x0800547d
 800545c:	08005483 	.word	0x08005483
 8005460:	08005489 	.word	0x08005489
 8005464:	0800548f 	.word	0x0800548f
 8005468:	08005495 	.word	0x08005495
 800546c:	0800549b 	.word	0x0800549b
 8005470:	2b7f      	cmp	r3, #127	; 0x7f
 8005472:	d035      	beq.n	80054e0 <_HandleIncomingPacket+0xc8>
 8005474:	e025      	b.n	80054c2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005476:	f000 fff5 	bl	8006464 <SEGGER_SYSVIEW_Start>
      break;
 800547a:	e036      	b.n	80054ea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800547c:	f001 f8ae 	bl	80065dc <SEGGER_SYSVIEW_Stop>
      break;
 8005480:	e033      	b.n	80054ea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005482:	f001 fa87 	bl	8006994 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005486:	e030      	b.n	80054ea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005488:	f001 fa4c 	bl	8006924 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800548c:	e02d      	b.n	80054ea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800548e:	f001 f8cb 	bl	8006628 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005492:	e02a      	b.n	80054ea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005494:	f001 fcc4 	bl	8006e20 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005498:	e027      	b.n	80054ea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800549a:	f001 fca3 	bl	8006de4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800549e:	e024      	b.n	80054ea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054a0:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <_HandleIncomingPacket+0xdc>)
 80054a2:	7e1b      	ldrb	r3, [r3, #24]
 80054a4:	4618      	mov	r0, r3
 80054a6:	1cfb      	adds	r3, r7, #3
 80054a8:	2201      	movs	r2, #1
 80054aa:	4619      	mov	r1, r3
 80054ac:	f7ff fdac 	bl	8005008 <SEGGER_RTT_ReadNoLock>
 80054b0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d015      	beq.n	80054e4 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 fc08 	bl	8006cd0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80054c0:	e010      	b.n	80054e4 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	b25b      	sxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	da0e      	bge.n	80054e8 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054ca:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <_HandleIncomingPacket+0xdc>)
 80054cc:	7e1b      	ldrb	r3, [r3, #24]
 80054ce:	4618      	mov	r0, r3
 80054d0:	1cfb      	adds	r3, r7, #3
 80054d2:	2201      	movs	r2, #1
 80054d4:	4619      	mov	r1, r3
 80054d6:	f7ff fd97 	bl	8005008 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80054da:	e005      	b.n	80054e8 <_HandleIncomingPacket+0xd0>
    }
  }
 80054dc:	bf00      	nop
 80054de:	e004      	b.n	80054ea <_HandleIncomingPacket+0xd2>
      break;
 80054e0:	bf00      	nop
 80054e2:	e002      	b.n	80054ea <_HandleIncomingPacket+0xd2>
      break;
 80054e4:	bf00      	nop
 80054e6:	e000      	b.n	80054ea <_HandleIncomingPacket+0xd2>
      break;
 80054e8:	bf00      	nop
}
 80054ea:	bf00      	nop
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20014394 	.word	0x20014394

080054f8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08c      	sub	sp, #48	; 0x30
 80054fc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80054fe:	2301      	movs	r3, #1
 8005500:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005502:	1d3b      	adds	r3, r7, #4
 8005504:	3301      	adds	r3, #1
 8005506:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800550c:	4b32      	ldr	r3, [pc, #200]	; (80055d8 <_TrySendOverflowPacket+0xe0>)
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	62bb      	str	r3, [r7, #40]	; 0x28
 8005512:	e00b      	b.n	800552c <_TrySendOverflowPacket+0x34>
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	b2da      	uxtb	r2, r3
 8005518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551a:	1c59      	adds	r1, r3, #1
 800551c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800551e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	09db      	lsrs	r3, r3, #7
 800552a:	62bb      	str	r3, [r7, #40]	; 0x28
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	2b7f      	cmp	r3, #127	; 0x7f
 8005530:	d8f0      	bhi.n	8005514 <_TrySendOverflowPacket+0x1c>
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005542:	4b26      	ldr	r3, [pc, #152]	; (80055dc <_TrySendOverflowPacket+0xe4>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005548:	4b23      	ldr	r3, [pc, #140]	; (80055d8 <_TrySendOverflowPacket+0xe0>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	623b      	str	r3, [r7, #32]
 800555a:	e00b      	b.n	8005574 <_TrySendOverflowPacket+0x7c>
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	b2da      	uxtb	r2, r3
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	1c59      	adds	r1, r3, #1
 8005564:	6279      	str	r1, [r7, #36]	; 0x24
 8005566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	09db      	lsrs	r3, r3, #7
 8005572:	623b      	str	r3, [r7, #32]
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	2b7f      	cmp	r3, #127	; 0x7f
 8005578:	d8f0      	bhi.n	800555c <_TrySendOverflowPacket+0x64>
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	627a      	str	r2, [r7, #36]	; 0x24
 8005580:	6a3a      	ldr	r2, [r7, #32]
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800558a:	4b13      	ldr	r3, [pc, #76]	; (80055d8 <_TrySendOverflowPacket+0xe0>)
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	4618      	mov	r0, r3
 8005590:	1d3b      	adds	r3, r7, #4
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	461a      	mov	r2, r3
 8005598:	1d3b      	adds	r3, r7, #4
 800559a:	4619      	mov	r1, r3
 800559c:	f7fa fe38 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80055a0:	4603      	mov	r3, r0
 80055a2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80055a4:	f7ff fafe 	bl	8004ba4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d009      	beq.n	80055c2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80055ae:	4a0a      	ldr	r2, [pc, #40]	; (80055d8 <_TrySendOverflowPacket+0xe0>)
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80055b4:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <_TrySendOverflowPacket+0xe0>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <_TrySendOverflowPacket+0xe0>)
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	e004      	b.n	80055cc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80055c2:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <_TrySendOverflowPacket+0xe0>)
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	3301      	adds	r3, #1
 80055c8:	4a03      	ldr	r2, [pc, #12]	; (80055d8 <_TrySendOverflowPacket+0xe0>)
 80055ca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80055cc:	693b      	ldr	r3, [r7, #16]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3730      	adds	r7, #48	; 0x30
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20014394 	.word	0x20014394
 80055dc:	e0001004 	.word	0xe0001004

080055e0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08a      	sub	sp, #40	; 0x28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80055ec:	4b96      	ldr	r3, [pc, #600]	; (8005848 <_SendPacket+0x268>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d010      	beq.n	8005616 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80055f4:	4b94      	ldr	r3, [pc, #592]	; (8005848 <_SendPacket+0x268>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8130 	beq.w	800585e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80055fe:	4b92      	ldr	r3, [pc, #584]	; (8005848 <_SendPacket+0x268>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d109      	bne.n	800561a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005606:	f7ff ff77 	bl	80054f8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800560a:	4b8f      	ldr	r3, [pc, #572]	; (8005848 <_SendPacket+0x268>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b01      	cmp	r3, #1
 8005610:	f040 8127 	bne.w	8005862 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005614:	e001      	b.n	800561a <_SendPacket+0x3a>
    goto Send;
 8005616:	bf00      	nop
 8005618:	e000      	b.n	800561c <_SendPacket+0x3c>
Send:
 800561a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b1f      	cmp	r3, #31
 8005620:	d809      	bhi.n	8005636 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005622:	4b89      	ldr	r3, [pc, #548]	; (8005848 <_SendPacket+0x268>)
 8005624:	69da      	ldr	r2, [r3, #28]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	fa22 f303 	lsr.w	r3, r2, r3
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	f040 8118 	bne.w	8005866 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b17      	cmp	r3, #23
 800563a:	d807      	bhi.n	800564c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3b01      	subs	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	b2da      	uxtb	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	e0c4      	b.n	80057d6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	2b7f      	cmp	r3, #127	; 0x7f
 8005658:	d912      	bls.n	8005680 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	09da      	lsrs	r2, r3, #7
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3b01      	subs	r3, #1
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	3a01      	subs	r2, #1
 8005672:	60fa      	str	r2, [r7, #12]
 8005674:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005678:	b2da      	uxtb	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	701a      	strb	r2, [r3, #0]
 800567e:	e006      	b.n	800568e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3b01      	subs	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b7e      	cmp	r3, #126	; 0x7e
 8005692:	d807      	bhi.n	80056a4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3b01      	subs	r3, #1
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	b2da      	uxtb	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	e098      	b.n	80057d6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056aa:	d212      	bcs.n	80056d2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	09da      	lsrs	r2, r3, #7
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	3a01      	subs	r2, #1
 80056c4:	60fa      	str	r2, [r7, #12]
 80056c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	e081      	b.n	80057d6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056d8:	d21d      	bcs.n	8005716 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	0b9a      	lsrs	r2, r3, #14
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	09db      	lsrs	r3, r3, #7
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	3a01      	subs	r2, #1
 80056f4:	60fa      	str	r2, [r7, #12]
 80056f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	3a01      	subs	r2, #1
 8005708:	60fa      	str	r2, [r7, #12]
 800570a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800570e:	b2da      	uxtb	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	e05f      	b.n	80057d6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800571c:	d228      	bcs.n	8005770 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	0d5a      	lsrs	r2, r3, #21
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3b01      	subs	r3, #1
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0b9b      	lsrs	r3, r3, #14
 8005732:	b2db      	uxtb	r3, r3
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	3a01      	subs	r2, #1
 8005738:	60fa      	str	r2, [r7, #12]
 800573a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800573e:	b2da      	uxtb	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	09db      	lsrs	r3, r3, #7
 8005748:	b2db      	uxtb	r3, r3
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	3a01      	subs	r2, #1
 800574e:	60fa      	str	r2, [r7, #12]
 8005750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005754:	b2da      	uxtb	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	3a01      	subs	r2, #1
 8005762:	60fa      	str	r2, [r7, #12]
 8005764:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005768:	b2da      	uxtb	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	e032      	b.n	80057d6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	0f1a      	lsrs	r2, r3, #28
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3b01      	subs	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	0d5b      	lsrs	r3, r3, #21
 8005784:	b2db      	uxtb	r3, r3
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	3a01      	subs	r2, #1
 800578a:	60fa      	str	r2, [r7, #12]
 800578c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005790:	b2da      	uxtb	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	0b9b      	lsrs	r3, r3, #14
 800579a:	b2db      	uxtb	r3, r3
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	3a01      	subs	r2, #1
 80057a0:	60fa      	str	r2, [r7, #12]
 80057a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	09db      	lsrs	r3, r3, #7
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	3a01      	subs	r2, #1
 80057b6:	60fa      	str	r2, [r7, #12]
 80057b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	3a01      	subs	r2, #1
 80057ca:	60fa      	str	r2, [r7, #12]
 80057cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80057d6:	4b1d      	ldr	r3, [pc, #116]	; (800584c <_SendPacket+0x26c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80057dc:	4b1a      	ldr	r3, [pc, #104]	; (8005848 <_SendPacket+0x268>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	623b      	str	r3, [r7, #32]
 80057ee:	e00b      	b.n	8005808 <_SendPacket+0x228>
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	1c59      	adds	r1, r3, #1
 80057f8:	6279      	str	r1, [r7, #36]	; 0x24
 80057fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	09db      	lsrs	r3, r3, #7
 8005806:	623b      	str	r3, [r7, #32]
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	2b7f      	cmp	r3, #127	; 0x7f
 800580c:	d8f0      	bhi.n	80057f0 <_SendPacket+0x210>
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	627a      	str	r2, [r7, #36]	; 0x24
 8005814:	6a3a      	ldr	r2, [r7, #32]
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800581e:	4b0a      	ldr	r3, [pc, #40]	; (8005848 <_SendPacket+0x268>)
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	4618      	mov	r0, r3
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	461a      	mov	r2, r3
 800582c:	68f9      	ldr	r1, [r7, #12]
 800582e:	f7fa fcef 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005832:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005834:	f7ff f9b6 	bl	8004ba4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d008      	beq.n	8005850 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800583e:	4a02      	ldr	r2, [pc, #8]	; (8005848 <_SendPacket+0x268>)
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	60d3      	str	r3, [r2, #12]
 8005844:	e010      	b.n	8005868 <_SendPacket+0x288>
 8005846:	bf00      	nop
 8005848:	20014394 	.word	0x20014394
 800584c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005850:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <_SendPacket+0x2d8>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	3301      	adds	r3, #1
 8005856:	b2da      	uxtb	r2, r3
 8005858:	4b17      	ldr	r3, [pc, #92]	; (80058b8 <_SendPacket+0x2d8>)
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e004      	b.n	8005868 <_SendPacket+0x288>
    goto SendDone;
 800585e:	bf00      	nop
 8005860:	e002      	b.n	8005868 <_SendPacket+0x288>
      goto SendDone;
 8005862:	bf00      	nop
 8005864:	e000      	b.n	8005868 <_SendPacket+0x288>
      goto SendDone;
 8005866:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005868:	4b13      	ldr	r3, [pc, #76]	; (80058b8 <_SendPacket+0x2d8>)
 800586a:	7e1b      	ldrb	r3, [r3, #24]
 800586c:	4619      	mov	r1, r3
 800586e:	4a13      	ldr	r2, [pc, #76]	; (80058bc <_SendPacket+0x2dc>)
 8005870:	460b      	mov	r3, r1
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	440b      	add	r3, r1
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	4413      	add	r3, r2
 800587a:	336c      	adds	r3, #108	; 0x6c
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	4b0e      	ldr	r3, [pc, #56]	; (80058b8 <_SendPacket+0x2d8>)
 8005880:	7e1b      	ldrb	r3, [r3, #24]
 8005882:	4618      	mov	r0, r3
 8005884:	490d      	ldr	r1, [pc, #52]	; (80058bc <_SendPacket+0x2dc>)
 8005886:	4603      	mov	r3, r0
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	4403      	add	r3, r0
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	440b      	add	r3, r1
 8005890:	3370      	adds	r3, #112	; 0x70
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d00b      	beq.n	80058b0 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005898:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <_SendPacket+0x2d8>)
 800589a:	789b      	ldrb	r3, [r3, #2]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d107      	bne.n	80058b0 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80058a0:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <_SendPacket+0x2d8>)
 80058a2:	2201      	movs	r2, #1
 80058a4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80058a6:	f7ff fdb7 	bl	8005418 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80058aa:	4b03      	ldr	r3, [pc, #12]	; (80058b8 <_SendPacket+0x2d8>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80058b0:	bf00      	nop
 80058b2:	3728      	adds	r7, #40	; 0x28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20014394 	.word	0x20014394
 80058bc:	20012ed4 	.word	0x20012ed4

080058c0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08a      	sub	sp, #40	; 0x28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	3301      	adds	r3, #1
 80058d6:	2b80      	cmp	r3, #128	; 0x80
 80058d8:	d80a      	bhi.n	80058f0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	1c59      	adds	r1, r3, #1
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6051      	str	r1, [r2, #4]
 80058e4:	78fa      	ldrb	r2, [r7, #3]
 80058e6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b80      	cmp	r3, #128	; 0x80
 80058f6:	d15a      	bne.n	80059ae <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	623b      	str	r3, [r7, #32]
 8005918:	e00b      	b.n	8005932 <_StoreChar+0x72>
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	b2da      	uxtb	r2, r3
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	1c59      	adds	r1, r3, #1
 8005922:	6279      	str	r1, [r7, #36]	; 0x24
 8005924:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	09db      	lsrs	r3, r3, #7
 8005930:	623b      	str	r3, [r7, #32]
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	2b7f      	cmp	r3, #127	; 0x7f
 8005936:	d8f0      	bhi.n	800591a <_StoreChar+0x5a>
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	627a      	str	r2, [r7, #36]	; 0x24
 800593e:	6a3a      	ldr	r2, [r7, #32]
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
 8005950:	e00b      	b.n	800596a <_StoreChar+0xaa>
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	b2da      	uxtb	r2, r3
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	1c59      	adds	r1, r3, #1
 800595a:	61f9      	str	r1, [r7, #28]
 800595c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	09db      	lsrs	r3, r3, #7
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b7f      	cmp	r3, #127	; 0x7f
 800596e:	d8f0      	bhi.n	8005952 <_StoreChar+0x92>
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	61fa      	str	r2, [r7, #28]
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	701a      	strb	r2, [r3, #0]
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	221a      	movs	r2, #26
 8005986:	6939      	ldr	r1, [r7, #16]
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff fe29 	bl	80055e0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff fd34 	bl	8005400 <_PreparePacket>
 8005998:	4602      	mov	r2, r0
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	611a      	str	r2, [r3, #16]
  }
}
 80059ae:	bf00      	nop
 80059b0:	3728      	adds	r7, #40	; 0x28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08a      	sub	sp, #40	; 0x28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
 80059c4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80059ca:	2301      	movs	r3, #1
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80059ce:	2301      	movs	r3, #1
 80059d0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80059d2:	e007      	b.n	80059e4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80059d4:	6a3a      	ldr	r2, [r7, #32]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059dc:	623b      	str	r3, [r7, #32]
    Width++;
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	3301      	adds	r3, #1
 80059e2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80059e4:	6a3a      	ldr	r2, [r7, #32]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d2f3      	bcs.n	80059d4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d901      	bls.n	80059f8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d11f      	bne.n	8005a42 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01c      	beq.n	8005a42 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <_PrintUnsigned+0x66>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d102      	bne.n	8005a1e <_PrintUnsigned+0x66>
        c = '0';
 8005a18:	2330      	movs	r3, #48	; 0x30
 8005a1a:	76fb      	strb	r3, [r7, #27]
 8005a1c:	e001      	b.n	8005a22 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005a1e:	2320      	movs	r3, #32
 8005a20:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a22:	e007      	b.n	8005a34 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	3b01      	subs	r3, #1
 8005a28:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005a2a:	7efb      	ldrb	r3, [r7, #27]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f7ff ff46 	bl	80058c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <_PrintUnsigned+0x8a>
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d3f0      	bcc.n	8005a24 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d903      	bls.n	8005a50 <_PrintUnsigned+0x98>
      NumDigits--;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	603b      	str	r3, [r7, #0]
 8005a4e:	e009      	b.n	8005a64 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d200      	bcs.n	8005a64 <_PrintUnsigned+0xac>
        break;
 8005a62:	e005      	b.n	8005a70 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	fb02 f303 	mul.w	r3, r2, r3
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005a6e:	e7e8      	b.n	8005a42 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a78:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7e:	fb02 f303 	mul.w	r3, r2, r3
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005a88:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <_PrintUnsigned+0x128>)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	4619      	mov	r1, r3
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7ff ff14 	bl	80058c0 <_StoreChar>
    Digit /= Base;
 8005a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e3      	bne.n	8005a70 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d011      	beq.n	8005ad6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00e      	beq.n	8005ad6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ab8:	e006      	b.n	8005ac8 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	3b01      	subs	r3, #1
 8005abe:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005ac0:	2120      	movs	r1, #32
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff fefc 	bl	80058c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <_PrintUnsigned+0x11e>
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d3f1      	bcc.n	8005aba <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005ad6:	bf00      	nop
 8005ad8:	3728      	adds	r7, #40	; 0x28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	080071ec 	.word	0x080071ec

08005ae4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bfb8      	it	lt
 8005af8:	425b      	neglt	r3, r3
 8005afa:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005afc:	2301      	movs	r3, #1
 8005afe:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005b00:	e007      	b.n	8005b12 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b0a:	613b      	str	r3, [r7, #16]
    Width++;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	daf3      	bge.n	8005b02 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d901      	bls.n	8005b26 <_PrintInt+0x42>
    Width = NumDigits;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <_PrintInt+0x5e>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	db04      	blt.n	8005b3c <_PrintInt+0x58>
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <_PrintInt+0x5e>
    FieldWidth--;
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <_PrintInt+0x6e>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d016      	beq.n	8005b80 <_PrintInt+0x9c>
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d111      	bne.n	8005b80 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00e      	beq.n	8005b80 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b62:	e006      	b.n	8005b72 <_PrintInt+0x8e>
        FieldWidth--;
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005b6a:	2120      	movs	r1, #32
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7ff fea7 	bl	80058c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <_PrintInt+0x9c>
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d3f1      	bcc.n	8005b64 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	da07      	bge.n	8005b96 <_PrintInt+0xb2>
    v = -v;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	425b      	negs	r3, r3
 8005b8a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005b8c:	212d      	movs	r1, #45	; 0x2d
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7ff fe96 	bl	80058c0 <_StoreChar>
 8005b94:	e008      	b.n	8005ba8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005ba0:	212b      	movs	r1, #43	; 0x2b
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7ff fe8c 	bl	80058c0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d019      	beq.n	8005be6 <_PrintInt+0x102>
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d114      	bne.n	8005be6 <_PrintInt+0x102>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d111      	bne.n	8005be6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00e      	beq.n	8005be6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005bc8:	e006      	b.n	8005bd8 <_PrintInt+0xf4>
        FieldWidth--;
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005bd0:	2130      	movs	r1, #48	; 0x30
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f7ff fe74 	bl	80058c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <_PrintInt+0x102>
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d3f1      	bcc.n	8005bca <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	9301      	str	r3, [sp, #4]
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7ff fedf 	bl	80059b8 <_PrintUnsigned>
}
 8005bfa:	bf00      	nop
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b098      	sub	sp, #96	; 0x60
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c10:	f3ef 8311 	mrs	r3, BASEPRI
 8005c14:	f04f 0120 	mov.w	r1, #32
 8005c18:	f381 8811 	msr	BASEPRI, r1
 8005c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c1e:	48b7      	ldr	r0, [pc, #732]	; (8005efc <_VPrintTarget+0x2f8>)
 8005c20:	f7ff fbee 	bl	8005400 <_PreparePacket>
 8005c24:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005c26:	4bb5      	ldr	r3, [pc, #724]	; (8005efc <_VPrintTarget+0x2f8>)
 8005c28:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	3301      	adds	r3, #1
 8005c36:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3301      	adds	r3, #1
 8005c48:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005c4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 81a8 	beq.w	8005fa4 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005c54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c58:	2b25      	cmp	r3, #37	; 0x25
 8005c5a:	f040 8195 	bne.w	8005f88 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005c62:	2301      	movs	r3, #1
 8005c64:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005c6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c72:	3b23      	subs	r3, #35	; 0x23
 8005c74:	2b0d      	cmp	r3, #13
 8005c76:	d83f      	bhi.n	8005cf8 <_VPrintTarget+0xf4>
 8005c78:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <_VPrintTarget+0x7c>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005ce9 	.word	0x08005ce9
 8005c84:	08005cf9 	.word	0x08005cf9
 8005c88:	08005cf9 	.word	0x08005cf9
 8005c8c:	08005cf9 	.word	0x08005cf9
 8005c90:	08005cf9 	.word	0x08005cf9
 8005c94:	08005cf9 	.word	0x08005cf9
 8005c98:	08005cf9 	.word	0x08005cf9
 8005c9c:	08005cf9 	.word	0x08005cf9
 8005ca0:	08005cd9 	.word	0x08005cd9
 8005ca4:	08005cf9 	.word	0x08005cf9
 8005ca8:	08005cb9 	.word	0x08005cb9
 8005cac:	08005cf9 	.word	0x08005cf9
 8005cb0:	08005cf9 	.word	0x08005cf9
 8005cb4:	08005cc9 	.word	0x08005cc9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cba:	f043 0301 	orr.w	r3, r3, #1
 8005cbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	e01a      	b.n	8005cfe <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cca:	f043 0302 	orr.w	r3, r3, #2
 8005cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	e012      	b.n	8005cfe <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cda:	f043 0304 	orr.w	r3, r3, #4
 8005cde:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	e00a      	b.n	8005cfe <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cea:	f043 0308 	orr.w	r3, r3, #8
 8005cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e002      	b.n	8005cfe <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8005cfc:	bf00      	nop
        }
      } while (v);
 8005cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1b0      	bne.n	8005c66 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005d04:	2300      	movs	r3, #0
 8005d06:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005d10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d14:	2b2f      	cmp	r3, #47	; 0x2f
 8005d16:	d912      	bls.n	8005d3e <_VPrintTarget+0x13a>
 8005d18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d1c:	2b39      	cmp	r3, #57	; 0x39
 8005d1e:	d80e      	bhi.n	8005d3e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	461a      	mov	r2, r3
 8005d32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d36:	4413      	add	r3, r2
 8005d38:	3b30      	subs	r3, #48	; 0x30
 8005d3a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005d3c:	e7e4      	b.n	8005d08 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005d4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d4e:	2b2e      	cmp	r3, #46	; 0x2e
 8005d50:	d11d      	bne.n	8005d8e <_VPrintTarget+0x18a>
        sFormat++;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3301      	adds	r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005d60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d64:	2b2f      	cmp	r3, #47	; 0x2f
 8005d66:	d912      	bls.n	8005d8e <_VPrintTarget+0x18a>
 8005d68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d6c:	2b39      	cmp	r3, #57	; 0x39
 8005d6e:	d80e      	bhi.n	8005d8e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3301      	adds	r3, #1
 8005d74:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005d76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	461a      	mov	r2, r3
 8005d82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d86:	4413      	add	r3, r2
 8005d88:	3b30      	subs	r3, #48	; 0x30
 8005d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005d8c:	e7e4      	b.n	8005d58 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005d96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d9a:	2b6c      	cmp	r3, #108	; 0x6c
 8005d9c:	d003      	beq.n	8005da6 <_VPrintTarget+0x1a2>
 8005d9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005da2:	2b68      	cmp	r3, #104	; 0x68
 8005da4:	d107      	bne.n	8005db6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3301      	adds	r3, #1
 8005db2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005db4:	e7ef      	b.n	8005d96 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005db6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dba:	2b25      	cmp	r3, #37	; 0x25
 8005dbc:	f000 80d8 	beq.w	8005f70 <_VPrintTarget+0x36c>
 8005dc0:	2b25      	cmp	r3, #37	; 0x25
 8005dc2:	f2c0 80dc 	blt.w	8005f7e <_VPrintTarget+0x37a>
 8005dc6:	2b78      	cmp	r3, #120	; 0x78
 8005dc8:	f300 80d9 	bgt.w	8005f7e <_VPrintTarget+0x37a>
 8005dcc:	2b58      	cmp	r3, #88	; 0x58
 8005dce:	f2c0 80d6 	blt.w	8005f7e <_VPrintTarget+0x37a>
 8005dd2:	3b58      	subs	r3, #88	; 0x58
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	f200 80d2 	bhi.w	8005f7e <_VPrintTarget+0x37a>
 8005dda:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <_VPrintTarget+0x1dc>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005ed7 	.word	0x08005ed7
 8005de4:	08005f7f 	.word	0x08005f7f
 8005de8:	08005f7f 	.word	0x08005f7f
 8005dec:	08005f7f 	.word	0x08005f7f
 8005df0:	08005f7f 	.word	0x08005f7f
 8005df4:	08005f7f 	.word	0x08005f7f
 8005df8:	08005f7f 	.word	0x08005f7f
 8005dfc:	08005f7f 	.word	0x08005f7f
 8005e00:	08005f7f 	.word	0x08005f7f
 8005e04:	08005f7f 	.word	0x08005f7f
 8005e08:	08005f7f 	.word	0x08005f7f
 8005e0c:	08005e65 	.word	0x08005e65
 8005e10:	08005e8b 	.word	0x08005e8b
 8005e14:	08005f7f 	.word	0x08005f7f
 8005e18:	08005f7f 	.word	0x08005f7f
 8005e1c:	08005f7f 	.word	0x08005f7f
 8005e20:	08005f7f 	.word	0x08005f7f
 8005e24:	08005f7f 	.word	0x08005f7f
 8005e28:	08005f7f 	.word	0x08005f7f
 8005e2c:	08005f7f 	.word	0x08005f7f
 8005e30:	08005f7f 	.word	0x08005f7f
 8005e34:	08005f7f 	.word	0x08005f7f
 8005e38:	08005f7f 	.word	0x08005f7f
 8005e3c:	08005f7f 	.word	0x08005f7f
 8005e40:	08005f4b 	.word	0x08005f4b
 8005e44:	08005f7f 	.word	0x08005f7f
 8005e48:	08005f7f 	.word	0x08005f7f
 8005e4c:	08005f01 	.word	0x08005f01
 8005e50:	08005f7f 	.word	0x08005f7f
 8005e54:	08005eb1 	.word	0x08005eb1
 8005e58:	08005f7f 	.word	0x08005f7f
 8005e5c:	08005f7f 	.word	0x08005f7f
 8005e60:	08005ed7 	.word	0x08005ed7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	1d19      	adds	r1, r3, #4
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6011      	str	r1, [r2, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8005e78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005e7c:	f107 0310 	add.w	r3, r7, #16
 8005e80:	4611      	mov	r1, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7ff fd1c 	bl	80058c0 <_StoreChar>
        break;
 8005e88:	e07a      	b.n	8005f80 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	1d19      	adds	r1, r3, #4
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6011      	str	r1, [r2, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e98:	f107 0010 	add.w	r0, r7, #16
 8005e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e9e:	9301      	str	r3, [sp, #4]
 8005ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea6:	220a      	movs	r2, #10
 8005ea8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005eaa:	f7ff fe1b 	bl	8005ae4 <_PrintInt>
        break;
 8005eae:	e067      	b.n	8005f80 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	1d19      	adds	r1, r3, #4
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6011      	str	r1, [r2, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005ebe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ec0:	f107 0010 	add.w	r0, r7, #16
 8005ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ece:	220a      	movs	r2, #10
 8005ed0:	f7ff fd72 	bl	80059b8 <_PrintUnsigned>
        break;
 8005ed4:	e054      	b.n	8005f80 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	1d19      	adds	r1, r3, #4
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6011      	str	r1, [r2, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005ee4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ee6:	f107 0010 	add.w	r0, r7, #16
 8005eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef4:	2210      	movs	r2, #16
 8005ef6:	f7ff fd5f 	bl	80059b8 <_PrintUnsigned>
        break;
 8005efa:	e041      	b.n	8005f80 <_VPrintTarget+0x37c>
 8005efc:	200143c4 	.word	0x200143c4
      case 's':
        s = va_arg(*pParamList, const char*);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	1d19      	adds	r1, r3, #4
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6011      	str	r1, [r2, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <_VPrintTarget+0x314>
          s = "(null)";
 8005f14:	4b4a      	ldr	r3, [pc, #296]	; (8006040 <_VPrintTarget+0x43c>)
 8005f16:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8005f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f22:	3301      	adds	r3, #1
 8005f24:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005f26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00b      	beq.n	8005f46 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005f2e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005f32:	f107 0310 	add.w	r3, r7, #16
 8005f36:	4611      	mov	r1, r2
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff fcc1 	bl	80058c0 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	2b7f      	cmp	r3, #127	; 0x7f
 8005f42:	d9e9      	bls.n	8005f18 <_VPrintTarget+0x314>
        break;
 8005f44:	e01c      	b.n	8005f80 <_VPrintTarget+0x37c>
            break;
 8005f46:	bf00      	nop
        break;
 8005f48:	e01a      	b.n	8005f80 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	1d19      	adds	r1, r3, #4
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	6011      	str	r1, [r2, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005f58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f5a:	f107 0010 	add.w	r0, r7, #16
 8005f5e:	2300      	movs	r3, #0
 8005f60:	9301      	str	r3, [sp, #4]
 8005f62:	2308      	movs	r3, #8
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	2308      	movs	r3, #8
 8005f68:	2210      	movs	r2, #16
 8005f6a:	f7ff fd25 	bl	80059b8 <_PrintUnsigned>
        break;
 8005f6e:	e007      	b.n	8005f80 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005f70:	f107 0310 	add.w	r3, r7, #16
 8005f74:	2125      	movs	r1, #37	; 0x25
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff fca2 	bl	80058c0 <_StoreChar>
        break;
 8005f7c:	e000      	b.n	8005f80 <_VPrintTarget+0x37c>
      default:
        break;
 8005f7e:	bf00      	nop
      }
      sFormat++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	e007      	b.n	8005f98 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005f88:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005f8c:	f107 0310 	add.w	r3, r7, #16
 8005f90:	4611      	mov	r1, r2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff fc94 	bl	80058c0 <_StoreChar>
    }
  } while (*sFormat);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f47f ae4d 	bne.w	8005c3c <_VPrintTarget+0x38>
 8005fa2:	e000      	b.n	8005fa6 <_VPrintTarget+0x3a2>
      break;
 8005fa4:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d041      	beq.n	8006030 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005fac:	6a3a      	ldr	r2, [r7, #32]
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fbc:	e00b      	b.n	8005fd6 <_VPrintTarget+0x3d2>
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc4:	1c59      	adds	r1, r3, #1
 8005fc6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005fc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd2:	09db      	lsrs	r3, r3, #7
 8005fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8005fda:	d8f0      	bhi.n	8005fbe <_VPrintTarget+0x3ba>
 8005fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]
 8005fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fea:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ff4:	e00b      	b.n	800600e <_VPrintTarget+0x40a>
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffc:	1c59      	adds	r1, r3, #1
 8005ffe:	6379      	str	r1, [r7, #52]	; 0x34
 8006000:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006004:	b2d2      	uxtb	r2, r2
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	09db      	lsrs	r3, r3, #7
 800600c:	633b      	str	r3, [r7, #48]	; 0x30
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	2b7f      	cmp	r3, #127	; 0x7f
 8006012:	d8f0      	bhi.n	8005ff6 <_VPrintTarget+0x3f2>
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	637a      	str	r2, [r7, #52]	; 0x34
 800601a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	6979      	ldr	r1, [r7, #20]
 8006028:	221a      	movs	r2, #26
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff fad8 	bl	80055e0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006032:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006036:	bf00      	nop
 8006038:	3758      	adds	r7, #88	; 0x58
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	08007198 	.word	0x08007198

08006044 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af02      	add	r7, sp, #8
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006052:	2300      	movs	r3, #0
 8006054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006058:	4917      	ldr	r1, [pc, #92]	; (80060b8 <SEGGER_SYSVIEW_Init+0x74>)
 800605a:	4818      	ldr	r0, [pc, #96]	; (80060bc <SEGGER_SYSVIEW_Init+0x78>)
 800605c:	f7ff f8d0 	bl	8005200 <SEGGER_RTT_AllocUpBuffer>
 8006060:	4603      	mov	r3, r0
 8006062:	b2da      	uxtb	r2, r3
 8006064:	4b16      	ldr	r3, [pc, #88]	; (80060c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006066:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006068:	4b15      	ldr	r3, [pc, #84]	; (80060c0 <SEGGER_SYSVIEW_Init+0x7c>)
 800606a:	785a      	ldrb	r2, [r3, #1]
 800606c:	4b14      	ldr	r3, [pc, #80]	; (80060c0 <SEGGER_SYSVIEW_Init+0x7c>)
 800606e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006070:	4b13      	ldr	r3, [pc, #76]	; (80060c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006072:	7e1b      	ldrb	r3, [r3, #24]
 8006074:	4618      	mov	r0, r3
 8006076:	2300      	movs	r3, #0
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	2308      	movs	r3, #8
 800607c:	4a11      	ldr	r2, [pc, #68]	; (80060c4 <SEGGER_SYSVIEW_Init+0x80>)
 800607e:	490f      	ldr	r1, [pc, #60]	; (80060bc <SEGGER_SYSVIEW_Init+0x78>)
 8006080:	f7ff f942 	bl	8005308 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006084:	4b0e      	ldr	r3, [pc, #56]	; (80060c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006086:	2200      	movs	r2, #0
 8006088:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800608a:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <SEGGER_SYSVIEW_Init+0x84>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a0c      	ldr	r2, [pc, #48]	; (80060c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006090:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006092:	4a0b      	ldr	r2, [pc, #44]	; (80060c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006098:	4a09      	ldr	r2, [pc, #36]	; (80060c0 <SEGGER_SYSVIEW_Init+0x7c>)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800609e:	4a08      	ldr	r2, [pc, #32]	; (80060c0 <SEGGER_SYSVIEW_Init+0x7c>)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80060a4:	4a06      	ldr	r2, [pc, #24]	; (80060c0 <SEGGER_SYSVIEW_Init+0x7c>)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80060aa:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <SEGGER_SYSVIEW_Init+0x7c>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80060b0:	bf00      	nop
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	2001338c 	.word	0x2001338c
 80060bc:	080071a0 	.word	0x080071a0
 80060c0:	20014394 	.word	0x20014394
 80060c4:	2001438c 	.word	0x2001438c
 80060c8:	e0001004 	.word	0xe0001004

080060cc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80060d4:	4a04      	ldr	r2, [pc, #16]	; (80060e8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6113      	str	r3, [r2, #16]
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	20014394 	.word	0x20014394

080060ec <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060f4:	f3ef 8311 	mrs	r3, BASEPRI
 80060f8:	f04f 0120 	mov.w	r1, #32
 80060fc:	f381 8811 	msr	BASEPRI, r1
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	4808      	ldr	r0, [pc, #32]	; (8006124 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006104:	f7ff f97c 	bl	8005400 <_PreparePacket>
 8006108:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	68b8      	ldr	r0, [r7, #8]
 8006110:	f7ff fa66 	bl	80055e0 <_SendPacket>
  RECORD_END();
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f383 8811 	msr	BASEPRI, r3
}
 800611a:	bf00      	nop
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	200143c4 	.word	0x200143c4

08006128 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006132:	f3ef 8311 	mrs	r3, BASEPRI
 8006136:	f04f 0120 	mov.w	r1, #32
 800613a:	f381 8811 	msr	BASEPRI, r1
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	4816      	ldr	r0, [pc, #88]	; (800619c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006142:	f7ff f95d 	bl	8005400 <_PreparePacket>
 8006146:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	61fb      	str	r3, [r7, #28]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	61bb      	str	r3, [r7, #24]
 8006154:	e00b      	b.n	800616e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	b2da      	uxtb	r2, r3
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	1c59      	adds	r1, r3, #1
 800615e:	61f9      	str	r1, [r7, #28]
 8006160:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006164:	b2d2      	uxtb	r2, r2
 8006166:	701a      	strb	r2, [r3, #0]
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	09db      	lsrs	r3, r3, #7
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	2b7f      	cmp	r3, #127	; 0x7f
 8006172:	d8f0      	bhi.n	8006156 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	61fa      	str	r2, [r7, #28]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	68f9      	ldr	r1, [r7, #12]
 8006188:	6938      	ldr	r0, [r7, #16]
 800618a:	f7ff fa29 	bl	80055e0 <_SendPacket>
  RECORD_END();
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f383 8811 	msr	BASEPRI, r3
}
 8006194:	bf00      	nop
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	200143c4 	.word	0x200143c4

080061a0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08c      	sub	sp, #48	; 0x30
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80061ac:	f3ef 8311 	mrs	r3, BASEPRI
 80061b0:	f04f 0120 	mov.w	r1, #32
 80061b4:	f381 8811 	msr	BASEPRI, r1
 80061b8:	61fb      	str	r3, [r7, #28]
 80061ba:	4825      	ldr	r0, [pc, #148]	; (8006250 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80061bc:	f7ff f920 	bl	8005400 <_PreparePacket>
 80061c0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ce:	e00b      	b.n	80061e8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	1c59      	adds	r1, r3, #1
 80061d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	09db      	lsrs	r3, r3, #7
 80061e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	2b7f      	cmp	r3, #127	; 0x7f
 80061ec:	d8f0      	bhi.n	80061d0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	627b      	str	r3, [r7, #36]	; 0x24
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	623b      	str	r3, [r7, #32]
 8006206:	e00b      	b.n	8006220 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	b2da      	uxtb	r2, r3
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	1c59      	adds	r1, r3, #1
 8006210:	6279      	str	r1, [r7, #36]	; 0x24
 8006212:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	09db      	lsrs	r3, r3, #7
 800621e:	623b      	str	r3, [r7, #32]
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	2b7f      	cmp	r3, #127	; 0x7f
 8006224:	d8f0      	bhi.n	8006208 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	627a      	str	r2, [r7, #36]	; 0x24
 800622c:	6a3a      	ldr	r2, [r7, #32]
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	6979      	ldr	r1, [r7, #20]
 800623a:	69b8      	ldr	r0, [r7, #24]
 800623c:	f7ff f9d0 	bl	80055e0 <_SendPacket>
  RECORD_END();
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f383 8811 	msr	BASEPRI, r3
}
 8006246:	bf00      	nop
 8006248:	3730      	adds	r7, #48	; 0x30
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	200143c4 	.word	0x200143c4

08006254 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006254:	b580      	push	{r7, lr}
 8006256:	b08e      	sub	sp, #56	; 0x38
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006262:	f3ef 8311 	mrs	r3, BASEPRI
 8006266:	f04f 0120 	mov.w	r1, #32
 800626a:	f381 8811 	msr	BASEPRI, r1
 800626e:	61fb      	str	r3, [r7, #28]
 8006270:	4832      	ldr	r0, [pc, #200]	; (800633c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006272:	f7ff f8c5 	bl	8005400 <_PreparePacket>
 8006276:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	633b      	str	r3, [r7, #48]	; 0x30
 8006284:	e00b      	b.n	800629e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	b2da      	uxtb	r2, r3
 800628a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628c:	1c59      	adds	r1, r3, #1
 800628e:	6379      	str	r1, [r7, #52]	; 0x34
 8006290:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	09db      	lsrs	r3, r3, #7
 800629c:	633b      	str	r3, [r7, #48]	; 0x30
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	2b7f      	cmp	r3, #127	; 0x7f
 80062a2:	d8f0      	bhi.n	8006286 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80062a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	637a      	str	r2, [r7, #52]	; 0x34
 80062aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80062bc:	e00b      	b.n	80062d6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c4:	1c59      	adds	r1, r3, #1
 80062c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	09db      	lsrs	r3, r3, #7
 80062d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	2b7f      	cmp	r3, #127	; 0x7f
 80062da:	d8f0      	bhi.n	80062be <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	623b      	str	r3, [r7, #32]
 80062f4:	e00b      	b.n	800630e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	1c59      	adds	r1, r3, #1
 80062fe:	6279      	str	r1, [r7, #36]	; 0x24
 8006300:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	09db      	lsrs	r3, r3, #7
 800630c:	623b      	str	r3, [r7, #32]
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	2b7f      	cmp	r3, #127	; 0x7f
 8006312:	d8f0      	bhi.n	80062f6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	627a      	str	r2, [r7, #36]	; 0x24
 800631a:	6a3a      	ldr	r2, [r7, #32]
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	6979      	ldr	r1, [r7, #20]
 8006328:	69b8      	ldr	r0, [r7, #24]
 800632a:	f7ff f959 	bl	80055e0 <_SendPacket>
  RECORD_END();
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	f383 8811 	msr	BASEPRI, r3
}
 8006334:	bf00      	nop
 8006336:	3738      	adds	r7, #56	; 0x38
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	200143c4 	.word	0x200143c4

08006340 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006340:	b580      	push	{r7, lr}
 8006342:	b090      	sub	sp, #64	; 0x40
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800634e:	f3ef 8311 	mrs	r3, BASEPRI
 8006352:	f04f 0120 	mov.w	r1, #32
 8006356:	f381 8811 	msr	BASEPRI, r1
 800635a:	61fb      	str	r3, [r7, #28]
 800635c:	4840      	ldr	r0, [pc, #256]	; (8006460 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800635e:	f7ff f84f 	bl	8005400 <_PreparePacket>
 8006362:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006370:	e00b      	b.n	800638a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	b2da      	uxtb	r2, r3
 8006376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006378:	1c59      	adds	r1, r3, #1
 800637a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800637c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	09db      	lsrs	r3, r3, #7
 8006388:	63bb      	str	r3, [r7, #56]	; 0x38
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	2b7f      	cmp	r3, #127	; 0x7f
 800638e:	d8f0      	bhi.n	8006372 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006396:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	637b      	str	r3, [r7, #52]	; 0x34
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	633b      	str	r3, [r7, #48]	; 0x30
 80063a8:	e00b      	b.n	80063c2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b0:	1c59      	adds	r1, r3, #1
 80063b2:	6379      	str	r1, [r7, #52]	; 0x34
 80063b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	09db      	lsrs	r3, r3, #7
 80063c0:	633b      	str	r3, [r7, #48]	; 0x30
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	2b7f      	cmp	r3, #127	; 0x7f
 80063c6:	d8f0      	bhi.n	80063aa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80063c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	637a      	str	r2, [r7, #52]	; 0x34
 80063ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	62bb      	str	r3, [r7, #40]	; 0x28
 80063e0:	e00b      	b.n	80063fa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e8:	1c59      	adds	r1, r3, #1
 80063ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	09db      	lsrs	r3, r3, #7
 80063f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	2b7f      	cmp	r3, #127	; 0x7f
 80063fe:	d8f0      	bhi.n	80063e2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
 8006414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006416:	623b      	str	r3, [r7, #32]
 8006418:	e00b      	b.n	8006432 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	b2da      	uxtb	r2, r3
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	1c59      	adds	r1, r3, #1
 8006422:	6279      	str	r1, [r7, #36]	; 0x24
 8006424:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006428:	b2d2      	uxtb	r2, r2
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	09db      	lsrs	r3, r3, #7
 8006430:	623b      	str	r3, [r7, #32]
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	2b7f      	cmp	r3, #127	; 0x7f
 8006436:	d8f0      	bhi.n	800641a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	627a      	str	r2, [r7, #36]	; 0x24
 800643e:	6a3a      	ldr	r2, [r7, #32]
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	6979      	ldr	r1, [r7, #20]
 800644c:	69b8      	ldr	r0, [r7, #24]
 800644e:	f7ff f8c7 	bl	80055e0 <_SendPacket>
  RECORD_END();
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	f383 8811 	msr	BASEPRI, r3
}
 8006458:	bf00      	nop
 800645a:	3740      	adds	r7, #64	; 0x40
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	200143c4 	.word	0x200143c4

08006464 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006464:	b580      	push	{r7, lr}
 8006466:	b08c      	sub	sp, #48	; 0x30
 8006468:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800646a:	4b59      	ldr	r3, [pc, #356]	; (80065d0 <SEGGER_SYSVIEW_Start+0x16c>)
 800646c:	2201      	movs	r2, #1
 800646e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006470:	f3ef 8311 	mrs	r3, BASEPRI
 8006474:	f04f 0120 	mov.w	r1, #32
 8006478:	f381 8811 	msr	BASEPRI, r1
 800647c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800647e:	4b54      	ldr	r3, [pc, #336]	; (80065d0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006480:	785b      	ldrb	r3, [r3, #1]
 8006482:	220a      	movs	r2, #10
 8006484:	4953      	ldr	r1, [pc, #332]	; (80065d4 <SEGGER_SYSVIEW_Start+0x170>)
 8006486:	4618      	mov	r0, r3
 8006488:	f7f9 fec2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006492:	f7fe fb87 	bl	8004ba4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006496:	200a      	movs	r0, #10
 8006498:	f7ff fe28 	bl	80060ec <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800649c:	f3ef 8311 	mrs	r3, BASEPRI
 80064a0:	f04f 0120 	mov.w	r1, #32
 80064a4:	f381 8811 	msr	BASEPRI, r1
 80064a8:	60bb      	str	r3, [r7, #8]
 80064aa:	484b      	ldr	r0, [pc, #300]	; (80065d8 <SEGGER_SYSVIEW_Start+0x174>)
 80064ac:	f7fe ffa8 	bl	8005400 <_PreparePacket>
 80064b0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ba:	4b45      	ldr	r3, [pc, #276]	; (80065d0 <SEGGER_SYSVIEW_Start+0x16c>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	62bb      	str	r3, [r7, #40]	; 0x28
 80064c0:	e00b      	b.n	80064da <SEGGER_SYSVIEW_Start+0x76>
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	1c59      	adds	r1, r3, #1
 80064ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	09db      	lsrs	r3, r3, #7
 80064d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	2b7f      	cmp	r3, #127	; 0x7f
 80064de:	d8f0      	bhi.n	80064c2 <SEGGER_SYSVIEW_Start+0x5e>
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
 80064f4:	4b36      	ldr	r3, [pc, #216]	; (80065d0 <SEGGER_SYSVIEW_Start+0x16c>)
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	623b      	str	r3, [r7, #32]
 80064fa:	e00b      	b.n	8006514 <SEGGER_SYSVIEW_Start+0xb0>
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	1c59      	adds	r1, r3, #1
 8006504:	6279      	str	r1, [r7, #36]	; 0x24
 8006506:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	09db      	lsrs	r3, r3, #7
 8006512:	623b      	str	r3, [r7, #32]
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	2b7f      	cmp	r3, #127	; 0x7f
 8006518:	d8f0      	bhi.n	80064fc <SEGGER_SYSVIEW_Start+0x98>
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	627a      	str	r2, [r7, #36]	; 0x24
 8006520:	6a3a      	ldr	r2, [r7, #32]
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	4b28      	ldr	r3, [pc, #160]	; (80065d0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	e00b      	b.n	800654e <SEGGER_SYSVIEW_Start+0xea>
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	b2da      	uxtb	r2, r3
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	1c59      	adds	r1, r3, #1
 800653e:	61f9      	str	r1, [r7, #28]
 8006540:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	701a      	strb	r2, [r3, #0]
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	09db      	lsrs	r3, r3, #7
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2b7f      	cmp	r3, #127	; 0x7f
 8006552:	d8f0      	bhi.n	8006536 <SEGGER_SYSVIEW_Start+0xd2>
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	61fa      	str	r2, [r7, #28]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	2300      	movs	r3, #0
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	e00b      	b.n	8006586 <SEGGER_SYSVIEW_Start+0x122>
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	b2da      	uxtb	r2, r3
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	1c59      	adds	r1, r3, #1
 8006576:	6179      	str	r1, [r7, #20]
 8006578:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	09db      	lsrs	r3, r3, #7
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b7f      	cmp	r3, #127	; 0x7f
 800658a:	d8f0      	bhi.n	800656e <SEGGER_SYSVIEW_Start+0x10a>
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	617a      	str	r2, [r7, #20]
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800659c:	2218      	movs	r2, #24
 800659e:	6839      	ldr	r1, [r7, #0]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff f81d 	bl	80055e0 <_SendPacket>
      RECORD_END();
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065ac:	4b08      	ldr	r3, [pc, #32]	; (80065d0 <SEGGER_SYSVIEW_Start+0x16c>)
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80065b4:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <SEGGER_SYSVIEW_Start+0x16c>)
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80065ba:	f000 f9eb 	bl	8006994 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80065be:	f000 f9b1 	bl	8006924 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80065c2:	f000 fc2d 	bl	8006e20 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80065c6:	bf00      	nop
 80065c8:	3730      	adds	r7, #48	; 0x30
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20014394 	.word	0x20014394
 80065d4:	080071e0 	.word	0x080071e0
 80065d8:	200143c4 	.word	0x200143c4

080065dc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065e2:	f3ef 8311 	mrs	r3, BASEPRI
 80065e6:	f04f 0120 	mov.w	r1, #32
 80065ea:	f381 8811 	msr	BASEPRI, r1
 80065ee:	607b      	str	r3, [r7, #4]
 80065f0:	480b      	ldr	r0, [pc, #44]	; (8006620 <SEGGER_SYSVIEW_Stop+0x44>)
 80065f2:	f7fe ff05 	bl	8005400 <_PreparePacket>
 80065f6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80065f8:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <SEGGER_SYSVIEW_Stop+0x48>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d007      	beq.n	8006610 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006600:	220b      	movs	r2, #11
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6838      	ldr	r0, [r7, #0]
 8006606:	f7fe ffeb 	bl	80055e0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800660a:	4b06      	ldr	r3, [pc, #24]	; (8006624 <SEGGER_SYSVIEW_Stop+0x48>)
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f383 8811 	msr	BASEPRI, r3
}
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	200143c4 	.word	0x200143c4
 8006624:	20014394 	.word	0x20014394

08006628 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006628:	b580      	push	{r7, lr}
 800662a:	b08c      	sub	sp, #48	; 0x30
 800662c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800662e:	f3ef 8311 	mrs	r3, BASEPRI
 8006632:	f04f 0120 	mov.w	r1, #32
 8006636:	f381 8811 	msr	BASEPRI, r1
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	4845      	ldr	r0, [pc, #276]	; (8006754 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800663e:	f7fe fedf 	bl	8005400 <_PreparePacket>
 8006642:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800664c:	4b42      	ldr	r3, [pc, #264]	; (8006758 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
 8006652:	e00b      	b.n	800666c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	b2da      	uxtb	r2, r3
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	1c59      	adds	r1, r3, #1
 800665c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800665e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	09db      	lsrs	r3, r3, #7
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	2b7f      	cmp	r3, #127	; 0x7f
 8006670:	d8f0      	bhi.n	8006654 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006680:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
 8006686:	4b34      	ldr	r3, [pc, #208]	; (8006758 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	623b      	str	r3, [r7, #32]
 800668c:	e00b      	b.n	80066a6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	b2da      	uxtb	r2, r3
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	1c59      	adds	r1, r3, #1
 8006696:	6279      	str	r1, [r7, #36]	; 0x24
 8006698:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	09db      	lsrs	r3, r3, #7
 80066a4:	623b      	str	r3, [r7, #32]
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	2b7f      	cmp	r3, #127	; 0x7f
 80066aa:	d8f0      	bhi.n	800668e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	627a      	str	r2, [r7, #36]	; 0x24
 80066b2:	6a3a      	ldr	r2, [r7, #32]
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	4b25      	ldr	r3, [pc, #148]	; (8006758 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	e00b      	b.n	80066e0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	1c59      	adds	r1, r3, #1
 80066d0:	61f9      	str	r1, [r7, #28]
 80066d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	09db      	lsrs	r3, r3, #7
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	2b7f      	cmp	r3, #127	; 0x7f
 80066e4:	d8f0      	bhi.n	80066c8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	61fa      	str	r2, [r7, #28]
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	2300      	movs	r3, #0
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	e00b      	b.n	8006718 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	b2da      	uxtb	r2, r3
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	1c59      	adds	r1, r3, #1
 8006708:	6179      	str	r1, [r7, #20]
 800670a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	701a      	strb	r2, [r3, #0]
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	09db      	lsrs	r3, r3, #7
 8006716:	613b      	str	r3, [r7, #16]
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	2b7f      	cmp	r3, #127	; 0x7f
 800671c:	d8f0      	bhi.n	8006700 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	617a      	str	r2, [r7, #20]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800672e:	2218      	movs	r2, #24
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	68b8      	ldr	r0, [r7, #8]
 8006734:	f7fe ff54 	bl	80055e0 <_SendPacket>
  RECORD_END();
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800673e:	4b06      	ldr	r3, [pc, #24]	; (8006758 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006746:	4b04      	ldr	r3, [pc, #16]	; (8006758 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	4798      	blx	r3
  }
}
 800674c:	bf00      	nop
 800674e:	3730      	adds	r7, #48	; 0x30
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	200143c4 	.word	0x200143c4
 8006758:	20014394 	.word	0x20014394

0800675c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800675c:	b580      	push	{r7, lr}
 800675e:	b092      	sub	sp, #72	; 0x48
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006764:	f3ef 8311 	mrs	r3, BASEPRI
 8006768:	f04f 0120 	mov.w	r1, #32
 800676c:	f381 8811 	msr	BASEPRI, r1
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	486a      	ldr	r0, [pc, #424]	; (800691c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006774:	f7fe fe44 	bl	8005400 <_PreparePacket>
 8006778:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	647b      	str	r3, [r7, #68]	; 0x44
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4b66      	ldr	r3, [pc, #408]	; (8006920 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	643b      	str	r3, [r7, #64]	; 0x40
 800678e:	e00b      	b.n	80067a8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006792:	b2da      	uxtb	r2, r3
 8006794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006796:	1c59      	adds	r1, r3, #1
 8006798:	6479      	str	r1, [r7, #68]	; 0x44
 800679a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a4:	09db      	lsrs	r3, r3, #7
 80067a6:	643b      	str	r3, [r7, #64]	; 0x40
 80067a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067aa:	2b7f      	cmp	r3, #127	; 0x7f
 80067ac:	d8f0      	bhi.n	8006790 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80067ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	647a      	str	r2, [r7, #68]	; 0x44
 80067b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80067c8:	e00b      	b.n	80067e2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80067ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d0:	1c59      	adds	r1, r3, #1
 80067d2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80067d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067de:	09db      	lsrs	r3, r3, #7
 80067e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80067e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e4:	2b7f      	cmp	r3, #127	; 0x7f
 80067e6:	d8f0      	bhi.n	80067ca <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80067e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80067ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	701a      	strb	r2, [r3, #0]
 80067f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	4619      	mov	r1, r3
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f7fe fdcd 	bl	80053a0 <_EncodeStr>
 8006806:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006808:	2209      	movs	r2, #9
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	6938      	ldr	r0, [r7, #16]
 800680e:	f7fe fee7 	bl	80055e0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	637b      	str	r3, [r7, #52]	; 0x34
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	4b40      	ldr	r3, [pc, #256]	; (8006920 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	633b      	str	r3, [r7, #48]	; 0x30
 8006826:	e00b      	b.n	8006840 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	b2da      	uxtb	r2, r3
 800682c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682e:	1c59      	adds	r1, r3, #1
 8006830:	6379      	str	r1, [r7, #52]	; 0x34
 8006832:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	09db      	lsrs	r3, r3, #7
 800683e:	633b      	str	r3, [r7, #48]	; 0x30
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	2b7f      	cmp	r3, #127	; 0x7f
 8006844:	d8f0      	bhi.n	8006828 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	637a      	str	r2, [r7, #52]	; 0x34
 800684c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006854:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006860:	e00b      	b.n	800687a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	b2da      	uxtb	r2, r3
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	1c59      	adds	r1, r3, #1
 800686a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800686c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	09db      	lsrs	r3, r3, #7
 8006878:	62bb      	str	r3, [r7, #40]	; 0x28
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	2b7f      	cmp	r3, #127	; 0x7f
 800687e:	d8f0      	bhi.n	8006862 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	623b      	str	r3, [r7, #32]
 800689a:	e00b      	b.n	80068b4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	1c59      	adds	r1, r3, #1
 80068a4:	6279      	str	r1, [r7, #36]	; 0x24
 80068a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	09db      	lsrs	r3, r3, #7
 80068b2:	623b      	str	r3, [r7, #32]
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	2b7f      	cmp	r3, #127	; 0x7f
 80068b8:	d8f0      	bhi.n	800689c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	627a      	str	r2, [r7, #36]	; 0x24
 80068c0:	6a3a      	ldr	r2, [r7, #32]
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	61fb      	str	r3, [r7, #28]
 80068ce:	2300      	movs	r3, #0
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	e00b      	b.n	80068ec <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	1c59      	adds	r1, r3, #1
 80068dc:	61f9      	str	r1, [r7, #28]
 80068de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	09db      	lsrs	r3, r3, #7
 80068ea:	61bb      	str	r3, [r7, #24]
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	2b7f      	cmp	r3, #127	; 0x7f
 80068f0:	d8f0      	bhi.n	80068d4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	61fa      	str	r2, [r7, #28]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006902:	2215      	movs	r2, #21
 8006904:	68f9      	ldr	r1, [r7, #12]
 8006906:	6938      	ldr	r0, [r7, #16]
 8006908:	f7fe fe6a 	bl	80055e0 <_SendPacket>
  RECORD_END();
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f383 8811 	msr	BASEPRI, r3
}
 8006912:	bf00      	nop
 8006914:	3748      	adds	r7, #72	; 0x48
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	200143c4 	.word	0x200143c4
 8006920:	20014394 	.word	0x20014394

08006924 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006928:	4b07      	ldr	r3, [pc, #28]	; (8006948 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006930:	4b05      	ldr	r3, [pc, #20]	; (8006948 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800693a:	4b03      	ldr	r3, [pc, #12]	; (8006948 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	4798      	blx	r3
  }
}
 8006942:	bf00      	nop
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20014394 	.word	0x20014394

0800694c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006954:	f3ef 8311 	mrs	r3, BASEPRI
 8006958:	f04f 0120 	mov.w	r1, #32
 800695c:	f381 8811 	msr	BASEPRI, r1
 8006960:	617b      	str	r3, [r7, #20]
 8006962:	480b      	ldr	r0, [pc, #44]	; (8006990 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006964:	f7fe fd4c 	bl	8005400 <_PreparePacket>
 8006968:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800696a:	2280      	movs	r2, #128	; 0x80
 800696c:	6879      	ldr	r1, [r7, #4]
 800696e:	6938      	ldr	r0, [r7, #16]
 8006970:	f7fe fd16 	bl	80053a0 <_EncodeStr>
 8006974:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006976:	220e      	movs	r2, #14
 8006978:	68f9      	ldr	r1, [r7, #12]
 800697a:	6938      	ldr	r0, [r7, #16]
 800697c:	f7fe fe30 	bl	80055e0 <_SendPacket>
  RECORD_END();
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f383 8811 	msr	BASEPRI, r3
}
 8006986:	bf00      	nop
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	200143c4 	.word	0x200143c4

08006994 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800699a:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d01a      	beq.n	80069d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80069a2:	4b13      	ldr	r3, [pc, #76]	; (80069f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d015      	beq.n	80069d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80069ac:	4b10      	ldr	r3, [pc, #64]	; (80069f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4798      	blx	r3
 80069b4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80069b8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80069ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	f04f 0300 	mov.w	r3, #0
 80069c6:	000a      	movs	r2, r1
 80069c8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80069ca:	4613      	mov	r3, r2
 80069cc:	461a      	mov	r2, r3
 80069ce:	4621      	mov	r1, r4
 80069d0:	200d      	movs	r0, #13
 80069d2:	f7ff fbe5 	bl	80061a0 <SEGGER_SYSVIEW_RecordU32x2>
 80069d6:	e006      	b.n	80069e6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80069d8:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4619      	mov	r1, r3
 80069de:	200c      	movs	r0, #12
 80069e0:	f7ff fba2 	bl	8006128 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd90      	pop	{r4, r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20014394 	.word	0x20014394
 80069f4:	e0001004 	.word	0xe0001004

080069f8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006a02:	f04f 0120 	mov.w	r1, #32
 8006a06:	f381 8811 	msr	BASEPRI, r1
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	4819      	ldr	r0, [pc, #100]	; (8006a74 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006a0e:	f7fe fcf7 	bl	8005400 <_PreparePacket>
 8006a12:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006a18:	4b17      	ldr	r3, [pc, #92]	; (8006a78 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a20:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	613b      	str	r3, [r7, #16]
 8006a2a:	e00b      	b.n	8006a44 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	1c59      	adds	r1, r3, #1
 8006a34:	6179      	str	r1, [r7, #20]
 8006a36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	701a      	strb	r2, [r3, #0]
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	09db      	lsrs	r3, r3, #7
 8006a42:	613b      	str	r3, [r7, #16]
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	2b7f      	cmp	r3, #127	; 0x7f
 8006a48:	d8f0      	bhi.n	8006a2c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	617a      	str	r2, [r7, #20]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	b2d2      	uxtb	r2, r2
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	68b8      	ldr	r0, [r7, #8]
 8006a60:	f7fe fdbe 	bl	80055e0 <_SendPacket>
  RECORD_END();
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f383 8811 	msr	BASEPRI, r3
}
 8006a6a:	bf00      	nop
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	200143c4 	.word	0x200143c4
 8006a78:	e000ed04 	.word	0xe000ed04

08006a7c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a82:	f3ef 8311 	mrs	r3, BASEPRI
 8006a86:	f04f 0120 	mov.w	r1, #32
 8006a8a:	f381 8811 	msr	BASEPRI, r1
 8006a8e:	607b      	str	r3, [r7, #4]
 8006a90:	4807      	ldr	r0, [pc, #28]	; (8006ab0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006a92:	f7fe fcb5 	bl	8005400 <_PreparePacket>
 8006a96:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006a98:	2203      	movs	r2, #3
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6838      	ldr	r0, [r7, #0]
 8006a9e:	f7fe fd9f 	bl	80055e0 <_SendPacket>
  RECORD_END();
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f383 8811 	msr	BASEPRI, r3
}
 8006aa8:	bf00      	nop
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	200143c4 	.word	0x200143c4

08006ab4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006aba:	f3ef 8311 	mrs	r3, BASEPRI
 8006abe:	f04f 0120 	mov.w	r1, #32
 8006ac2:	f381 8811 	msr	BASEPRI, r1
 8006ac6:	607b      	str	r3, [r7, #4]
 8006ac8:	4807      	ldr	r0, [pc, #28]	; (8006ae8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006aca:	f7fe fc99 	bl	8005400 <_PreparePacket>
 8006ace:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006ad0:	2212      	movs	r2, #18
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6838      	ldr	r0, [r7, #0]
 8006ad6:	f7fe fd83 	bl	80055e0 <_SendPacket>
  RECORD_END();
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f383 8811 	msr	BASEPRI, r3
}
 8006ae0:	bf00      	nop
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	200143c4 	.word	0x200143c4

08006aec <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006af2:	f3ef 8311 	mrs	r3, BASEPRI
 8006af6:	f04f 0120 	mov.w	r1, #32
 8006afa:	f381 8811 	msr	BASEPRI, r1
 8006afe:	607b      	str	r3, [r7, #4]
 8006b00:	4807      	ldr	r0, [pc, #28]	; (8006b20 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006b02:	f7fe fc7d 	bl	8005400 <_PreparePacket>
 8006b06:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006b08:	2211      	movs	r2, #17
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6838      	ldr	r0, [r7, #0]
 8006b0e:	f7fe fd67 	bl	80055e0 <_SendPacket>
  RECORD_END();
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f383 8811 	msr	BASEPRI, r3
}
 8006b18:	bf00      	nop
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	200143c4 	.word	0x200143c4

08006b24 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b2c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b30:	f04f 0120 	mov.w	r1, #32
 8006b34:	f381 8811 	msr	BASEPRI, r1
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	4819      	ldr	r0, [pc, #100]	; (8006ba0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006b3c:	f7fe fc60 	bl	8005400 <_PreparePacket>
 8006b40:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b46:	4b17      	ldr	r3, [pc, #92]	; (8006ba4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	e00b      	b.n	8006b72 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	1c59      	adds	r1, r3, #1
 8006b62:	61f9      	str	r1, [r7, #28]
 8006b64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b68:	b2d2      	uxtb	r2, r2
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	09db      	lsrs	r3, r3, #7
 8006b70:	61bb      	str	r3, [r7, #24]
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	2b7f      	cmp	r3, #127	; 0x7f
 8006b76:	d8f0      	bhi.n	8006b5a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	61fa      	str	r2, [r7, #28]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	b2d2      	uxtb	r2, r2
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006b88:	2208      	movs	r2, #8
 8006b8a:	68f9      	ldr	r1, [r7, #12]
 8006b8c:	6938      	ldr	r0, [r7, #16]
 8006b8e:	f7fe fd27 	bl	80055e0 <_SendPacket>
  RECORD_END();
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f383 8811 	msr	BASEPRI, r3
}
 8006b98:	bf00      	nop
 8006b9a:	3720      	adds	r7, #32
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	200143c4 	.word	0x200143c4
 8006ba4:	20014394 	.word	0x20014394

08006ba8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bb0:	f3ef 8311 	mrs	r3, BASEPRI
 8006bb4:	f04f 0120 	mov.w	r1, #32
 8006bb8:	f381 8811 	msr	BASEPRI, r1
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	4819      	ldr	r0, [pc, #100]	; (8006c24 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006bc0:	f7fe fc1e 	bl	8005400 <_PreparePacket>
 8006bc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bca:	4b17      	ldr	r3, [pc, #92]	; (8006c28 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	61fb      	str	r3, [r7, #28]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	61bb      	str	r3, [r7, #24]
 8006bdc:	e00b      	b.n	8006bf6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	1c59      	adds	r1, r3, #1
 8006be6:	61f9      	str	r1, [r7, #28]
 8006be8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	701a      	strb	r2, [r3, #0]
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	09db      	lsrs	r3, r3, #7
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	2b7f      	cmp	r3, #127	; 0x7f
 8006bfa:	d8f0      	bhi.n	8006bde <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	61fa      	str	r2, [r7, #28]
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	701a      	strb	r2, [r3, #0]
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006c0c:	2204      	movs	r2, #4
 8006c0e:	68f9      	ldr	r1, [r7, #12]
 8006c10:	6938      	ldr	r0, [r7, #16]
 8006c12:	f7fe fce5 	bl	80055e0 <_SendPacket>
  RECORD_END();
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f383 8811 	msr	BASEPRI, r3
}
 8006c1c:	bf00      	nop
 8006c1e:	3720      	adds	r7, #32
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	200143c4 	.word	0x200143c4
 8006c28:	20014394 	.word	0x20014394

08006c2c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c34:	f3ef 8311 	mrs	r3, BASEPRI
 8006c38:	f04f 0120 	mov.w	r1, #32
 8006c3c:	f381 8811 	msr	BASEPRI, r1
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	4819      	ldr	r0, [pc, #100]	; (8006ca8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006c44:	f7fe fbdc 	bl	8005400 <_PreparePacket>
 8006c48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c4e:	4b17      	ldr	r3, [pc, #92]	; (8006cac <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	61bb      	str	r3, [r7, #24]
 8006c60:	e00b      	b.n	8006c7a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	1c59      	adds	r1, r3, #1
 8006c6a:	61f9      	str	r1, [r7, #28]
 8006c6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c70:	b2d2      	uxtb	r2, r2
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	09db      	lsrs	r3, r3, #7
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c7e:	d8f0      	bhi.n	8006c62 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	61fa      	str	r2, [r7, #28]
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	701a      	strb	r2, [r3, #0]
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006c90:	2206      	movs	r2, #6
 8006c92:	68f9      	ldr	r1, [r7, #12]
 8006c94:	6938      	ldr	r0, [r7, #16]
 8006c96:	f7fe fca3 	bl	80055e0 <_SendPacket>
  RECORD_END();
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f383 8811 	msr	BASEPRI, r3
}
 8006ca0:	bf00      	nop
 8006ca2:	3720      	adds	r7, #32
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	200143c4 	.word	0x200143c4
 8006cac:	20014394 	.word	0x20014394

08006cb0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006cb8:	4b04      	ldr	r3, [pc, #16]	; (8006ccc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	1ad3      	subs	r3, r2, r3
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	20014394 	.word	0x20014394

08006cd0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08c      	sub	sp, #48	; 0x30
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006cda:	4b40      	ldr	r3, [pc, #256]	; (8006ddc <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d077      	beq.n	8006dd2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006ce2:	4b3e      	ldr	r3, [pc, #248]	; (8006ddc <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006ce8:	2300      	movs	r3, #0
 8006cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cec:	e008      	b.n	8006d00 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d007      	beq.n	8006d0a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d3f2      	bcc.n	8006cee <SEGGER_SYSVIEW_SendModule+0x1e>
 8006d08:	e000      	b.n	8006d0c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006d0a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d055      	beq.n	8006dbe <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d12:	f3ef 8311 	mrs	r3, BASEPRI
 8006d16:	f04f 0120 	mov.w	r1, #32
 8006d1a:	f381 8811 	msr	BASEPRI, r1
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	482f      	ldr	r0, [pc, #188]	; (8006de0 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006d22:	f7fe fb6d 	bl	8005400 <_PreparePacket>
 8006d26:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d30:	79fb      	ldrb	r3, [r7, #7]
 8006d32:	623b      	str	r3, [r7, #32]
 8006d34:	e00b      	b.n	8006d4e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	1c59      	adds	r1, r3, #1
 8006d3e:	6279      	str	r1, [r7, #36]	; 0x24
 8006d40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	701a      	strb	r2, [r3, #0]
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	09db      	lsrs	r3, r3, #7
 8006d4c:	623b      	str	r3, [r7, #32]
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	2b7f      	cmp	r3, #127	; 0x7f
 8006d52:	d8f0      	bhi.n	8006d36 <SEGGER_SYSVIEW_SendModule+0x66>
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	627a      	str	r2, [r7, #36]	; 0x24
 8006d5a:	6a3a      	ldr	r2, [r7, #32]
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	701a      	strb	r2, [r3, #0]
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	61fb      	str	r3, [r7, #28]
 8006d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	61bb      	str	r3, [r7, #24]
 8006d6e:	e00b      	b.n	8006d88 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	1c59      	adds	r1, r3, #1
 8006d78:	61f9      	str	r1, [r7, #28]
 8006d7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	09db      	lsrs	r3, r3, #7
 8006d86:	61bb      	str	r3, [r7, #24]
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d8c:	d8f0      	bhi.n	8006d70 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	61fa      	str	r2, [r7, #28]
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	701a      	strb	r2, [r3, #0]
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2280      	movs	r2, #128	; 0x80
 8006da4:	4619      	mov	r1, r3
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f7fe fafa 	bl	80053a0 <_EncodeStr>
 8006dac:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006dae:	2216      	movs	r2, #22
 8006db0:	68f9      	ldr	r1, [r7, #12]
 8006db2:	6938      	ldr	r0, [r7, #16]
 8006db4:	f7fe fc14 	bl	80055e0 <_SendPacket>
      RECORD_END();
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d006      	beq.n	8006dd2 <SEGGER_SYSVIEW_SendModule+0x102>
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	4798      	blx	r3
    }
  }
}
 8006dd2:	bf00      	nop
 8006dd4:	3730      	adds	r7, #48	; 0x30
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	200143bc 	.word	0x200143bc
 8006de0:	200143c4 	.word	0x200143c4

08006de4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006dea:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00f      	beq.n	8006e12 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006df2:	4b0a      	ldr	r3, [pc, #40]	; (8006e1c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f2      	bne.n	8006df8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006e12:	bf00      	nop
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	200143bc 	.word	0x200143bc

08006e20 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006e26:	f3ef 8311 	mrs	r3, BASEPRI
 8006e2a:	f04f 0120 	mov.w	r1, #32
 8006e2e:	f381 8811 	msr	BASEPRI, r1
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	4817      	ldr	r0, [pc, #92]	; (8006e94 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006e36:	f7fe fae3 	bl	8005400 <_PreparePacket>
 8006e3a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	617b      	str	r3, [r7, #20]
 8006e44:	4b14      	ldr	r3, [pc, #80]	; (8006e98 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	e00b      	b.n	8006e64 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	1c59      	adds	r1, r3, #1
 8006e54:	6179      	str	r1, [r7, #20]
 8006e56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	09db      	lsrs	r3, r3, #7
 8006e62:	613b      	str	r3, [r7, #16]
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	2b7f      	cmp	r3, #127	; 0x7f
 8006e68:	d8f0      	bhi.n	8006e4c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	617a      	str	r2, [r7, #20]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006e7a:	221b      	movs	r2, #27
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	68b8      	ldr	r0, [r7, #8]
 8006e80:	f7fe fbae 	bl	80055e0 <_SendPacket>
  RECORD_END();
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f383 8811 	msr	BASEPRI, r3
}
 8006e8a:	bf00      	nop
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	200143c4 	.word	0x200143c4
 8006e98:	200143c0 	.word	0x200143c0

08006e9c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006e9c:	b40f      	push	{r0, r1, r2, r3}
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b082      	sub	sp, #8
 8006ea2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006ea4:	f107 0314 	add.w	r3, r7, #20
 8006ea8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006eaa:	1d3b      	adds	r3, r7, #4
 8006eac:	461a      	mov	r2, r3
 8006eae:	2100      	movs	r1, #0
 8006eb0:	6938      	ldr	r0, [r7, #16]
 8006eb2:	f7fe fea7 	bl	8005c04 <_VPrintTarget>
  va_end(ParamList);
}
 8006eb6:	bf00      	nop
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ec0:	b004      	add	sp, #16
 8006ec2:	4770      	bx	lr

08006ec4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	; 0x28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ecc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ed0:	f04f 0120 	mov.w	r1, #32
 8006ed4:	f381 8811 	msr	BASEPRI, r1
 8006ed8:	617b      	str	r3, [r7, #20]
 8006eda:	4827      	ldr	r0, [pc, #156]	; (8006f78 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006edc:	f7fe fa90 	bl	8005400 <_PreparePacket>
 8006ee0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ee2:	2280      	movs	r2, #128	; 0x80
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	6938      	ldr	r0, [r7, #16]
 8006ee8:	f7fe fa5a 	bl	80053a0 <_EncodeStr>
 8006eec:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	623b      	str	r3, [r7, #32]
 8006ef6:	e00b      	b.n	8006f10 <SEGGER_SYSVIEW_Warn+0x4c>
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	1c59      	adds	r1, r3, #1
 8006f00:	6279      	str	r1, [r7, #36]	; 0x24
 8006f02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	09db      	lsrs	r3, r3, #7
 8006f0e:	623b      	str	r3, [r7, #32]
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	2b7f      	cmp	r3, #127	; 0x7f
 8006f14:	d8f0      	bhi.n	8006ef8 <SEGGER_SYSVIEW_Warn+0x34>
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	627a      	str	r2, [r7, #36]	; 0x24
 8006f1c:	6a3a      	ldr	r2, [r7, #32]
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	61fb      	str	r3, [r7, #28]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61bb      	str	r3, [r7, #24]
 8006f2e:	e00b      	b.n	8006f48 <SEGGER_SYSVIEW_Warn+0x84>
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	1c59      	adds	r1, r3, #1
 8006f38:	61f9      	str	r1, [r7, #28]
 8006f3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	09db      	lsrs	r3, r3, #7
 8006f46:	61bb      	str	r3, [r7, #24]
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f4c:	d8f0      	bhi.n	8006f30 <SEGGER_SYSVIEW_Warn+0x6c>
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	61fa      	str	r2, [r7, #28]
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006f5e:	221a      	movs	r2, #26
 8006f60:	68f9      	ldr	r1, [r7, #12]
 8006f62:	6938      	ldr	r0, [r7, #16]
 8006f64:	f7fe fb3c 	bl	80055e0 <_SendPacket>
  RECORD_END();
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f383 8811 	msr	BASEPRI, r3
}
 8006f6e:	bf00      	nop
 8006f70:	3728      	adds	r7, #40	; 0x28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	200143c4 	.word	0x200143c4

08006f7c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006f80:	4b13      	ldr	r3, [pc, #76]	; (8006fd0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f82:	7e1b      	ldrb	r3, [r3, #24]
 8006f84:	4619      	mov	r1, r3
 8006f86:	4a13      	ldr	r2, [pc, #76]	; (8006fd4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006f88:	460b      	mov	r3, r1
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	440b      	add	r3, r1
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	4413      	add	r3, r2
 8006f92:	336c      	adds	r3, #108	; 0x6c
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	4b0e      	ldr	r3, [pc, #56]	; (8006fd0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f98:	7e1b      	ldrb	r3, [r3, #24]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	490d      	ldr	r1, [pc, #52]	; (8006fd4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	4403      	add	r3, r0
 8006fa4:	00db      	lsls	r3, r3, #3
 8006fa6:	440b      	add	r3, r1
 8006fa8:	3370      	adds	r3, #112	; 0x70
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d00b      	beq.n	8006fc8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006fb2:	789b      	ldrb	r3, [r3, #2]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d107      	bne.n	8006fc8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006fb8:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006fba:	2201      	movs	r2, #1
 8006fbc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006fbe:	f7fe fa2b 	bl	8005418 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006fc2:	4b03      	ldr	r3, [pc, #12]	; (8006fd0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006fc8:	4b01      	ldr	r3, [pc, #4]	; (8006fd0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20014394 	.word	0x20014394
 8006fd4:	20012ed4 	.word	0x20012ed4

08006fd8 <__libc_init_array>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	4d0d      	ldr	r5, [pc, #52]	; (8007010 <__libc_init_array+0x38>)
 8006fdc:	4c0d      	ldr	r4, [pc, #52]	; (8007014 <__libc_init_array+0x3c>)
 8006fde:	1b64      	subs	r4, r4, r5
 8006fe0:	10a4      	asrs	r4, r4, #2
 8006fe2:	2600      	movs	r6, #0
 8006fe4:	42a6      	cmp	r6, r4
 8006fe6:	d109      	bne.n	8006ffc <__libc_init_array+0x24>
 8006fe8:	4d0b      	ldr	r5, [pc, #44]	; (8007018 <__libc_init_array+0x40>)
 8006fea:	4c0c      	ldr	r4, [pc, #48]	; (800701c <__libc_init_array+0x44>)
 8006fec:	f000 f83e 	bl	800706c <_init>
 8006ff0:	1b64      	subs	r4, r4, r5
 8006ff2:	10a4      	asrs	r4, r4, #2
 8006ff4:	2600      	movs	r6, #0
 8006ff6:	42a6      	cmp	r6, r4
 8006ff8:	d105      	bne.n	8007006 <__libc_init_array+0x2e>
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}
 8006ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007000:	4798      	blx	r3
 8007002:	3601      	adds	r6, #1
 8007004:	e7ee      	b.n	8006fe4 <__libc_init_array+0xc>
 8007006:	f855 3b04 	ldr.w	r3, [r5], #4
 800700a:	4798      	blx	r3
 800700c:	3601      	adds	r6, #1
 800700e:	e7f2      	b.n	8006ff6 <__libc_init_array+0x1e>
 8007010:	08007204 	.word	0x08007204
 8007014:	08007204 	.word	0x08007204
 8007018:	08007204 	.word	0x08007204
 800701c:	08007208 	.word	0x08007208

08007020 <memcmp>:
 8007020:	b510      	push	{r4, lr}
 8007022:	3901      	subs	r1, #1
 8007024:	4402      	add	r2, r0
 8007026:	4290      	cmp	r0, r2
 8007028:	d101      	bne.n	800702e <memcmp+0xe>
 800702a:	2000      	movs	r0, #0
 800702c:	e005      	b.n	800703a <memcmp+0x1a>
 800702e:	7803      	ldrb	r3, [r0, #0]
 8007030:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007034:	42a3      	cmp	r3, r4
 8007036:	d001      	beq.n	800703c <memcmp+0x1c>
 8007038:	1b18      	subs	r0, r3, r4
 800703a:	bd10      	pop	{r4, pc}
 800703c:	3001      	adds	r0, #1
 800703e:	e7f2      	b.n	8007026 <memcmp+0x6>

08007040 <memcpy>:
 8007040:	440a      	add	r2, r1
 8007042:	4291      	cmp	r1, r2
 8007044:	f100 33ff 	add.w	r3, r0, #4294967295
 8007048:	d100      	bne.n	800704c <memcpy+0xc>
 800704a:	4770      	bx	lr
 800704c:	b510      	push	{r4, lr}
 800704e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007056:	4291      	cmp	r1, r2
 8007058:	d1f9      	bne.n	800704e <memcpy+0xe>
 800705a:	bd10      	pop	{r4, pc}

0800705c <memset>:
 800705c:	4402      	add	r2, r0
 800705e:	4603      	mov	r3, r0
 8007060:	4293      	cmp	r3, r2
 8007062:	d100      	bne.n	8007066 <memset+0xa>
 8007064:	4770      	bx	lr
 8007066:	f803 1b01 	strb.w	r1, [r3], #1
 800706a:	e7f9      	b.n	8007060 <memset+0x4>

0800706c <_init>:
 800706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706e:	bf00      	nop
 8007070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007072:	bc08      	pop	{r3}
 8007074:	469e      	mov	lr, r3
 8007076:	4770      	bx	lr

08007078 <_fini>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	bf00      	nop
 800707c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707e:	bc08      	pop	{r3}
 8007080:	469e      	mov	lr, r3
 8007082:	4770      	bx	lr
